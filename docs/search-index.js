var searchIndex = JSON.parse('{\
"bus_mapping":{"doc":"GitHub Workflow Status (branch) Bus-Mapping is a crate …","t":"CAAAAAAAAADDENNNDDDNDNNDEDDINEEDDNNNDNNEDDDDNNNNENNNNNDDNNNMLLLLMLMMMLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLMMLLLLLMMMMMLLMLLMLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMMMMMMMMLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLFFLFLLLLLMLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMLLMMLMLLFFFMMMMLMMMMMMMMMMMLMLLLLLLLLLLLLLLMLLLLMMLLLLLMMMMMMLLMLMLLMLMMLMMMMMLLMLMLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLMMMMNNNNNNNNNNNNNNNNNNNENENENNNENNNNNNNNNNNEENNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLDLLMMMLLLMLLMMLLLLLMLLLLNNEDNNNNEDNNNNNNNNNNNNNNNNNNNNNNDDNNIEDDNNNEDNNNNNNDDNNNDNNDEDNNNDNNDNNNEDNNEDNNDNNMLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLMMMMLLLMMLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMLMMMLLLLLLLLLLLLLLLLLLLLLLLLLFENNDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLDDDDLLMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLMLLLLLLLLLLLLLLLLLLLL","n":["Error","circuit_input_builder","error","evm","exec_trace","mock","operation","precompile","rpc","state_db","Access","AccessSet","AccessValue","Account","Address","BeginTx","Block","BlockContext","BuilderClient","Bytecode","Call","Call","CallCode","CallContext","CallKind","CircuitInputBuilder","CircuitInputStateRef","CircuitsParams","Code","CodeSource","CopyDataType","CopyEvent","CopyStep","Create","Create2","DelegateCall","DynamicCParams","EndBlock","EndTx","ExecState","ExecStep","ExpEvent","ExpStep","FixedCParams","Hash","Memory","Memory","Number","NumberOrHash","Op","Padding","RlcAcc","StaticCall","Storage","Transaction","TransactionContext","Tx","TxCalldata","TxLog","a","account_read","account_write","add_copy_event","add_exp_event","address","as_bits","b","base","base_fee","begin_handle_block","block","block","block_ctx","block_ctx","block_steps","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_state_code_db","build_state_code_db","bus_mapping_instance","bytes","call","call_context_read","call_context_write","call_ctx","call_ctx_mut","call_data","call_data_length","call_data_offset","call_id","call_index","call_mut","caller","caller_address","caller_ctx","caller_ctx_mut","caller_id","caller_mut","calls","calls","calls_mut","chain_id","circuits_params","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","code","code","code_address","code_db","code_db","code_hash","code_source","coinbase","container","copy_events","copy_rw_counter_delta","d","default","default","default","default","default","default","default","default","default","default","default","default","depth","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","difficulty","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","dst_addr","dst_id","dst_type","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","eth_block","exec_state","exp_events","exponent","exponentiation","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gas_cost","gas_left","gas_limit","gas_refund","gen_inputs","gen_inputs_from_state","get_block","get_call_memory_offset_length","get_create_init_code","get_state","get_state_accesses","get_state_accesses","handle_block","handle_block","handle_restore_context","handle_return","history_hashes","id","id","identifier","index","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_code","is_create","is_delegatecall","is_dup","is_last_tx","is_log","is_persistent","is_precompiled","is_push","is_root","is_static","is_steps_empty","is_success","is_swap","iter","keccak_inputs","keccak_inputs_sign_verify","keccak_inputs_tx_circuit","kind","last_callee_id","last_callee_return_data_length","last_callee_return_data_offset","last_step","log_id","log_id","max_bytecode","max_calldata","max_copy_rows","max_evm_rows","max_exp_steps","max_keccak_rows","max_rws","max_txs","memory","memory_read","memory_size","memory_word_size","memory_word_size","memory_write","new","new","new","new","new","new","new","new_begin_tx_step","new_end_tx_step","new_step","new_tx","number","oog_or_stack_error","opcode","padding_tx","parse_call","pc","prev_state_root","push_call","push_copy","push_exponentiation","push_op","push_op_reversible","return_data","return_data_length","return_data_offset","reversible_write_counter","reversible_write_counter","reversible_write_counter_delta","rw_counter","rw_counter_delta","rw_counter_end_of_reversion","rw_counter_increase_left","rw_counter_start","rw_index","rw_indices_len","rwc","scalar","sdb","sdb","set_value_ops_call_context_rwc_eor","sha3_inputs","src_addr","src_addr_end","src_id","src_type","stack_pointer","stack_read","stack_size","stack_write","state","state_ref","steps","steps","steps_mut","timestamp","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transfer","transfer_with_fee","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tx","tx_access_list_write","tx_accesslist_account_write","tx_ctx","tx_log_write","tx_receipt_read","tx_receipt_write","txs","txs","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","address","address","address","key","AccountAccess","AccountNotFound","AddressNotFound","Call","Call","Call","CodeNotFound","CodeStore","CodeStoreOutOfGas","Constant","ContractAddressCollision","Create","Create","Create","Create2","Create2","Create2","Create2","Depth","DepthError","DynamicMemoryExpansion","Error","EthTypeError","ExecError","ExecutionError","Exp","InsufficientBalance","InsufficientBalanceError","InternalError","InvalidCreationCode","InvalidGethExecStep","InvalidGethExecTrace","InvalidJump","InvalidOpcode","JSONRpcError","Log","MaxCodeSizeExceeded","MemoryCopy","NonceUintOverflow","NonceUintOverflowError","OogError","OpcodeIdNotCallType","OutOfGas","ReturnDataOutOfBounds","SelfDestruct","SerdeError","Sha3","SloadSstore","StackOverflow","StackUnderflow","StaticMemoryExpansion","StorageKeyNotFound","UnexpectedExecStepError","WriteProtection","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","into","into","into","into","into","into","provide","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","ADD","ADDMOD","ADDRESS","AND","BALANCE","BASEFEE","BLOCKHASH","BYTE","CALL","CALLCODE","CALLDATACOPY","CALLDATALOAD","CALLDATASIZE","CALLER","CALLVALUE","CHAINID","CODECOPY","CODESIZE","COINBASE","CREATE","CREATE2","DELEGATECALL","DIFFICULTY","DIV","DUP1","DUP10","DUP11","DUP12","DUP13","DUP14","DUP15","DUP16","DUP2","DUP3","DUP4","DUP5","DUP6","DUP7","DUP8","DUP9","EQ","EXP","EXTCODECOPY","EXTCODEHASH","EXTCODESIZE","GAS","GASLIMIT","GASPRICE","GT","INVALID","ISZERO","JUMP","JUMPDEST","JUMPI","LOG0","LOG1","LOG2","LOG3","LOG4","LT","MLOAD","MOD","MSIZE","MSTORE","MSTORE8","MUL","MULMOD","NOT","NUMBER","OR","ORIGIN","Opcode","OpcodeId","PC","POP","PUSH0","PUSH1","PUSH10","PUSH11","PUSH12","PUSH13","PUSH14","PUSH15","PUSH16","PUSH17","PUSH18","PUSH19","PUSH2","PUSH20","PUSH21","PUSH22","PUSH23","PUSH24","PUSH25","PUSH26","PUSH27","PUSH28","PUSH29","PUSH3","PUSH30","PUSH31","PUSH32","PUSH4","PUSH5","PUSH6","PUSH7","PUSH8","PUSH9","RETURN","RETURNDATACOPY","RETURNDATASIZE","REVERT","SAR","SDIV","SELFBALANCE","SELFDESTRUCT","SGT","SHA3","SHL","SHR","SIGNEXTEND","SLOAD","SLT","SMOD","SSTORE","STATICCALL","STOP","SUB","SWAP1","SWAP10","SWAP11","SWAP12","SWAP13","SWAP14","SWAP15","SWAP16","SWAP2","SWAP3","SWAP4","SWAP5","SWAP6","SWAP7","SWAP8","SWAP9","TIMESTAMP","XOR","as_u64","as_u8","borrow","borrow_mut","clone","clone_into","constant_gas_cost","data_len","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","expr","fmt","fmt","from","from","from_str","gen_associated_ops","has_memory_access","hash","init","into","invalid_opcodes","invalid_stack_ptrs","is_call","is_call_or_create","is_create","is_dup","is_log","is_push","is_push_with_data","is_swap","iter","postfix","push_n","scalar","serialize","to_owned","to_string","try_from","try_into","type_id","valid_opcodes","vzip","OperationRef","as_usize","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","equivalent","fmt","from","from","init","into","target","to_owned","try_from","try_into","type_id","vzip","BlockData","borrow","borrow_mut","chain_id","circuits_params","code_db","deref","deref_mut","drop","eth_block","fmt","from","geth_traces","history_hashes","init","into","new_circuit_input_builder","new_from_geth_data","new_from_geth_data_with_params","sdb","try_from","try_into","type_id","vzip","Account","Account","AccountField","AccountOp","Address","Balance","CallContext","CallContext","CallContextField","CallContextOp","CallDataLength","CallDataOffset","CalleeAddress","CallerAddress","CallerId","CodeHash","CodeHash","CumulativeGasUsed","Data","Depth","GasLeft","IsCreate","IsPersistent","IsRoot","IsStatic","IsSuccess","LastCalleeId","LastCalleeReturnDataLength","LastCalleeReturnDataOffset","LogLength","Memory","Memory","MemoryAddress","MemoryOp","MemorySize","Nonce","Op","OpEnum","Operation","OperationContainer","PostStateOrStatus","ProgramCounter","READ","RW","RWCounter","ReturnDataLength","ReturnDataOffset","ReversibleWriteCounter","RwCounterEndOfReversion","Stack","Stack","StackAddress","StackOp","StackPointer","Start","Start","StartOp","Storage","Storage","StorageOp","Target","TargetIter","Topic","TxAccessListAccount","TxAccessListAccount","TxAccessListAccountOp","TxAccessListAccountStorage","TxAccessListAccountStorage","TxAccessListAccountStorageOp","TxId","TxLog","TxLog","TxLogField","TxLogOp","TxReceipt","TxReceipt","TxReceiptField","TxReceiptOp","TxRefund","TxRefund","TxRefundOp","Value","WRITE","account","add","add","add","add","add_assign","add_assign","address","address","address","address","address","address","address","address","address","as_bits","as_bits","as_bits","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call_context","call_id","call_id","call_id","call_id","call_id","call_id","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","committed_value","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","expr","field","field","field","field","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_be_bytes","from_le_bytes","from_str","from_str","hash","inc","inc_pre","index","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","insert","insert_op_enum","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_enum","into_enum","into_enum","into_enum","into_enum","into_enum","into_enum","into_enum","into_enum","into_enum","into_enum","into_enum","into_iter","is_read","is_reversible","is_warm","is_warm","is_warm_prev","is_warm_prev","is_write","iter","key","key","key","len","log_id","map","map","memory","mul","mul","mul","mul","mul_assign","mul_assign","new","new","new","new","new","new","new","new","new","new","new_reversible","next","next_back","nth","op","op_mut","par_bridge","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","reverse","reverse","reverse","reverse","reverse","reverse","reverse","reverse","reverse","reverse","reverse","reverse","reversible","rw","rwc","scalar","size_hint","sorted_memory","sorted_stack","sorted_storage","stack","start","storage","sub","sub","sub","sub","sub_assign","sub_assign","target","target","target","target","to_be_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tx_access_list_account","tx_access_list_account_storage","tx_id","tx_id","tx_id","tx_id","tx_id","tx_id","tx_log","tx_receipt","tx_refund","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","value","value","value","value","value","value","value","value","value","value","value_prev","value_prev","value_prev","value_prev","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zero","is_precompiled","BlockNumber","Earliest","Finalized","GethClient","Latest","Number","Pending","Safe","as_number","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","from_str","get_block_by_hash","get_block_by_number","get_chain_id","get_code","get_coinbase","get_proof","hash","init","init","into","into","is_earliest","is_finalized","is_latest","is_number","is_pending","is_safe","miner_start","miner_stop","new","serialize","serialize","to_owned","to_string","trace_block_by_hash","trace_block_by_number","try_from","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Account","CodeDB","EMPTY_CODE_HASH_LE","StateDB","add_account_storage_to_access_list","add_account_to_access_list","balance","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_account_in_access_list","check_account_storage_in_access_list","clone","clone","clone","clone_into","clone_into","clone_into","code_hash","commit_tx","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","destruct_account","drop","drop","drop","drop","empty_code_hash","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from","from","from","get_account","get_account_mut","get_balance","get_committed_storage","get_from_h256","get_from_u256","get_nonce","get_storage","get_storage_mut","hash","increase_nonce","init","init","init","init","insert","into","into","into","into","into_iter","is_empty","new","nonce","num_rows_required_for_bytecode_table","refund","remove_account_from_access_list","remove_account_storage_from_access_list","set_account","set_refund","set_storage","storage","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","zero"],"q":[[0,"bus_mapping"],[10,"bus_mapping::circuit_input_builder"],[658,"bus_mapping::circuit_input_builder::AccessValue"],[662,"bus_mapping::error"],[830,"bus_mapping::evm"],[1024,"bus_mapping::exec_trace"],[1047,"bus_mapping::mock"],[1071,"bus_mapping::operation"],[1817,"bus_mapping::precompile"],[1818,"bus_mapping::rpc"],[1886,"bus_mapping::state_db"]],"d":["","This module contains the CircuitInputBuilder, which is an …","Error module for the bus-mapping crate","Evm types needed for parsing instruction sets as well","This module contains the logic for parsing and interacting …","Mock types and functions to generate mock data useful for …","Collection of structs and functions used to:","precompile helpers","Module which contains all the RPC calls that are needed at …","Implementation of an in-memory key-value database to …","State Access caused by a transaction or an execution step","State and Code Access set.","State and Code Access with “keys/index” used in the …","Account access","Code comes from a deployed contract at <code>Address</code>.","Virtual step Begin Tx","Circuit Input related to a block.","Context of a <code>Block</code> which can mutate in a <code>Transaction</code>.","Struct that wraps a GethClient and contains methods to …","When the source for the copy event is the bytecode table.","Circuit Input related to an Ethereum Call","CALL","CALLCODE","Context of a <code>Call</code>.","Type of a <em>CALL</em>/CREATE* Function.","Builder to generate a complete circuit input from data …","Reference to the internal state of the CircuitInputBuilder …","Circuit Setup Parameters. These can be fixed/concrete or …","Code access","Source of the code in the EVM execution.","Defines the various source/destination types for a copy …","Defines a copy event associated with EVM opcodes such as …","Defines a single copy step in a copy event. This type is …","CREATE","CREATE2","DELEGATECALL","Unset Circuits Parameters, computed dynamically together …","Virtual step End Block","Virtual step End Tx","Execution state","An execution step of the EVM.","Event representating an exponentiation …","Intermediary multiplication step, representing …","Circuit Setup Parameters","Variant to indicate a 256-bits hash value.","Code comes from Memory by a CREATE* opcode.","When the source/destination for the copy event is memory.","Variant to indicate a number value.","Defines an enum type that can hold either a number or a …","EVM Opcode ID","When we need to pad the Copy rows of the circuit up to a …","When the destination rows are not directly for copying but …","STATICCALL","Storage access","Result of the parsing of an Ethereum Transaction.","Context of a <code>Transaction</code> which can mutate in an <code>ExecStep</code>.","Code comes from tx.data when tx.to == null.","When the source for the copy event is tx’s calldata.","When the destination for the copy event is tx’s log.","First multiplicand.","Push a read type <code>AccountOp</code> into the <code>OperationContainer</code> …","Push a write type <code>AccountOp</code> into the <code>OperationContainer</code> …","Push a copy event to the block.","Push an exponentiation event to the block.","Address where this call is being executed","","Second multiplicand.","Base <code>a</code> for the exponentiation.","base fee","First part of handle_block, common for dynamic and static …","Block","Block","Block Context","Block Context","Block-wise steps","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Build a partial StateDB from step 3","Step 4. Build a partial StateDB from step 3","The list of references to Operations in the container","Represents the list of (bytes, is_code) copied during this …","Reference to the current Call","Push a read type <code>CallContextOp</code> into the <code>OperationContainer</code> …","Push a write type <code>CallContextOp</code> into the <code>OperationContainer</code>…","Reference to the current CallContext","Mutable reference to the call CallContext","Call data (copy of tx input or caller’s memory[…","Call data length","Call data offset","Unique call identifier within the Block.","Call index within the Transaction.","Mutable reference to the current Call","Reference to the caller’s Call","Address of caller","Reference to the current CallContext","Mutable reference to the caller CallContext","Caller’s id.","Mutable reference to the current call’s caller Call","Return the calls in this transaction.","Return the list of calls of this transaction.","Return a mutable reference to the list containing the …","chain id","Circuits Setup Paramteres","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fetch and return code for the given code hash from the …","Set of accounts code","Get the code address if possible","CodeDB","Map of account codes by code hash","Code Hash","Code Source","coinbase","Container of operations done in this block.","Copy events in this block.","Number of rw operations performed via a copy event in this …","Multiplication result.","","","","","","","","","","","","Default values for most of the unit tests of the Circuit …","Depth","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gas limit","","","","","","","","","","","","","","","","","","","","","","","","","Represents the start address at the destination of the …","Represents the relevant ID for destination.","Represents the destination type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Error generated by this step","Original block from geth","Execution state","Exponentiation events in the block.","Exponent <code>b</code> for the exponentiation.","Exponentiation result.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gas cost of the step.  If the error is OutOfGas caused by …","Gas left","time","Accumulated gas refund","Perform all the steps to generate the circuit inputs","Step 5. For each step in TxExecTraces, gen the associated …","Step 1. Query geth for Block, Txs, TxExecTraces, history …","Retrieve the memory offset and length of call.","Retrieve the init_code from memory for {CREATE, CREATE2}","Step 3. Query geth for all accounts, storage keys, and …","Get State Accesses from TxExecTraces","Step 2. Get State Accesses from TxExecTraces","Handle a block by handling each transaction to generate …","Handle a block by handling each transaction to generate …","Bus mapping for the RestoreContextGadget as used in RETURN.","Handle a restore and a return step caused by any opcode …","history hashes contains most recent 256 block hashes in …","Return id of the this transaction.","The transaction id","Identifier for the exponentiation trace.","Index of call","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Optional field which is enabled only for the source being …","This call is root call with tx.to == null, or op == CREATE …","This call is call with op DELEGATECALL","Returns <code>true</code> if <code>ExecState</code> is an opcode and the opcode is a …","Return is_last_tx of the this transaction.","Returns <code>true</code> if <code>ExecState</code> is an opcode and the opcode is a …","This call is persistent or call stack reverts at some point","Check if address is a precompiled or not.","Returns <code>true</code> if <code>ExecState</code> is an opcode and the opcode is a …","This call generated implicity by a Transaction.","This call is being executed without write access (STATIC)","Return whether the steps in this transaction is empty","This call ends successfully or not","Returns <code>true</code> if <code>ExecState</code> is an opcode and the opcode is a …","","Return all the keccak inputs used during the processing of …","Generate the keccak inputs required by the SignVerify Chip …","Generate the keccak inputs required by the Tx Circuit from …","Type of call","Last Callee’s id.","last callee’s return data length","last callee’s return data offset","Return last step in this transaction.","Log index when this step was executed.","An optional field to hold the log ID in case of the …","Maximum number of bytes supported in the Bytecode Circuit","Maximum number of bytes from all txs calldata in the Tx …","Max ammount of rows that the CopyCircuit can have.","Pad evm circuit number of rows. When 0, the EVM circuit …","Max number of steps that the ExpCircuit can have. Each …","Pad the keccak circuit with this number of invocations to …","Maximum number of rw operations in the state circuit …","Maximum number of txs in the Tx Circuit","memory context of current call","Push a read type <code>MemoryOp</code> into the <code>OperationContainer</code> with …","Memory size","Memory size in words, rounded up","The memory size in word <strong>before</strong> this step","Push a write type <code>MemoryOp</code> into the <code>OperationContainer</code> …","Create a new BuilderClient","Create a new Self","Create a new block.","Create a new Self from a <code>GethExecStep</code>.","Create a new Self.","Create a new Self.","Create a new CircuitInputBuilder from the given <code>eth_block</code> …","Create a new BeginTx step","Create a new EndTx step","Create a new step from a <code>GethExecStep</code>","Create a new Transaction from a <code>eth_types::Transaction</code>.","number","Returns <code>true</code> if <code>error</code> is oog and stack related..","Try get opcode, if possible","Constructor for padding tx in tx circuit","Parse <code>Call</code> from a <em>CALL</em>/CREATE* step.","Program Counter","State root of the previous block","Push a new <code>Call</code> into the <code>Transaction</code>, and add its index and","Push a copy event to the state.","Push a exponentiation event to the state.","Push an <code>Operation</code> into the <code>OperationContainer</code> with the …","Push an <code>Operation</code> with reversible to be true into the …","return data buffer","Return data length","Return data offset","Reversible Write Counter tracks the number of write …","Reversible Write Counter.  Counter of write operations in …","Number of reversible write operations done by this step.","rw counter at step index","Number of rw operations performed by this copy event","This rw_counter at the end of reversion","rw counter increase left at step index","Value of rw counter at start of this copy event","get rw index","Get the size of read and writes","The global counter when this step was executed.","","StateDB","StateDB key-value DB","Iterate over all generated CallContext …","Inputs to the SHA3 opcode","Represents the start address at the source of the copy …","Represents the end address at the source of the copy event.","Represents the relevant ID for source.","Represents the source type.","Get stack pointer","Push a read type <code>StackOp</code> into the <code>OperationContainer</code> with …","Stack size","Push a write type <code>StackOp</code> into the <code>OperationContainer</code> with …","Set of accounts","Obtain a mutable reference to the state that the …","Return the list of execution steps of this transaction.","Intermediate multiplication results.","Return a mutable reference to the list of execution steps …","difficulty","","","","","","","","","","","","","","","","Same functionality with <code>transfer_with_fee</code> but with <code>fee</code> set …","Push 2 reversible <code>AccountOp</code> to update <code>sender</code> and <code>receiver</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Transaction","Add address to access list for the current transaction.","Push a write type <code>TxAccessListAccountOp</code> into the …","Transaction Context","Push a write type <code>TxLogOp</code> into the <code>OperationContainer</code> with …","Push a read type <code>TxReceiptOp</code> into the <code>OperationContainer</code> …","Push a write type <code>TxReceiptOp</code> into the <code>OperationContainer</code> …","Return the list of transactions of this block.","Transactions contained in the block","","","","","","","","","","","","","","","","","","","","","","","","","Value","Byte value copied in this step.","","","","","","","","","","","","","","","","","","","","","","","","","Account address","Storage account address","Code address","Storage key","Out of Gas for BALANCE, EXTCODESIZE, EXTCODEHASH, which …","Account not found in the StateDB","Address not found in the CodeDB,","Out of Gas for CALL, CALLCODE, DELEGATECALL and STATICCALL","Insufficient balance during CALL/CALLCODE opcode.","Call depth errors in CALL/CALLCODE opcode.","Code not found in the CodeDB","Out of Gas for RETURN which has code storing gas cost when …","For RETURN in a CREATE, CREATE2","Out of Gas for opcodes which have non-zero constant gas …","For CREATE2","Insufficient balance during CREATE opcode.","Nonce uint overflow during CREATE opcode.","Call depth errors in CREATE opcode.","Out of Gas for CREATE2","Insufficient balance during CREATE2 opcode.","Nonce uint overflow during CREATE2 opcode.","Call depth errors in CREATE2 opcode.","For CALL, CALLCODE, DELEGATECALL, STATICCALL, CREATE, …","Call depth errors by opcode/state.","Out of Gas for CREATE, RETURN, REVERT, which have dynamic …","Error type for any BusMapping related failure.","Eth type related error.","EVM Execution Error","EVM Execution error","Out of Gas for EXP","For CALL, CALLCODE, CREATE, CREATE2","Insufficient balance errors by opcode/state.","Internal Code error","contract must not begin with 0xef due to EIP #3541 EVM …","Invalid <code>GethExecStep</code> due to an invalid/unexpected value in …","Invalid <code>eth_types::GethExecTrace</code> due to an …","For JUMP, JUMPI","Invalid Opcode","JSON-RPC related error.","Out of Gas for LOG0, LOG1, LOG2, LOG3, LOG4","For RETURN in a CREATE, CREATE2","Out of Gas for CALLDATACOPY, CODECOPY, EXTCODECOPY, …","For CREATE, CREATE2","Nonce uint overflow errors by opcode/state.","Out of Gas errors by opcode","OpcodeId is not a call type.","Out of Gas","For RETURNDATACOPY","Out of Gas for SELFDESTRUCT","Serde de/serialization error.","Out of Gas for SHA3","Out of Gas for SLOAD and SSTORE","For opcodes who push more than pop","For opcodes which pop, DUP and SWAP, which peek deeper …","Out of Gas for MLOAD, MSTORE, MSTORE8, which have static …","Storage key not found in the StateDB","Unable to figure out error at a <code>GethExecStep</code>","For SSTORE, LOG0, LOG1, LOG2, LOG3, LOG4, CREATE, CALL, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>ADD</code>","<code>ADDMOD</code>","<code>ADDRESS</code>","<code>AND</code>","<code>BALANCE</code>","<code>BASEFEE</code>","<code>BLOCKHASH</code>","<code>BYTE</code>","<code>CALL</code>","<code>CALLCODE</code>","<code>CALLDATACOPY</code>","<code>CALLDATALOAD</code>","<code>CALLDATASIZE</code>","<code>CALLER</code>","<code>CALLVALUE</code>","<code>CHAINID</code>","<code>CODECOPY</code>","<code>CODESIZE</code>","<code>COINBASE</code>","<code>CREATE</code>","<code>CREATE2</code>","<code>DELEGATECALL</code>","<code>DIFFICULTY</code>","<code>DIV</code>","<code>DUP1</code>","<code>DUP10</code>","<code>DUP11</code>","<code>DUP12</code>","<code>DUP13</code>","<code>DUP14</code>","<code>DUP15</code>","<code>DUP16</code>","<code>DUP2</code>","<code>DUP3</code>","<code>DUP4</code>","<code>DUP5</code>","<code>DUP6</code>","<code>DUP7</code>","<code>DUP8</code>","<code>DUP9</code>","<code>EQ</code>","<code>EXP</code>","<code>EXTCODECOPY</code>","<code>EXTCODEHASH</code>","<code>EXTCODESIZE</code>","<code>GAS</code>","<code>GASLIMIT</code>","<code>GASPRICE</code>","<code>GT</code>","Invalid opcode","<code>ISZERO</code>","<code>JUMP</code>","<code>JUMPDEST</code>","<code>JUMPI</code>","<code>LOG0</code>","<code>LOG1</code>","<code>LOG2</code>","<code>LOG3</code>","<code>LOG4</code>","<code>LT</code>","<code>MLOAD</code>","<code>MOD</code>","<code>MSIZE</code>","<code>MSTORE</code>","<code>MSTORE8</code>","<code>MUL</code>","<code>MULMOD</code>","<code>NOT</code>","<code>NUMBER</code>","<code>OR</code>","<code>ORIGIN</code>","Generic opcode trait which defines the logic of the …","Opcode enum. One-to-one corresponding to an <code>u8</code> value.","<code>PC</code>","<code>POP</code>","<code>PUSH0</code>","<code>PUSH1</code>","<code>PUSH10</code>","<code>PUSH11</code>","<code>PUSH12</code>","<code>PUSH13</code>","<code>PUSH14</code>","<code>PUSH15</code>","<code>PUSH16</code>","<code>PUSH17</code>","<code>PUSH18</code>","<code>PUSH19</code>","<code>PUSH2</code>","<code>PUSH20</code>","<code>PUSH21</code>","<code>PUSH22</code>","<code>PUSH23</code>","<code>PUSH24</code>","<code>PUSH25</code>","<code>PUSH26</code>","<code>PUSH27</code>","<code>PUSH28</code>","<code>PUSH29</code>","<code>PUSH3</code>","<code>PUSH30</code>","<code>PUSH31</code>","<code>PUSH32</code>","<code>PUSH4</code>","<code>PUSH5</code>","<code>PUSH6</code>","<code>PUSH7</code>","<code>PUSH8</code>","<code>PUSH9</code>","<code>RETURN</code>","<code>RETURNDATACOPY</code>","<code>RETURNDATASIZE</code>","<code>REVERT</code>","<code>SAR</code>","<code>SDIV</code>","<code>SELFBALANCE</code>","<code>SELFDESTRUCT</code>","<code>SGT</code>","<code>SHA3</code>","<code>SHL</code>","<code>SHR</code>","<code>SIGNEXTEND</code>","<code>SLOAD</code>","<code>SLT</code>","<code>SMOD</code>","<code>SSTORE</code>","<code>STATICCALL</code>","<code>STOP</code>","<code>SUB</code>","<code>SWAP1</code>","<code>SWAP10</code>","<code>SWAP11</code>","<code>SWAP12</code>","<code>SWAP13</code>","<code>SWAP14</code>","<code>SWAP15</code>","<code>SWAP16</code>","<code>SWAP2</code>","<code>SWAP3</code>","<code>SWAP4</code>","<code>SWAP5</code>","<code>SWAP6</code>","<code>SWAP7</code>","<code>SWAP8</code>","<code>SWAP9</code>","<code>TIMESTAMP</code>","<code>XOR</code>","Returns the <code>OpcodeId</code> as a <code>u64</code>.","Returns the <code>OpcodeId</code> as a <code>u8</code>.","","","","","Returns the constant gas cost of <code>OpcodeId</code>","Returns number of bytes used by immediate data. This is &gt; …","","","","","","","","","","","","Returns the argument unchanged.","","Generate the associated <code>MemoryOp</code>s, <code>StackOp</code>s, and <code>StorageOp</code>…","Returns <code>true</code> if the <code>OpcodeId</code> has memory access","","","Calls <code>U::from(self)</code>.","Returns the all invalid opcodes.","Returns invalid stack pointers of <code>OpcodeId</code>","Returns <code>true</code> if the <code>OpcodeId</code> is a CALL-like.","Returns <code>true</code> if the <code>OpcodeId</code> is a <code>CALL</code> or <code>CREATE</code> related .","Returns <code>true</code> if the <code>OpcodeId</code> is a CREATE-like.","Returns <code>true</code> if the <code>OpcodeId</code> is a <code>DUPn</code>.","Returns <code>true</code> if the <code>OpcodeId</code> is a <code>LOGn</code>.","Returns <code>true</code> if the <code>OpcodeId</code> is a <code>PUSHn</code> (including <code>PUSH0</code>).","Returns <code>true</code> if the <code>OpcodeId</code> is a <code>PUSH1</code> .. <code>PUSH32</code> …","Returns <code>true</code> if the <code>OpcodeId</code> is a <code>SWAPn</code>.","","If operation has postfix returns it, otherwise None.","Returns PUSHn opcode from parameter n.","","","","","","","","Returns the all valid opcodes.","","The target and index of an <code>Operation</code> in the context of an …","Return the <code>OperationRef</code> as a <code>usize</code>.","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Return the <code>Target</code> op type of the <code>OperationRef</code>.","","","","","","BlockData is a type that contains all the information from …","","","chain id","Circuits setup parameters","CodeDB","","","","Block from geth","","Returns the argument unchanged.","Execution Trace from geth","history hashes contains most recent 256 block hashes in …","","Calls <code>U::from(self)</code>.","Generate a new CircuitInputBuilder initialized with the …","Create a new block from the given Geth data with default …","Create a new block from the given Geth data.","StateDB","","","","","Means the target of the operation is the Account.","Account","Represents a field parameter of the Account that can be …","Represents a change in the Account field implied by a …","contract address","Account Balance","Means the target of the operation is the CallContext.","CallContext","Represents a field parameter of the CallContext that can …","Represents an CallContext read/write operation.","CallDataLength","CallDataOffset","CalleeAddress","CallerAddress","CallerId","Account Code Hash","CodeHash","the cumulative gas used in the block containing the …","data of log entry","Depth","GasLeft","IsCreate","IsPersistent","IsRoot","IsStatic","IsSuccess","LastCalleeId","LastCalleeReturnDataLength","LastCalleeReturnDataOffset","record how many log entries in the receipt/tx , 0 if tx …","Means the target of the operation is the Memory.","Memory","Represents a <code>MemoryAddress</code> of the EVM.","Represents a <code>READ</code>/<code>WRITE</code> into the memory implied by an …","MemorySize","Account Nonce","Trait used for Operation Kinds.","Generic enum that wraps over all the operation types …","Operation is a Wrapper over a type that implements Op with …","The <code>OperationContainer</code> is meant to store all of the …","flag indicates whether a tx succeed or not","ProgramCounter","Marks op as READ.","Marker that defines whether an Operation performs a <code>READ</code> …","Wrapper type over <code>usize</code> which represents the global …","ReturnDataLength","ReturnDataOffset","ReversibleWriteCounter","RwCounterEndOfReversion","Means the target of the operation is the Stack.","Stack","Represents a <code>StackAddress</code> of the EVM. The address range …","Represents a <code>READ</code>/<code>WRITE</code> into the stack implied by an …","StackPointer","Start is a padding operation.","Start","Represent a Start padding operation","Means the target of the operation is the Storage.","Storage","Represents a <code>READ</code>/<code>WRITE</code> into the storage implied by an …","Enum used to differenciate between EVM Stack, Memory and …","An iterator over the variants of Self","topic of log entry","Means the target of the operation is the …","TxAccessListAccount","Represents a change in the Account AccessList implied by a …","Means the target of the operation is the …","TxAccessListAccountStorage","Represents a change in the Storage AccessList implied by …","TxId","Means the target of the operation is the TxLog.","TxLog","Represents a field parameter of the TxLog that can be …","Represents TxLog read/write operation.","Means the target of the operation is the TxReceipt.","TxReceipt","Represents a field parameter of the TxReceipt that can be …","Represents TxReceipt read/write operation.","Means the target of the operation is the TxRefund.","TxRefund","Represents a change in the Transaction Refund AccessList …","Value","Marks op as WRITE.","Operations of AccountOp","","","","","","","Returns the <code>MemoryAddress</code> associated to this Operation.","Returns the <code>StackAddress</code> associated to this Operation.","Returns the <code>Address</code> corresponding to this storage …","Memory Address","Stack Address","Account Address","Account Address","Account Address","Account Address","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Operations of CallContextOp","Returns the call id associated to this Operation.","Returns the call id associated to this Operation.","Returns the call id associated to this Operation.","Call ID","Call ID","call_id of CallContext","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Storage Value before the transaction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Field","field of CallContext","field of TxLogField","field of TxReceipt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generate a MemoryAddress from the provided set of …","Generate a MemoryAddress from the provided set of …","","","","Increase Self by one","Increase Self by one and return the value before the …","topic index if field is Topic byte index if field is Data …","","","","","","","","","","","","","","","","","","","","","","","","","Inserts an <code>Operation</code> into the  container returning a …","Inserts an <code>OpEnum</code> into the  container returning a …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Turn the Generic Op into an OpEnum so that we can match it …","","","","","","","","","","","","","Returns true if the RW corresponds internally to a <code>READ</code>.","Returns true if the RwTable operation is reversible","Represents whether we can classify the access to the value …","Whether the access was classified as <code>WARM</code> or not.","Represents whether we can classify the access to the …","Whether the prev_value access was classified as <code>WARM</code> or …","Returns true if the RW corresponds internally to a <code>WRITE</code>.","","Returns the <code>Word</code> used as key for this operation.","Storage Key","Storage Key","","id of log entry, starts with 1 in rw table, it’s unique …","Apply a function to the contained value.","Apply a function to the contained value.","Operations of MemoryOp","","","","","","","Generates a new StackAddress given a <code>usize</code>.","Generates a new instance of an <code>OperationContainer</code>.","Create a new RWCounter with the initial default value","Create a new instance of a <code>MemoryOp</code> from it’s components.","Create a new instance of a <code>StackOp</code> from it’s components.","Create a new instance of a <code>StorageOp</code> from it’s …","Create a new instance of a <code>AccountOp</code> from it’s …","Create a new instance of a <code>CallContextOp</code> from it’s …","Create a new instance of a <code>TxLogOp</code> from it’s components.","Create a new Operation from an <code>op</code> with a <code>rwc</code>","Create a new reversible Operation from an <code>op</code> with a <code>rwc</code>","","","","Return this <code>Operation</code> <code>op</code>","Return this <code>Operation</code> <code>op</code> as mutable reference","","","","","","","","","","","","","","","","","","","","","","Return a copy of the operation reversed.","","","","","","","","","","","","Return this <code>Operation</code> <code>reversible</code>","Return this <code>Operation</code> <code>rw</code>","Return this <code>Operation</code> <code>rwc</code>","","","Returns a sorted vector of all of the <code>MemoryOp</code>s contained …","Returns a sorted vector of all of the <code>StackOp</code>s contained …","Returns a sorted vector of all of the <code>StorageOp</code>s contained …","Operations of StackOp","Operations of Start","Operations of StorageOp","","","","","","","Returns the <code>Target</code> (operation type) of this operation.","Returns the <code>Target</code> (operation type) of this operation.","Returns the <code>Target</code> (operation type) of this operation.","Returns the <code>Target</code> (operation type) of this operation.","Return the big-endian byte representation of the word as a …","Return the little-endian byte representation of the word …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Operations of TxAccessListAccountOp","Operations of TxAccessListAccountStorageOp","Transaction ID: Transaction index in the block starting at …","Transaction ID: Transaction index in the block starting at …","Transaction ID: Transaction index in the block starting at …","Transaction ID: Transaction index in the block starting at …","tx_id of TxLog, starts with 1 in rw table, and it’s …","tx_id of TxReceipt","Operations of TxLogOp","Operations of TxReceiptOp","Operations of TxRefundOp","","","","","","","","","","","","","","","","","","","","","","","","","Returns the bytes read or written by this operation.","Returns the <code>Word</code> read or written by this operation.","Returns the <code>Word</code> read or written by this operation.","Returns the <code>Word</code> read or written by this operation.","Value","Value","Storage Value after the operation","Refund Value in units of gas after the operation.","Field Value after the operation","value of CallContext","value","value of TxReceipt","Returns the <code>Word</code> at key found previous to this operation.","Storage Value before the operation","Refund Value in units of gas after the operation.","Field Value before the operation","","","","","","","","","","","","","","","","","","","","","","","","","Returns the zero address for Memory targets.","Check if address is a precompiled or not.","A block number or tag.","Earliest block (genesis)","Finalized block accepted as canonical","Placeholder structure designed to contain the methods that …","Latest block","Block by number from canon chain","Pending block (not yet part of the blockchain)","Safe head block","Returns the numeric block number if explicitly set","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>eth_getBlockByHash</code> via JSON-RPC returning a <code>Block</code> …","Calls <code>eth_getBlockByNumber</code> via JSON-RPC returning a <code>Block</code> …","Calls <code>eth_chainId</code> via JSON-RPC returning the chain id of …","Calls <code>eth_getCode</code> via JSON-RPC returning a contract code","Calls <code>eth_coinbase</code> via JSON-RPC returning the coinbase of …","Calls <code>eth_getProof</code> via JSON-RPC returning a …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if it’s “earliest”","Returns <code>true</code> if it’s “finalized”","Returns <code>true</code> if it’s “latest”","Returns <code>true</code> if a numeric block number is set","Returns <code>true</code> if it’s “pending”","Returns <code>true</code> if it’s “safe”","Calls <code>miner_start</code> via JSON-RPC, which makes the node start …","Calls <code>miner_stop</code> via JSON-RPC, which makes the node stop …","Generates a new <code>GethClient</code> instance.","Serialize a type.","","","","Calls <code>debug_traceBlockByHash</code> via JSON-RPC returning a …","Calls <code>debug_traceBlockByNumber</code> via JSON-RPC returning a …","","","","","","","","","","Account of the Ethereum State Trie, which contains an …","Memory storage for contract code by code hash.","bytes of empty code hash, in little endian order.","In-memory key-value database that represents the Ethereum …","Add <code>(addr, key)</code> into account storage access list. Returns …","Add <code>addr</code> into account access list. Returns <code>true</code> if it’s …","Balance","","","","","","","","","Check whether <code>addr</code> exists in account access list.","Check whether <code>(addr, key)</code> exists in account storage access …","","","","","","","Code hash","Clear access list and refund, and commit dirty storage. It …","","","","","","","","","","","","Set account as self destructed.","","","","","Code hash of empty code.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Get a reference to the <code>Account</code> at <code>addr</code>.  Returns false and …","Get a mutable reference to the <code>Account</code> at <code>addr</code>.  If the …","Get balance of account with the given address.","Get a reference to the storage value from <code>Account</code> at <code>addr</code>, …","Query Bytecode by H256","Query Bytecode by U256","Get nonce of account with <code>addr</code>.","Get a reference to the storage value from <code>Account</code> at <code>addr</code>, …","Get a mutable reference to the storage value from <code>Account</code> …","Compute hash of given code.","Increase nonce of account with <code>addr</code> and return the …","","","","","Insert code indexed by code hash, and return the code hash.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return if account is empty or not.","Create an empty Self","Nonce","Compute number of rows required for bytecode table.","Retrieve refund.","Remove <code>addr</code> from account access list.","Remove <code>(addr, key)</code> from account storage access list.","Set an <code>Account</code> at <code>addr</code> in the StateDB.","Set refund","Set storage value at <code>addr</code> and <code>key</code>. Writes into …","Storage key-value map","","","","","","","","","","","","","","","","","","","","Return an empty account, with all values set at zero."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,37,25,28,0,0,0,29,0,27,27,0,0,0,0,0,37,0,0,0,0,27,27,27,0,28,28,0,0,0,0,0,31,25,29,31,0,28,29,29,27,37,0,0,25,29,29,32,1,1,8,8,19,29,32,10,8,12,1,12,1,12,8,1,47,37,39,40,25,26,8,27,19,22,2,28,29,30,31,9,32,10,23,24,33,34,12,1,47,37,39,40,25,26,8,27,19,22,2,28,29,30,31,9,32,10,23,24,33,34,12,0,47,2,9,1,1,1,1,1,22,19,19,19,2,1,1,19,1,1,19,1,23,24,24,8,12,25,26,27,19,2,28,29,30,31,9,32,10,24,33,34,25,26,27,19,2,28,29,30,31,9,32,10,24,33,34,1,40,19,1,12,19,19,8,8,8,2,32,25,26,27,19,22,2,28,29,10,23,24,33,19,1,47,37,39,40,25,26,8,27,19,22,2,28,29,30,31,9,32,10,23,24,24,33,34,12,1,47,37,39,40,25,26,8,27,19,22,2,28,29,30,31,9,32,10,23,24,33,34,12,8,1,47,37,39,40,25,26,8,27,19,22,2,28,29,30,31,9,32,10,23,24,33,34,12,9,9,9,37,39,40,25,27,19,28,29,30,31,32,37,37,39,39,40,40,25,25,27,27,19,19,28,28,29,29,30,30,31,31,32,32,2,8,2,8,10,10,29,37,39,40,25,26,8,27,19,22,2,28,29,30,31,9,32,10,23,24,33,34,12,1,47,37,39,40,40,25,26,8,27,19,22,2,28,29,30,31,9,32,32,10,23,24,33,34,12,2,2,8,2,47,47,47,0,0,47,0,47,12,12,1,1,8,23,24,10,22,1,47,37,39,40,25,26,8,27,19,22,2,28,29,30,31,9,32,10,23,24,33,34,12,1,47,37,39,40,25,26,8,27,19,22,2,28,29,30,31,9,32,10,23,24,33,34,12,30,19,19,28,23,28,19,1,28,19,19,24,19,28,29,0,0,0,19,19,19,19,24,2,9,33,33,33,33,33,33,33,33,22,1,2,22,2,1,47,26,8,2,23,24,12,1,1,1,12,8,2,2,24,1,2,8,1,1,1,1,1,22,19,19,22,2,2,9,9,19,9,9,2,2,2,29,1,12,12,8,9,9,9,9,2,1,2,1,40,12,24,10,24,8,25,26,27,19,2,28,29,30,31,9,32,10,24,33,34,1,1,1,47,37,39,40,25,26,8,27,27,19,22,2,28,29,30,31,9,32,10,23,24,33,34,12,1,47,37,39,40,25,26,8,27,19,22,2,28,29,30,31,9,32,10,23,24,33,34,12,1,1,1,1,1,1,1,8,8,1,47,37,39,40,25,26,8,27,19,22,2,28,29,30,31,9,32,10,23,24,33,34,12,19,30,1,47,37,39,40,25,26,8,27,19,22,2,28,29,30,31,9,32,10,23,24,33,34,12,120,121,122,121,64,6,6,64,65,67,6,64,68,64,68,65,66,67,64,65,66,67,68,0,64,0,6,0,6,64,68,0,6,68,6,6,68,68,6,64,68,64,68,0,0,6,68,68,64,6,64,64,68,68,64,6,6,68,6,64,65,66,67,68,6,64,65,66,67,68,64,65,66,67,68,64,65,66,67,68,6,64,65,66,67,68,6,64,65,66,67,68,6,64,65,66,67,68,64,65,66,67,68,64,64,65,65,66,66,67,67,68,68,6,6,64,65,66,67,68,6,6,6,64,64,65,66,67,68,6,64,65,66,67,68,6,64,65,66,67,68,6,64,65,66,67,68,6,6,64,65,66,67,68,6,64,65,66,67,68,6,64,65,66,67,68,6,64,65,66,67,68,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,0,0,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,123,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,81,97,0,0,61,4,81,97,0,0,21,21,21,21,21,4,21,62,61,21,21,21,21,21,21,21,21,21,21,62,81,97,0,0,21,4,0,0,0,0,62,21,57,0,0,21,21,21,21,81,97,0,0,21,81,97,0,81,97,0,0,0,61,81,97,0,81,97,0,21,81,97,0,0,81,97,0,0,81,97,0,21,57,88,52,52,52,52,52,52,84,85,86,84,85,86,90,91,93,60,54,81,52,60,88,57,54,81,89,84,85,86,90,91,92,4,93,21,87,61,94,62,95,96,97,99,52,60,88,57,54,81,89,84,85,86,90,91,92,4,93,21,87,61,94,62,95,96,97,99,88,84,85,87,84,85,87,52,60,88,57,54,81,89,84,85,86,90,91,92,4,93,21,87,61,94,62,95,96,97,99,52,60,88,57,54,81,89,84,85,86,90,91,92,4,93,21,87,61,94,62,95,96,97,99,52,60,57,54,84,85,86,90,91,92,4,93,21,87,61,94,62,95,96,99,86,88,54,52,60,88,57,54,81,89,84,85,86,90,91,92,4,93,21,87,61,94,62,95,96,97,99,52,60,88,57,54,81,89,84,85,86,90,91,92,4,93,21,87,61,94,62,95,96,97,99,52,60,88,57,54,81,89,84,85,86,90,91,92,4,93,21,87,61,94,62,95,96,97,99,52,60,88,57,54,81,84,85,86,90,91,92,4,93,21,87,61,94,62,95,96,99,52,52,60,60,88,88,57,57,54,54,81,81,84,84,85,85,86,86,90,90,91,91,92,92,4,4,93,93,21,21,87,87,61,61,94,94,62,62,95,95,96,96,99,99,81,93,87,94,96,52,60,88,57,54,81,84,85,86,90,91,92,4,93,21,87,61,94,62,95,96,97,99,52,52,52,52,52,52,52,52,60,60,60,60,60,60,60,88,57,54,54,81,89,84,85,86,90,91,92,4,93,21,87,61,94,62,95,96,97,99,52,52,52,60,81,54,54,94,52,60,88,57,54,81,89,84,85,86,90,91,92,4,93,21,87,61,94,62,95,96,97,99,88,88,52,60,88,57,54,81,89,84,85,86,90,91,92,4,93,21,87,61,94,62,95,96,97,99,58,84,85,86,90,91,92,93,87,94,95,96,89,57,81,90,91,90,91,57,81,86,86,91,89,94,52,60,88,52,52,52,52,52,52,60,88,54,84,85,86,93,87,94,99,99,89,89,89,99,99,89,52,60,57,54,84,85,86,90,91,92,4,93,21,87,61,94,62,95,96,99,58,84,85,86,90,91,92,93,87,94,95,96,99,99,99,81,89,88,88,88,88,88,88,52,52,52,52,52,52,84,85,86,87,52,52,52,60,88,57,54,81,89,84,85,86,90,91,92,4,93,21,87,61,94,62,95,96,97,99,52,52,60,88,57,54,81,89,84,85,86,90,91,92,4,93,21,87,61,94,62,95,96,97,99,52,60,88,57,54,81,89,84,85,86,90,91,92,4,93,21,87,61,94,62,95,96,97,99,88,88,86,90,91,92,94,96,88,88,88,52,60,88,57,54,81,89,84,85,86,90,91,92,4,93,21,87,61,94,62,95,96,97,99,84,85,86,87,84,85,86,92,93,87,94,96,86,86,92,93,52,60,88,57,54,81,89,84,85,86,90,91,92,4,93,21,87,61,94,62,95,96,97,99,52,0,0,108,108,0,108,108,108,108,108,53,108,53,108,108,108,108,53,108,53,108,108,53,108,108,108,108,108,108,53,108,108,108,108,53,53,53,53,53,53,108,53,108,53,108,108,108,108,108,108,108,53,53,53,0,108,108,108,53,53,53,108,108,53,108,53,108,53,108,0,0,0,0,49,49,116,117,50,116,49,117,50,116,49,49,49,50,116,49,50,116,49,116,49,50,49,117,117,50,116,49,117,50,116,49,49,117,50,116,49,50,116,116,116,50,116,49,117,50,50,116,116,49,49,49,49,49,50,50,49,49,49,50,49,117,50,116,49,50,117,50,116,49,50,116,49,116,50,49,49,49,49,49,49,116,50,116,49,117,50,116,49,117,50,116,49,117,50,116,49,117,50,116,49,116],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,3,4,5]],[[1,2,3,4,5,5],[[7,[6]]]],[[8,9]],[[8,10]],0,[[]],0,0,0,[[[12,[11]],[14,[13]]],[[7,[6]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[16,[15]],[18,[3,[16,[17]]]]]],[[[16,[15]],[18,[3,[16,[17]]]]]],0,0,[1,[[7,[19,6]]]],[[1,2,20,21,5]],[[1,2,20,21,5]],[1,[[7,[22,6]]]],[1,[[7,[22,6]]]],0,0,0,0,0,[1,[[7,[19,6]]]],[1,[[7,[19,6]]]],0,[1,[[7,[22,6]]]],[1,[[7,[22,6]]]],0,[1,[[7,[19,6]]]],[23],[24],[24,[[16,[19]]]],0,0,[25,25],[26,26],[27,27],[19,19],[2,2],[28,28],[29,29],[30,30],[31,31],[9,9],[32,32],[10,10],[24,24],[33,33],[34,34],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,35],[[7,[[16,[17]],6]]]],0,[19,[[36,[3]]]],0,0,0,0,0,0,0,0,0,[[],25],[[],26],[[],27],[[],19],[[],22],[[],2],[[],28],[[],29],[[],10],[[],23],[[],24],[[],33],0,[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[24],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],0,[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],0,0,0,[[37,37],38],[[39,39],38],[[40,40],38],[[25,25],38],[[27,27],38],[[19,19],38],[[28,28],38],[[29,29],38],[[30,30],38],[[31,31],38],[[32,32],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],0,0,0,0,0,0,[29,[[42,[41]]]],[[37,43],44],[[39,43],44],[[40,43],44],[[25,43],44],[[26,43],44],[[8,43],44],[[27,43],44],[[19,43],44],[[22,43],44],[[2,43],44],[[28,43],44],[[29,43],44],[[30,43],44],[[31,43],44],[[9,43],44],[[32,43],44],[[10,43],44],[[23,43],44],[[24,43],44],[[33,43],44],[[34,43],44],[[[12,[[0,[45,11]]]],43],44],[[]],[[]],[[]],[[]],[[[16,[39]]],40],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[[47,[46]],48],[[7,[6]]]],[[[47,[46]],49,50,[14,[13]],[16,[5]],5],[[7,[[12,[33]],6]]]],[[[47,[46]],48],[[7,[6]]]],[[51,20],[[7,[6]]]],[[22,51],[[7,[6]]]],[[[47,[46]],48,40],[[7,[6]]]],[[[14,[13]]],[[7,[40,6]]]],[[[14,[13]]],[[7,[40,6]]]],[[[12,[33]],[14,[13]]],[[7,[[12,[33]],6]]]],[[[12,[34]],[14,[13]]],[[7,[[12,[33]],6]]]],[[1,2],[[7,[6]]]],[[1,2,38],[[7,[6]]]],0,[23,20],0,0,0,[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[19,38],[19,38],[28,38],[23,38],[28,38],0,[[1,3],38],[28,38],0,0,[24,38],0,[28,38],0,[[8,50],[[7,[[16,[[16,[17]]]],6]]]],[[],[[16,[[16,[17]]]]]],[48,[[7,[[16,[[16,[17]]]],6]]]],0,0,0,0,[24,2],0,0,0,0,0,0,0,0,0,0,0,[[1,2,52,17],[[7,[6]]]],0,[22,48],[2,48],[[1,2,52,17],[[7,[6]]]],[[[53,[46]],33],[[7,[[47,[46]],6]]]],[[],26],[[5,[16,[5]],5,[14,[13]]],[[7,[8,6]]]],[[51,22,54,20,20],2],[[13,55,38],[[7,[23,6]]]],[[48,20,49,50,13,38],[[7,[24,6]]]],[[49,50,8,11],[[12,[11]]]],[1,2],[1,2],[[1,51],[[7,[2,6]]]],[[[12,[11]],48,13,38],[[7,[24,6]]]],0,[2,38],[2,[[36,[56]]]],[20,24],[[1,51],[[7,[19,6]]]],0,0,[[1,19]],[[1,2,9]],[[1,10]],[[1,2,57,58]],[[1,2,58],[[7,[6]]]],0,0,0,0,0,0,[[9,20],48],[9,48],0,[[9,20],48],0,[[2,20],59],[2,20],0,[29,41],0,0,[[[12,[11]]]],0,0,0,0,0,[2,48],[[1,2,60,5],[[7,[6]]]],0,[[1,2,60,5],[[7,[6]]]],0,[[[12,[11]],24,23],1],[24],0,[24,[[16,[2]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,2,3,3,38,38,5],[[7,[6]]]],[[1,2,3,3,38,38,5,[36,[5]]],[[7,[6]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[56,[[7,[27]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],0,[[1,2,3],[[7,[6]]]],[[1,2,20,3,38,38],[[7,[6]]]],0,[[1,2,20,20,61,20,5],[[7,[6]]]],[[1,2,20,62,48],[[7,[6]]]],[[1,2,20,62,48],[[7,[6]]]],[8],0,[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[64,64],[65,65],[66,66],[67,67],[68,68],[[]],[[]],[[]],[[]],[[]],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[[64,64],38],[[65,65],38],[[66,66],38],[[67,67],38],[[68,68],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[6,43],44],[[6,43],44],[[64,43],44],[[65,43],44],[[66,43],44],[[67,43],44],[[68,43],44],[69,6],[[]],[70,6],[56,64],[[]],[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[71],[[]],[[]],[[]],[[]],[[]],[[],72],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[56,48],[56,17],[[]],[[]],[56,56],[[]],[56,48],[56,20],[20],[20],[73,[[7,[56]]]],[20],[[56,56],38],[[],38],[[],38],[56,[[42,[41]]]],[[56,43],[[7,[74]]]],[[56,43],[[7,[74]]]],[17,56],[[]],[75,[[7,[56]]]],[1,[[7,[[16,[2]],6]]]],[56,38],[[56,76]],[[],20],[[]],[[],[[16,[56,77]]]],[56,[[16,[78,77]]]],[56,38],[56,38],[56,38],[56,38],[56,38],[56,38],[56,38],[56,38],[[],79],[56,[[36,[17]]]],[17,[[7,[56,69]]]],[56,41],[[56,80],7],[[]],[[],72],[[],7],[[],7],[[],63],[[],[[16,[56,77]]]],[[]],0,[59,20],[[]],[[]],[59,59],[[]],[20],[20],[20],[[59,59],38],[[],38],[[],38],[[59,43],44],[[]],[[],59],[[],20],[[]],[59,81],[[]],[[],7],[[],7],[[],63],[[]],0,[[]],[[]],0,0,0,[20],[20],[20],0,[[[82,[[0,[45,11]]]],43],44],[[]],0,0,[[],20],[[]],[[[82,[11]]],[[12,[11]]]],[83,[[82,[34]]]],[[83,33],[[82,[33]]]],0,[[],7],[[],7],[[],63],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[52,52],52],[[52,52],52],[[52,52]],[[52,52],52],[[52,52]],[[52,52]],[84,52],[85,60],[86,3],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[84,20],[85,20],[87,20],0,0,0,[52,52],[60,60],[88,88],[57,57],[54,54],[81,81],[89,89],[84,84],[85,85],[86,86],[90,90],[91,91],[92,92],[4,4],[93,93],[21,21],[87,87],[61,61],[94,94],[62,62],[95,95],[96,96],[97,97],[[[99,[[0,[98,58]]]]],[[99,[[0,[98,58]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[52,52],100],[[60,60],100],[[57,57],100],[[54,54],100],[[84,84],100],[[85,85],100],[[86,86],100],[[90,90],100],[[91,91],100],[[92,92],100],[[4,4],100],[[93,93],100],[[21,21],100],[[87,87],100],[[61,61],100],[[94,94],100],[[62,62],100],[[95,95],100],[[96,96],100],[[[99,[58]],[99,[58]]],100],0,[[],88],[[],54],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[[52,52],38],[[60,60],38],[[88,88],38],[[57,57],38],[[54,54],38],[[81,81],38],[[84,84],38],[[85,85],38],[[86,86],38],[[90,90],38],[[91,91],38],[[92,92],38],[[4,4],38],[[93,93],38],[[21,21],38],[[87,87],38],[[61,61],38],[[94,94],38],[[62,62],38],[[95,95],38],[[96,96],38],[[[99,[58]],[99,[58]]],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[81,[[42,[41]]]],0,0,0,0,[[52,43],[[7,[74]]]],[[60,43],[[7,[74]]]],[[88,43],44],[[57,43],44],[[54,43],44],[[81,43],44],[[84,43],44],[[85,43],44],[[86,43],44],[[90,43],44],[[91,43],44],[[92,43],44],[[4,43],44],[[93,43],44],[[21,43],44],[[87,43],44],[[61,43],44],[[94,43],44],[[62,43],44],[[95,43],44],[[96,43],44],[[97,43],44],[[[99,[[0,[45,58]]]],43],44],[20,52],[17,52],[78,52],[101,52],[102,52],[[]],[48,52],[103,52],[102,60],[20,60],[103,60],[17,60],[78,60],[101,60],[[]],[[]],[[]],[[]],[20,54],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[104,[[7,[52,69]]]],[104,[[7,[52,69]]]],[75,[[7,[52]]]],[75,[[7,[60]]]],[[81,76]],[54],[54,54],0,[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[88,[99,[58]]],59],[[88,54,57,38,97],59],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],97],[84,97],[85,97],[86,97],[90,97],[91,97],[92,97],[93,97],[87,97],[94,97],[95,97],[96,97],[[]],[57,38],[81,38],0,0,0,0,[57,38],[[],89],[86,5],0,0,[89,20],0,[[52,105],52],[[60,105],60],0,[[52,52],52],[[52,52]],[[52,52],52],[[52,52],52],[[52,52]],[[52,52]],[20,60],[[],88],[[],54],[[20,52,17],84],[[20,60,5],85],[[3,5,5,5,20,5],86],[[3,4,5,5],93],[[20,21,5],87],[[20,20,61,20,5],94],[[54,57,58],[[99,[58]]]],[[54,57,58],[[99,[58]]]],[89,36],[89,36],[[89,20],36],[[[99,[58]]],58],[[[99,[58]]],58],[[],106],[[52,52],[[36,[100]]]],[[60,60],[[36,[100]]]],[[57,57],[[36,[100]]]],[[54,54],[[36,[100]]]],[[84,84],[[36,[100]]]],[[85,85],[[36,[100]]]],[[86,86],[[36,[100]]]],[[90,90],[[36,[100]]]],[[91,91],[[36,[100]]]],[[92,92],[[36,[100]]]],[[4,4],[[36,[100]]]],[[93,93],[[36,[100]]]],[[21,21],[[36,[100]]]],[[87,87],[[36,[100]]]],[[61,61],[[36,[100]]]],[[94,94],[[36,[100]]]],[[62,62],[[36,[100]]]],[[95,95],[[36,[100]]]],[[96,96],[[36,[100]]]],[[[99,[58]],[99,[58]]],[[36,[100]]]],[[]],[84,84],[85,85],[86,86],[90,90],[91,91],[92,92],[93,93],[87,87],[94,94],[95,95],[96,96],[[[99,[58]]],38],[[[99,[58]]],57],[[[99,[58]]],54],[81,41],[89],[88,[[16,[[99,[84]]]]]],[88,[[16,[[99,[85]]]]]],[88,[[16,[[99,[86]]]]]],0,0,0,[[52,52]],[[52,52],52],[[52,52],52],[[52,52],52],[[52,52]],[[52,52]],[84,81],[85,81],[86,81],[87,81],[52],[52],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[107,[[7,[52]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],0,0,0,0,0,0,0,0,0,0,0,[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[84,17],[85,5],[86,5],[87,5],0,0,0,0,0,0,0,0,[86,5],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],52],[3,38],0,0,0,0,0,0,0,0,[108,[[36,[109]]]],[[]],[[]],[[]],[[]],[108,108],[[]],[[],108],[20],[20],[20],[20],[73,[[7,[108]]]],[20],[20],[[108,108],38],[[],38],[[],38],[[108,43],[[7,[74]]]],[[108,43],[[7,[74]]]],[[]],[[]],[110,108],[[[111,[109]]],108],[75,[[7,[108]]]],[[[53,[46]],112],[[7,[[14,[13]],6]]]],[[[53,[46]],108],[[7,[[14,[13]],6]]]],[[[53,[46]]],[[7,[48,6]]]],[[[53,[46]],3,108],[[7,[[16,[17]],6]]]],[[[53,[46]]],[[7,[3,6]]]],[[[53,[46]],3,[16,[5]],108],[[7,[15,6]]]],[[108,76]],[[],20],[[],20],[[]],[[]],[108,38],[108,38],[108,38],[108,38],[108,38],[108,38],[[[53,[46]]],[[7,[6]]]],[[[53,[46]]],[[7,[6]]]],[46,[[53,[46]]]],[113,114],[[108,80],7],[[]],[[],72],[[[53,[46]],112],[[7,[[16,[55]],6]]]],[[[53,[46]],108],[[7,[[16,[55]],6]]]],[[],7],[[],7],[115,[[7,[108]]]],[[],7],[[],7],[[],63],[[],63],[[]],[[]],0,0,0,0,[49,38],[[49,3],38],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[49,3],38],[49,38],[50,50],[116,116],[49,49],[[]],[[]],[[]],0,[49],[[],50],[[],49],[117],[20],[20],[20],[20],[20],[20],[20],[20],[[49,3]],[20],[20],[20],[20],[[],112],[[116,116],38],[[],38],[[],38],[[50,43],44],[[116,43],44],[[49,43],44],[[]],[[]],[[[16,[[16,[17]]]]],50],[118,116],[[]],[[]],[[49,3]],[[49,3]],[[49,3],5],[[49,3,5]],[[50,35],[[36,[119]]]],[[50,5],[[36,[119]]]],[[49,3],48],[[49,3,5]],[[49,3,5]],[[],112],[[49,3],48],[[],20],[[],20],[[],20],[[],20],[[50,[16,[17]]],112],[[]],[[]],[[]],[[]],[50],[116,38],[[],49],0,[50,20],[49,48],[[49,3]],[49],[[49,3,116]],[[49,48]],[[49,3,5,5]],0,[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],63],[[],63],[[],63],[[],63],[[]],[[]],[[]],[[]],[[],116]],"c":[],"p":[[3,"CircuitInputStateRef"],[3,"ExecStep"],[6,"Address"],[4,"AccountField"],[6,"Word"],[4,"Error"],[4,"Result"],[3,"Block"],[3,"CopyEvent"],[3,"ExpEvent"],[8,"CircuitsParams"],[3,"CircuitInputBuilder"],[3,"Transaction"],[3,"Block"],[3,"EIP1186ProofResponse"],[3,"Vec"],[15,"u8"],[3,"HashMap"],[3,"Call"],[15,"usize"],[4,"CallContextField"],[3,"CallContext"],[3,"TransactionContext"],[3,"Transaction"],[4,"CodeSource"],[3,"BlockContext"],[4,"CallKind"],[4,"ExecState"],[4,"CopyDataType"],[3,"CopyStep"],[4,"NumberOrHash"],[3,"ExpStep"],[3,"FixedCParams"],[3,"DynamicCParams"],[3,"H256"],[4,"Option"],[4,"AccessValue"],[15,"bool"],[3,"Access"],[3,"AccessSet"],[8,"Field"],[4,"Expression"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"JsonRpcClient"],[3,"BuilderClient"],[15,"u64"],[3,"StateDB"],[3,"CodeDB"],[3,"GethExecStep"],[3,"MemoryAddress"],[3,"GethClient"],[3,"RWCounter"],[3,"GethExecTrace"],[4,"OpcodeId"],[4,"RW"],[8,"Op"],[3,"OperationRef"],[3,"StackAddress"],[4,"TxLogField"],[4,"TxReceiptField"],[3,"TypeId"],[4,"OogError"],[4,"InsufficientBalanceError"],[4,"NonceUintOverflowError"],[4,"DepthError"],[4,"ExecError"],[4,"Error"],[4,"ProviderError"],[3,"Demand"],[3,"String"],[8,"Deserializer"],[3,"Error"],[15,"str"],[8,"Hasher"],[3,"Global"],[15,"u32"],[3,"OpcodeIdIter"],[8,"Serializer"],[4,"Target"],[3,"BlockData"],[3,"GethData"],[3,"MemoryOp"],[3,"StackOp"],[3,"StorageOp"],[3,"CallContextOp"],[3,"OperationContainer"],[3,"TargetIter"],[3,"TxAccessListAccountOp"],[3,"TxAccessListAccountStorageOp"],[3,"TxRefundOp"],[3,"AccountOp"],[3,"TxLogOp"],[3,"StartOp"],[3,"TxReceiptOp"],[4,"OpEnum"],[8,"Clone"],[3,"Operation"],[4,"Ordering"],[15,"i64"],[15,"u16"],[15,"i32"],[8,"AsRef"],[8,"FnOnce"],[3,"IterBridge"],[3,"U256"],[4,"BlockNumber"],[3,"U64"],[4,"LenientBlockNumber"],[8,"Into"],[6,"Hash"],[8,"Serialize"],[4,"Value"],[4,"StringifiedBlockNumber"],[3,"Account"],[3,"EMPTY_CODE_HASH_LE"],[3,"Account"],[3,"Bytecode"],[13,"Account"],[13,"Storage"],[13,"Code"],[8,"Opcode"]]},\
"circuit_benchmarks":{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[]},\
"eth_types":{"doc":"Ethereum and Evm types used to deserialize responses from …","t":"DGIDCDDDCIDDDDGCSSSSDDIIIIIDDDDQGLLLLMMLLLLLLLLLLLLMOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAOMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAOLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLMMMMLMLLALLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLACMLLLLLLLLLLLLLLLLMLLLLLLLLLLLALLLLLLMMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLMLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMMMLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMMLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAMMMMMLLLLLLLLLLLLLMMKLKLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLKLLLLLMLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLMMMMLLLLLLLLLLLLLLLLMMOOLLLLLLLLLLLDDENNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNEENNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSSSSSSSSSSRDRRSRRSSSCCSSCSSSSSSSSCCCSSSLLLLLLALLAAAALLLLFFFDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNEDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLDDDDMMMMMLLLLLLLLMLMLLLLLLLLMMLLLLLLLLLLLMLLLLLLMLLLLLLLLLMLMMMMMMMLLLLLLLLLLLLLMMMMMLLLLLMMMLLLLLLLLLLLLLLLLLLLLMMLLLLDLLLLLLLLLLFLLLLLDDFLLLLLLFLLLLLLLLLLLLLLLMMFFFFMLLLLLLLLL","n":["AccessList","Address","BigEndianHash","Block","Bytecode","Bytes","DebugU256","EIP1186ProofResponse","Error","Field","GethExecTrace","H160","H256","H64","Hash","Keccak","MAX","MAX","MAX","MAX","Signature","StorageProof","ToAddress","ToBigEndian","ToLittleEndian","ToScalar","ToWord","Transaction","U256","U512","U64","Uint","Word","abs_diff","abs_diff","abs_diff","abs_diff","access_list","account_proof","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","address","address","as_bits","as_bits","as_bits","as_bits","as_bits","as_bits","as_bits","as_bits","as_byte_slice","as_byte_slice","as_byte_slice","as_byte_slice","as_byte_slice","as_byte_slice","as_byte_slice","as_byte_slice","as_bytes","as_bytes","as_bytes","as_bytes_mut","as_bytes_mut","as_bytes_mut","as_fixed_bytes","as_fixed_bytes","as_fixed_bytes","as_fixed_bytes_mut","as_fixed_bytes_mut","as_fixed_bytes_mut","as_mut","as_mut","as_mut","as_mut_bits","as_mut_bits","as_mut_bits","as_mut_byte_slice","as_mut_byte_slice","as_mut_byte_slice","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_slice_of","as_mut_slice_of","as_mut_slice_of","as_ptr","as_ptr","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice_of","as_slice_of","as_slice_of","as_slice_of","as_u128","as_u128","as_u128","as_u32","as_u32","as_u32","as_u32","as_u64","as_u64","as_u64","as_u64","as_usize","as_usize","as_usize","as_usize","assign_from_slice","assign_from_slice","assign_from_slice","author","balance","base32_len","base32_len","base32_len","base32_len","base_fee_per_gas","bit","bit","bit","bit","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","block_hash","block_number","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte","byte","byte","byte","bytecode","bytecode","chain_id","check_base32","check_base32","check_base32","check_base32","checked_add","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_div","checked_mul","checked_mul","checked_mul","checked_mul","checked_neg","checked_neg","checked_neg","checked_neg","checked_pow","checked_pow","checked_pow","checked_pow","checked_rem","checked_rem","checked_rem","checked_rem","checked_sub","checked_sub","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","code_hash","covers","covers","covers","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","difficulty","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_mod","div_mod","div_mod","div_mod","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","evm_types","evm_unimplemented","exp10","exp10","exp10","exp10","extra_data","failed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_big_endian","from_big_endian","from_big_endian","from_big_endian","from_dec_str","from_dec_str","from_dec_str","from_dec_str","from_iter","from_iter","from_little_endian","from_little_endian","from_little_endian","from_little_endian","from_low_u64_be","from_low_u64_be","from_low_u64_be","from_low_u64_le","from_low_u64_le","from_low_u64_le","from_low_u64_ne","from_low_u64_ne","from_low_u64_ne","from_slice","from_slice","from_slice","from_static","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_token","from_token","from_token","from_token","from_tokens","from_tokens","from_tokens","from_tokens","from_uint","from_uint","from_uint","full_mul","gas","gas","gas_limit","gas_price","gas_target","gas_used","get_lower_128","get_lower_32","geth_types","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","index","index","index","index_mut","index_mut","index_mut","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","input","integer_sqrt","integer_sqrt","integer_sqrt","integer_sqrt","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_full_block","into_iter","into_iter","into_token","into_token","into_token","into_token","into_tokens","into_tokens","into_tokens","into_tokens","into_uint","into_uint","into_uint","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","keccak","keccak256","key","leading_zeros","leading_zeros","leading_zeros","leading_zeros","len_bytes","len_bytes","len_bytes","length","length","length","length","length","length","length","length","length","logs_bloom","low_u128","low_u128","low_u128","low_u32","low_u32","low_u32","low_u32","low_u64","low_u64","low_u64","low_u64","macros","max_encoded_len","max_encoded_len","max_encoded_len","max_encoded_len","max_encoded_len","max_encoded_len","max_fee_per_gas","max_priority_fee_per_gas","max_value","max_value","max_value","max_value","mix_hash","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","new","next_block_base_fee","nonce","nonce","nonce","not","not","not","not","number","one","one","one","one","other","other","overflowing_add","overflowing_add","overflowing_add","overflowing_add","overflowing_mul","overflowing_mul","overflowing_mul","overflowing_mul","overflowing_neg","overflowing_neg","overflowing_neg","overflowing_neg","overflowing_pow","overflowing_pow","overflowing_pow","overflowing_pow","overflowing_sub","overflowing_sub","overflowing_sub","overflowing_sub","param_type","param_type","param_type","param_type","param_type","parent_hash","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","proof","r","r","random","random","random","random_using","random_using","random_using","randomize","randomize","randomize","randomize_using","randomize_using","randomize_using","receipts_root","recover","recover_from","recover_from_mut","recover_typed_data","recovery_id","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","repeat_byte","repeat_byte","repeat_byte","return_value","rlp","rlp_append","rlp_append","rlp_append","rlp_append","rlp_append","rlp_append","rlp_append","s","s","saturating_add","saturating_add","saturating_add","saturating_add","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_sub","saturating_sub","saturating_sub","saturating_sub","seal_fields","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","sign_types","size","state_root","storage_hash","storage_proof","struct_logs","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","time","timestamp","to","to_address","to_address","to_be_bytes","to_be_bytes","to_be_bytes","to_big_endian","to_big_endian","to_big_endian","to_big_endian","to_fixed_bytes","to_fixed_bytes","to_fixed_bytes","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_le_bytes","to_le_bytes","to_little_endian","to_little_endian","to_little_endian","to_little_endian","to_low_u64_be","to_low_u64_be","to_low_u64_be","to_low_u64_le","to_low_u64_le","to_low_u64_le","to_low_u64_ne","to_low_u64_ne","to_low_u64_ne","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scalar","to_scalar","to_scalar","to_scalar","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_vec","to_word","to_word","to_word","to_word","to_word","to_word","total_difficulty","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","transaction_index","transaction_type","transactions","transactions_root","try_as_bits","try_as_bits","try_as_bits","try_as_bits","try_as_bits","try_as_bits","try_as_bits","try_as_bits","try_as_mut_bits","try_as_mut_bits","try_as_mut_bits","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_info","type_info","type_info","type_info","type_info","uncles","uncles_hash","using_encoded","using_encoded","using_encoded","using_encoded","using_encoded","using_encoded","v","v","value","value","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","withdrawals","withdrawals_root","word","word_map","write_base32","write_base32","write_base32","write_base32","zero","zero","zero","zero","zero","zero","zero","Bytecode","BytecodeIterator","Error","InvalidAsmError","Opcode","OpcodeWithData","PushWithData","add_marker","append","append_op","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","code","code_vec","codesize","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","fmt","fmt","from","from","from","from","from","from_raw_unchecked","from_str","get","get_byte","get_pos","hash","hash_h256","init","init","init","init","insert_marker","into","into","into","into","into_iter","iter","next","op_add","op_addmod","op_address","op_and","op_balance","op_blockhash","op_byte","op_call","op_callcode","op_calldatacopy","op_calldataload","op_calldatasize","op_caller","op_callvalue","op_chainid","op_codecopy","op_codesize","op_coinbase","op_create","op_create2","op_delegatecall","op_difficulty","op_div","op_dup1","op_dup10","op_dup11","op_dup12","op_dup13","op_dup14","op_dup15","op_dup16","op_dup2","op_dup3","op_dup4","op_dup5","op_dup6","op_dup7","op_dup8","op_dup9","op_eq","op_exp","op_extcodecopy","op_extcodehash","op_extcodesize","op_gas","op_gaslimit","op_gasprice","op_gt","op_iszero","op_jump","op_jumpdest","op_jumpi","op_log0","op_log1","op_log2","op_log3","op_log4","op_lt","op_mload","op_mod","op_msize","op_mstore","op_mstore8","op_mul","op_mulmod","op_not","op_number","op_or","op_origin","op_pc","op_pop","op_prevrandao","op_push0","op_push1","op_push10","op_push11","op_push12","op_push13","op_push14","op_push15","op_push16","op_push17","op_push18","op_push19","op_push2","op_push20","op_push21","op_push22","op_push23","op_push24","op_push25","op_push26","op_push27","op_push28","op_push29","op_push3","op_push30","op_push31","op_push32","op_push4","op_push5","op_push6","op_push7","op_push8","op_push9","op_return","op_returndatacopy","op_returndatasize","op_revert","op_sar","op_sdiv","op_selfbalance","op_sgt","op_sha3","op_shl","op_shr","op_signextend","op_sload","op_slt","op_smod","op_sstore","op_staticcall","op_stop","op_sub","op_swap1","op_swap10","op_swap11","op_swap12","op_swap13","op_swap14","op_swap15","op_swap16","op_swap2","op_swap3","op_swap4","op_swap5","op_swap6","op_swap7","op_swap8","op_swap9","op_timestamp","op_xor","opcode","push","setup_state","store_code_to_mem","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write","write_op","BadLength","Error","EthAddressParsingError","Hex","IncompleteBlock","InvalidMemoryPointer","InvalidOpConversion","InvalidOpcodeIdByte","InvalidStackPointer","InvalidStorageKey","MemAddressParsing","OpcodeParsing","SerdeError","Signature","StackAddressParsing","TracingError","WordToMemAddr","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","fmt","from","from","from","init","init","into","into","provide","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CALL_WITH_VALUE","CODE_DEPOSIT_BYTE_COST","COLD_ACCOUNT_ACCESS","COLD_SLOAD","COPY","COPY_SHA3","CREATE","CREATION_TX","EXP_BYTE_TIMES","EXT","FAST","FASTEST","GAS_STIPEND_CALL_WITH_VALUE","GasCost","INIT_CODE_WORD_GAS","INVALID_INIT_CODE_FIRST_BYTE","LOG","MAX_EXPANDED_MEMORY_ADDRESS","MAX_REFUND_QUOTIENT_OF_GAS_USED","MEMORY_EXPANSION_LINEAR_COEFF","MEMORY_EXPANSION_QUAD_DENOMINATOR","MID","Memory","MemoryAddress","NEW_ACCOUNT","ONE","OpcodeId","QUICK","SELFDESTRUCT","SHA3","SLOW","SSTORE_CLEARS_SCHEDULE","SSTORE_RESET","SSTORE_SENTRY","SSTORE_SET","Stack","StackAddress","Storage","TX","WARM_ACCESS","ZERO","borrow","borrow_mut","deref","deref_mut","drop","from","gas_utils","init","into","memory","opcode_ids","stack","storage","try_from","try_into","type_id","vzip","eip150_gas","memory_copier_gas_cost","memory_expansion_gas_cost","Memory","MemoryAddress","add","add","add","add","add_assign","add_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","copy_from","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","extend_at_least","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_be_bytes","from_le_bytes","from_str","index","index","index","index","index","index","index","index_mut","index_mut","init","init","into","into","is_empty","last_filled_addr","len","map","mul","mul","mul","mul","mul_assign","mul_assign","new","partial_cmp","push","read_chunk","read_word","serialize","sub","sub","sub","sub","sub_assign","sub_assign","to_be_bytes","to_le_bytes","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","word_size","zero","ADD","ADDMOD","ADDRESS","AND","BALANCE","BASEFEE","BLOCKHASH","BYTE","CALL","CALLCODE","CALLDATACOPY","CALLDATALOAD","CALLDATASIZE","CALLER","CALLVALUE","CHAINID","CODECOPY","CODESIZE","COINBASE","CREATE","CREATE2","DELEGATECALL","DIFFICULTY","DIV","DUP1","DUP10","DUP11","DUP12","DUP13","DUP14","DUP15","DUP16","DUP2","DUP3","DUP4","DUP5","DUP6","DUP7","DUP8","DUP9","EQ","EXP","EXTCODECOPY","EXTCODEHASH","EXTCODESIZE","GAS","GASLIMIT","GASPRICE","GT","INVALID","ISZERO","JUMP","JUMPDEST","JUMPI","LOG0","LOG1","LOG2","LOG3","LOG4","LT","MLOAD","MOD","MSIZE","MSTORE","MSTORE8","MUL","MULMOD","NOT","NUMBER","OR","ORIGIN","OpcodeId","OpcodeIdIter","PC","POP","PUSH0","PUSH1","PUSH10","PUSH11","PUSH12","PUSH13","PUSH14","PUSH15","PUSH16","PUSH17","PUSH18","PUSH19","PUSH2","PUSH20","PUSH21","PUSH22","PUSH23","PUSH24","PUSH25","PUSH26","PUSH27","PUSH28","PUSH29","PUSH3","PUSH30","PUSH31","PUSH32","PUSH4","PUSH5","PUSH6","PUSH7","PUSH8","PUSH9","RETURN","RETURNDATACOPY","RETURNDATASIZE","REVERT","SAR","SDIV","SELFBALANCE","SELFDESTRUCT","SGT","SHA3","SHL","SHR","SIGNEXTEND","SLOAD","SLT","SMOD","SSTORE","STATICCALL","STOP","SUB","SWAP1","SWAP10","SWAP11","SWAP12","SWAP13","SWAP14","SWAP15","SWAP16","SWAP2","SWAP3","SWAP4","SWAP5","SWAP6","SWAP7","SWAP8","SWAP9","TIMESTAMP","XOR","as_u64","as_u8","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","constant_gas_cost","data_len","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","fmt","fmt","from","from","from","from_str","has_memory_access","hash","init","init","into","into","into_iter","invalid_opcodes","invalid_stack_ptrs","is_call","is_call_or_create","is_create","is_dup","is_log","is_push","is_push_with_data","is_swap","iter","len","next","next_back","nth","par_bridge","postfix","push_n","serialize","size_hint","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","valid_opcodes","vzip","vzip","Stack","StackAddress","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from_slice","from_str","from_vec","init","init","into","into","last","last_filled","map","new","new","nth_last","nth_last_filled","partial_cmp","serialize","stack_pointer","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Storage","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","empty","eq","fmt","from","from","get","get_or_err","init","into","new","serialize","to_owned","try_from","try_into","type_id","vzip","Account","BlockConstants","GethData","Transaction","access_list","accounts","address","balance","base_fee","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call_data","call_data_gas_cost","chain_id","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","code","coinbase","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","difficulty","drop","drop","drop","drop","eq","eq","eth_block","fmt","fmt","fmt","fmt","from","from","from","from","from","from","gas","gas_fee_cap","gas_limit","gas_limit","gas_price","gas_tip_cap","geth_traces","history_hashes","init","init","init","init","into","into","into","into","is_create","is_empty","mock_100_ether","mock_code_balance","new","nonce","nonce","number","r","s","serialize","serialize","serialize","sign","sign_data","storage","timestamp","to","to_or_contract_addr","to_or_zero","to_owned","to_owned","to_owned","to_owned","to_response","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","v","value","vzip","vzip","vzip","vzip","Keccak","borrow","borrow_mut","default","deref","deref_mut","digest","drop","from","init","into","keccak256","try_from","try_into","type_id","update","vzip","SECP256K1_Q","SignData","biguint_to_32bytes_le","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","ct_option_ok_or","default","deref","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","init","init","into","into","msg_hash","pk","pk_bytes_le","pk_bytes_swap_endianness","recover_pk","sign","signature","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"eth_types"],[1411,"eth_types::bytecode"],[1644,"eth_types::error"],[1691,"eth_types::evm_types"],[1749,"eth_types::evm_types::gas_utils"],[1752,"eth_types::evm_types::memory"],[1846,"eth_types::evm_types::opcode_ids"],[2057,"eth_types::evm_types::stack"],[2115,"eth_types::evm_types::storage"],[2140,"eth_types::geth_types"],[2259,"eth_types::keccak"],[2276,"eth_types::sign_types"]],"d":["Access list","","","The block type returned from RPC calls.","","Wrapper type around Bytes to deserialize/serialize “0x”…","Little-endian large integer type 256-bit unsigned integer.","Struct used to define the result of <code>eth_getProof</code> call","","Trait used to reduce verbosity with the declaration of the …","The execution trace type returned by geth RPC debug_trace* …","Fixed-size uninterpreted hash type with 20 bytes (160 …","Fixed-size uninterpreted hash type with 32 bytes (256 …","","Ethereum Hash (256 bits).","","Maximum value.","Maximum value.","Maximum value.","Maximum value.","An ECDSA signature","Struct used to define the storage proof","Trait used to convert a type to a <code>Address</code>.","Trait uset do convert a scalar value to a 32 byte array in …","Trait used to convert a scalar value to a 32 byte array in …","Trait used to define types that can be converted to a 256 …","Trait used to convert a type to a <code>Word</code>.","Details of a signed transaction","Little-endian large integer type 256-bit unsigned integer.","Little-endian large integer type 512-bits unsigned integer.","Little-endian large integer type Unsigned 64-bit integer.","","Ethereum Word (256 bits).","Computes the absolute difference between self and other.","Computes the absolute difference between self and other.","Computes the absolute difference between self and other.","Computes the absolute difference between self and other.","","Array of rlp-serialized MerkleTree-Nodes","","","","","","","","","","","","","Account address","Create an <code>Address</code> from a hex string.  Panics on invalid …","","","","","","","","","","","","","","","","","Extracts a byte slice containing the entire fixed hash.","Extracts a byte slice containing the entire fixed hash.","Extracts a byte slice containing the entire fixed hash.","Extracts a mutable byte slice containing the entire fixed …","Extracts a mutable byte slice containing the entire fixed …","Extracts a mutable byte slice containing the entire fixed …","Extracts a reference to the byte array containing the …","Extracts a reference to the byte array containing the …","Extracts a reference to the byte array containing the …","Extracts a reference to the byte array containing the …","Extracts a reference to the byte array containing the …","Extracts a reference to the byte array containing the …","","","","","","","","","","Returns a mutable raw pointer to the value.","Returns a mutable raw pointer to the value.","Returns a mutable raw pointer to the value.","","","","Returns a constant raw pointer to the value.","Returns a constant raw pointer to the value.","Returns a constant raw pointer to the value.","","","","","","","","","","","","","Conversion to u128 with overflow checking","Conversion to u128 with overflow checking","Conversion to u128 with overflow checking","Conversion to u32 with overflow checking","Conversion to u32 with overflow checking","Conversion to u32 with overflow checking","Conversion to u32 with overflow checking","Conversion to u64 with overflow checking","Conversion to u64 with overflow checking","Conversion to u64 with overflow checking","Conversion to u64 with overflow checking","Conversion to usize with overflow checking","Conversion to usize with overflow checking","Conversion to usize with overflow checking","Conversion to usize with overflow checking","Assign the bytes from the byte slice <code>src</code> to <code>self</code>.","Assign the bytes from the byte slice <code>src</code> to <code>self</code>.","Assign the bytes from the byte slice <code>src</code> to <code>self</code>.","Miner/author’s address. None if pending.","The balance of the account","","","","","Base fee per unit of gas (if past London)","Return if specific bit is set.","Return if specific bit is set.","Return if specific bit is set.","Return if specific bit is set.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the least number of bits needed to represent the …","Return the least number of bits needed to represent the …","Return the least number of bits needed to represent the …","Return the least number of bits needed to represent the …","","","","","","","","","","","","","","","","","","","","","Block hash. None when pending.","Block number. None when pending.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return specific byte.","Return specific byte.","Return specific byte.","Return specific byte.","EVM byte code generator","EVM code macro","","","","","","Checked addition. Returns <code>None</code> if overflow occurred.","Checked addition. Returns <code>None</code> if overflow occurred.","Checked addition. Returns <code>None</code> if overflow occurred.","Checked addition. Returns <code>None</code> if overflow occurred.","Checked division. Returns <code>None</code> if <code>other == 0</code>.","Checked division. Returns <code>None</code> if <code>other == 0</code>.","Checked division. Returns <code>None</code> if <code>other == 0</code>.","Checked division. Returns <code>None</code> if <code>other == 0</code>.","Checked multiplication. Returns <code>None</code> if overflow occurred.","Checked multiplication. Returns <code>None</code> if overflow occurred.","Checked multiplication. Returns <code>None</code> if overflow occurred.","Checked multiplication. Returns <code>None</code> if overflow occurred.","Checked negation. Returns <code>None</code> unless <code>self == 0</code>.","Checked negation. Returns <code>None</code> unless <code>self == 0</code>.","Checked negation. Returns <code>None</code> unless <code>self == 0</code>.","Checked negation. Returns <code>None</code> unless <code>self == 0</code>.","Checked exponentiation. Returns <code>None</code> if overflow occurred.","Checked exponentiation. Returns <code>None</code> if overflow occurred.","Checked exponentiation. Returns <code>None</code> if overflow occurred.","Checked exponentiation. Returns <code>None</code> if overflow occurred.","Checked modulus. Returns <code>None</code> if <code>other == 0</code>.","Checked modulus. Returns <code>None</code> if <code>other == 0</code>.","Checked modulus. Returns <code>None</code> if <code>other == 0</code>.","Checked modulus. Returns <code>None</code> if <code>other == 0</code>.","Checked subtraction. Returns <code>None</code> if overflow occurred.","Checked subtraction. Returns <code>None</code> if overflow occurred.","Checked subtraction. Returns <code>None</code> if overflow occurred.","Checked subtraction. Returns <code>None</code> if overflow occurred.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The hash of the code of the account","Returns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.","Returns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.","Returns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Difficulty","","","","","","","","","","","","","Returns a pair <code>(self / other, self % other)</code>.","Returns a pair <code>(self / other, self % other)</code>.","Returns a pair <code>(self / other, self % other)</code>.","Returns a pair <code>(self / other, self % other)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Error module for the eth-types crate","Evm types needed for parsing instruction sets as well","Triggers a signal that a feature is unimplemented, panics …","Create <code>10**n</code> as this type.","Create <code>10**n</code> as this type.","Create <code>10**n</code> as this type.","Create <code>10**n</code> as this type.","Extra data","True when the transaction has failed.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a hash type from the given bytes array of fixed …","Returns the argument unchanged.","Constructs a hash type from the given reference to the …","Constructs a hash type from the given reference to the …","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Constructs a hash type from the given reference to the …","Returns the argument unchanged.","","Constructs a hash type from the given reference to the …","Constructs a hash type from the given bytes array of fixed …","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Constructs a hash type from the given reference to the …","","Constructs a hash type from the given reference to the …","Returns the argument unchanged.","Constructs a hash type from the given bytes array of fixed …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Sender","Converts from big endian representation bytes in memory.","Converts from big endian representation bytes in memory.","Converts from big endian representation bytes in memory.","Converts from big endian representation bytes in memory.","Convert from a decimal string.","Convert from a decimal string.","Convert from a decimal string.","Convert from a decimal string.","","","Converts from little endian representation bytes in memory.","Converts from little endian representation bytes in memory.","Converts from little endian representation bytes in memory.","Converts from little endian representation bytes in memory.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Create a new fixed-hash from the given slice <code>src</code>.","Create a new fixed-hash from the given slice <code>src</code>.","Create a new fixed-hash from the given slice <code>src</code>.","Creates a new <code>Bytes</code> from a static slice.","Creates a hash type instance from the given string.","","","","Creates a hash type instance from the given string.","","Creates a hash type instance from the given string.","","","Converts a string slice in a given base to an integer. …","Converts a string slice in a given base to an integer. …","Converts a string slice in a given base to an integer. …","Converts a string slice in a given base to an integer. …","","","","","","","","","","","","Multiplies two 256-bit integers to produce full 512-bit …","Used gas","Gas amount","Gas Limit","Gas Price, null for Type 2 transactions","The target gas usage as per EIP-1559","Gas Used","Gets the lower 128 bits of this field element when …","Gets the lower 32 bits of this field element when expressed","Types needed for generating Ethereum traces","","","","","","","","","","","","The transaction’s hash","Hash of the block","","","","","","","","","","","","","","","","","","","","","","Input data","Compute the highest <code>n</code> such that <code>n * n &lt;= self</code>.","Compute the highest <code>n</code> such that <code>n * n &lt;= self</code>.","Compute the highest <code>n</code> such that <code>n * n &lt;= self</code>.","Compute the highest <code>n</code> such that <code>n * n &lt;= self</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this block that only holds transaction hashes …","","","","","","","","","","","","","","Returns <code>true</code> if no bits are set.","Whether this is zero.","Whether this is zero.","Whether this is zero.","Returns <code>true</code> if no bits are set.","Whether this is zero.","Returns <code>true</code> if no bits are set.","Plain keccak256 implementation","","Storage key","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the size of this hash in bytes.","Returns the size of this hash in bytes.","Returns the size of this hash in bytes.","","","","","","","","","","Logs bloom","Low 2 words (u128)","Low 2 words (u128)","Low 2 words (u128)","Conversion to u32","Conversion to u32","Conversion to u32","Conversion to u32","Low word (u64)","Low word (u64)","Low word (u64)","Low word (u64)","Collection of utility macros used within this crate.","","","","","","","Represents the maximum amount that a user is willing to …","Represents the maximum tx fee that will go to the miner as …","The maximum value which can be inhabited by this type.","The maximum value which can be inhabited by this type.","The maximum value which can be inhabited by this type.","The maximum value which can be inhabited by this type.","Mix Hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new empty <code>Bytes</code>.","The next block’s base fee, it is a function of parent …","The nonce of the account","The transaction’s nonce","Nonce","","","","","Block number. None if pending.","One (multiplicative identity) of this type.","One (multiplicative identity) of this type.","One (multiplicative identity) of this type.","One (multiplicative identity) of this type.","Captures unknown fields such as additional fields used by …","Captures unknown fields such as additional fields used by …","Addition which overflows and returns a flag if it does.","Addition which overflows and returns a flag if it does.","Addition which overflows and returns a flag if it does.","Addition which overflows and returns a flag if it does.","Multiply with overflow, returning a flag if it does.","Multiply with overflow, returning a flag if it does.","Multiply with overflow, returning a flag if it does.","Multiply with overflow, returning a flag if it does.","Negation with overflow.","Negation with overflow.","Negation with overflow.","Negation with overflow.","Fast exponentiation by squaring. Returns result and …","Fast exponentiation by squaring. Returns result and …","Fast exponentiation by squaring. Returns result and …","Fast exponentiation by squaring. Returns result and …","Subtraction which underflows and returns a flag if it does.","Subtraction which underflows and returns a flag if it does.","Subtraction which underflows and returns a flag if it does.","Subtraction which underflows and returns a flag if it does.","","","","","","Hash of the parent","","","","","","","","","Fast exponentiation by squaring …","Fast exponentiation by squaring …","Fast exponentiation by squaring …","Fast exponentiation by squaring …","Storage proof: rlp-encoded trie nodes from root to value.","ECDSA signature r","R value","Create a new hash with cryptographically random content.","Create a new hash with cryptographically random content.","Create a new hash with cryptographically random content.","Create a new hash with cryptographically random content …","Create a new hash with cryptographically random content …","Create a new hash with cryptographically random content …","Assign <code>self</code> to a cryptographically random value.","Assign <code>self</code> to a cryptographically random value.","Assign <code>self</code> to a cryptographically random value.","Assign <code>self</code> to a cryptographically random value using the …","Assign <code>self</code> to a cryptographically random value using the …","Assign <code>self</code> to a cryptographically random value using the …","Transactions receipts root hash","Recovers the Ethereum address which was used to sign the …","Recover the sender of the tx from signature","Recover the sender of the tx from signature and set the …","Recovers the ethereum address which was used to sign a …","Retrieve the recovery ID.","","","","","","","","","","","","","Returns a new fixed hash where all bits are set to the …","Returns a new fixed hash where all bits are set to the …","Returns a new fixed hash where all bits are set to the …","Return value of execution which is a hex encoded byte array","","","","","","","","","ECDSA signature s","S Value","Addition which saturates at the maximum value (Self::MAX).","Addition which saturates at the maximum value (Self::MAX).","Addition which saturates at the maximum value (Self::MAX).","Addition which saturates at the maximum value (Self::MAX).","Multiplication which saturates at the maximum value..","Multiplication which saturates at the maximum value..","Multiplication which saturates at the maximum value..","Multiplication which saturates at the maximum value..","Subtraction which saturates at zero.","Subtraction which saturates at zero.","Subtraction which saturates at zero.","Subtraction which saturates at zero.","Seal fields","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","secp256k1 signature types and helper functions.","Size in bytes","State root hash","SHA3 of the StorageRoot","Array of storage-entries as requested","Vector of geth execution steps of the trace.","","","","","","","","","","","","","Parse <code>Self::timestamp</code> into a <code>DateTime&lt;Utc&gt;</code>.","Timestamp","Recipient (None when contract creation)","Convert the type to a <code>Address</code>.","","Convert the value to a 32 byte array in big endian.","Encode the value as byte array in big endian.","Encode the value as byte array in big endian.","Write to the slice in big-endian format.","Write to the slice in big-endian format.","Write to the slice in big-endian format.","Write to the slice in big-endian format.","Returns the inner bytes array.","Returns the inner bytes array.","Returns the inner bytes array.","","","","","","","Convert the value to a 32 byte array in little endian.","Encode the value as byte array in little endian.","Write to the slice in little-endian format.","Write to the slice in little-endian format.","Write to the slice in little-endian format.","Write to the slice in little-endian format.","Returns the lowest 8 bytes interpreted as big-endian.","Returns the lowest 8 bytes interpreted as big-endian.","Returns the lowest 8 bytes interpreted as big-endian.","Returns the lowest 8 bytes interpreted as little-endian.","Returns the lowest 8 bytes interpreted as little-endian.","Returns the lowest 8 bytes interpreted as little-endian.","Returns the lowest 8 bytes interpreted as native-endian.","Returns the lowest 8 bytes interpreted as native-endian.","Returns the lowest 8 bytes interpreted as native-endian.","","","","","","","","","","","","","","","","Convert the type to a scalar value.","","","","","","","","","","","","","Copies and serializes <code>self</code> into a new <code>Vec</code> with the …","Convert the type to a <code>Word</code>.","","","","","","Total difficulty","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Transaction Index. None when pending.","Transaction type, Some(2) for EIP-1559 transaction, …","Transactions","Transactions root hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses a raw signature which is expected to be 65 bytes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Uncles’ hashes","Hash of the uncles","","","","","","","ECDSA recovery id","V value","Storage Value","Transferred value","Verifies that signature on <code>message</code> was produced by <code>address</code>","","","","","","","","","","","","","","","","Withdrawals (if past Shanghai)","Withdrawals root hash (if past Shanghai)","Create a <code>Word</code> from a hex string.  Panics on invalid input.","Create a <code>Word</code> to <code>Word</code> HashMap from pairs of hex strings.  …","","","","","Returns a new zero-initialized fixed hash.","Zero (additive identity) of this type.","Zero (additive identity) of this type.","Zero (additive identity) of this type.","Returns a new zero-initialized fixed hash.","Zero (additive identity) of this type.","Returns a new zero-initialized fixed hash.","EVM Bytecode","Iterator over the bytecode to retrieve individual opcodes","Error type for Bytecode related failures","Serde de/serialization error.","A <code>PUSH0</code> or non-push opcode","An ASM entry","A <code>PUSH1</code> .. <code>PUSH32</code> opcode","Add marker","Append","Append an opcode","","","","","","","","","","","","","Get the code","Get the code and is_code","Geth the code size","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Build not checked bytecode","","Get the bytecode element at an index.","Get the bytecode element at an index.","Get the position of a marker","Get the code hash","Get the code hash","","","","","Insert marker","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","create iterator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","JUMPDEST opcode","","","","","","","","","","","","","","","","","","","","","","Helper function for <code>PUSH0</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","get the opcode","Push, value is useless for <code>PUSH0</code>","Setup state","Append the instructions to store another code to memory","","","","","","","","","","","","","","","","","","","","Write byte","Write op","Hex string containing the Ethereum Address is not 20*2 …","Error type for any BusMapping related failure.","Error type for a failure while parsig an Ethereum Address.","Hex decoding error","Block is missing information about number or base_fee","Error while trying to access an invalid/empty Memory …","Error while trying to convert to an incorrect <code>OpcodeId</code>.","Denotes that the byte in the bytecode does not match with …","Error while trying to access an invalid/empty Stack …","Error while trying to access an invalid/empty Storage key.","Error while parsing a <code>MemoryAddress</code>.","Error while parsing an <code>Instruction/Opcode</code>.","Serde de/serialization error.","Signature parsing error.","Error while parsing a <code>StackAddress</code>.","Error while generating a trace.","Error when an EvmWord is too big to be converted into a …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Constant cost for calling with non-zero value","Cost per byte of deploying a new contract","Constant cost for a cold account access","Constant cost for a cold SLOAD","Constant cost for copying every word","Constant cost for copying every word, specifically in the …","Constant cost for CREATE and CREATE2","Constant cost for a creation transaction","Times ceil exponent byte size for the EXP instruction, …","Constant cost for ext step","Constant cost for fast step","Constant cost for fastest step","Gas stipend when CALL or CALLCODE is attached with value.","Defines the gas consumption.","Once per word of the init code when creating a contract.","According to EIP-3541, disallow new code starting with …","Constant gas for LOG[0-4] op codes","This constant ((2^32 - 1) * 32) is the highest number that …","Quotient for max refund of gas used","Coefficient of linear part of memory expansion gas cost","Denominator of quadratic part of memory expansion gas cost","Constant cost for mid step","","","Constant cost for turning empty account into non-empty …","Constant cost for jumpdest step, only takes one gas","","Constant cost for quick step","Constant cost for SELFDESTRUCT","Constant cost for SHA3","Constant cost for slow step","Constant cost for a storage clear. EIP-3529 changed it to …","Constant cost for a storage reset","SSTORE reentrancy sentry","Constant cost for a storage set","","","","Constant cost for a non-creation transaction","Constant cost for accessing account or storage key","Constant cost for free step","","","","","","Returns the argument unchanged.","Utility functions to help calculate gas","","Calls <code>U::from(self)</code>.","Doc this","Doc this","Doc this","Doc this","","","","","Calculate EIP 150 gas passed to callee.","Calculate memory copier gas cost by current and next …","Calculate memory expansion gas cost by current and next …","Represents a snapshot of the EVM memory state at a certain …","Represents a <code>MemoryAddress</code> of the EVM.","","","","","","","","","","","","","","","","Copy source data to memory. Used in …","","","","","","","","","","Resize the memory for at least length and align to 32 …","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Generate a MemoryAddress from the provided set of …","Generate a MemoryAddress from the provided set of …","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if memory contains no elements.","Returns the last memory address written at this execution …","Returns the number of elements in the memory.","Apply a function to the contained value.","","","","","","","Generate an new empty instance of EVM memory.","","Pushes a set of bytes or an <code>Word</code> in the last <code>Memory</code> …","Reads an chunk of memory[offset..offset+length]. Zeros …","Reads an entire <code>Word</code> which starts at the provided …","","","","","","","","Return the big-endian byte representation of the word as a …","Return the little-endian byte representation of the word …","","","","","","","","","","","","Returns the size of memory in word.","Returns the zero address for Memory targets.","<code>ADD</code>","<code>ADDMOD</code>","<code>ADDRESS</code>","<code>AND</code>","<code>BALANCE</code>","<code>BASEFEE</code>","<code>BLOCKHASH</code>","<code>BYTE</code>","<code>CALL</code>","<code>CALLCODE</code>","<code>CALLDATACOPY</code>","<code>CALLDATALOAD</code>","<code>CALLDATASIZE</code>","<code>CALLER</code>","<code>CALLVALUE</code>","<code>CHAINID</code>","<code>CODECOPY</code>","<code>CODESIZE</code>","<code>COINBASE</code>","<code>CREATE</code>","<code>CREATE2</code>","<code>DELEGATECALL</code>","<code>DIFFICULTY</code>","<code>DIV</code>","<code>DUP1</code>","<code>DUP10</code>","<code>DUP11</code>","<code>DUP12</code>","<code>DUP13</code>","<code>DUP14</code>","<code>DUP15</code>","<code>DUP16</code>","<code>DUP2</code>","<code>DUP3</code>","<code>DUP4</code>","<code>DUP5</code>","<code>DUP6</code>","<code>DUP7</code>","<code>DUP8</code>","<code>DUP9</code>","<code>EQ</code>","<code>EXP</code>","<code>EXTCODECOPY</code>","<code>EXTCODEHASH</code>","<code>EXTCODESIZE</code>","<code>GAS</code>","<code>GASLIMIT</code>","<code>GASPRICE</code>","<code>GT</code>","Invalid opcode","<code>ISZERO</code>","<code>JUMP</code>","<code>JUMPDEST</code>","<code>JUMPI</code>","<code>LOG0</code>","<code>LOG1</code>","<code>LOG2</code>","<code>LOG3</code>","<code>LOG4</code>","<code>LT</code>","<code>MLOAD</code>","<code>MOD</code>","<code>MSIZE</code>","<code>MSTORE</code>","<code>MSTORE8</code>","<code>MUL</code>","<code>MULMOD</code>","<code>NOT</code>","<code>NUMBER</code>","<code>OR</code>","<code>ORIGIN</code>","Opcode enum. One-to-one corresponding to an <code>u8</code> value.","An iterator over the variants of Self","<code>PC</code>","<code>POP</code>","<code>PUSH0</code>","<code>PUSH1</code>","<code>PUSH10</code>","<code>PUSH11</code>","<code>PUSH12</code>","<code>PUSH13</code>","<code>PUSH14</code>","<code>PUSH15</code>","<code>PUSH16</code>","<code>PUSH17</code>","<code>PUSH18</code>","<code>PUSH19</code>","<code>PUSH2</code>","<code>PUSH20</code>","<code>PUSH21</code>","<code>PUSH22</code>","<code>PUSH23</code>","<code>PUSH24</code>","<code>PUSH25</code>","<code>PUSH26</code>","<code>PUSH27</code>","<code>PUSH28</code>","<code>PUSH29</code>","<code>PUSH3</code>","<code>PUSH30</code>","<code>PUSH31</code>","<code>PUSH32</code>","<code>PUSH4</code>","<code>PUSH5</code>","<code>PUSH6</code>","<code>PUSH7</code>","<code>PUSH8</code>","<code>PUSH9</code>","<code>RETURN</code>","<code>RETURNDATACOPY</code>","<code>RETURNDATASIZE</code>","<code>REVERT</code>","<code>SAR</code>","<code>SDIV</code>","<code>SELFBALANCE</code>","<code>SELFDESTRUCT</code>","<code>SGT</code>","<code>SHA3</code>","<code>SHL</code>","<code>SHR</code>","<code>SIGNEXTEND</code>","<code>SLOAD</code>","<code>SLT</code>","<code>SMOD</code>","<code>SSTORE</code>","<code>STATICCALL</code>","<code>STOP</code>","<code>SUB</code>","<code>SWAP1</code>","<code>SWAP10</code>","<code>SWAP11</code>","<code>SWAP12</code>","<code>SWAP13</code>","<code>SWAP14</code>","<code>SWAP15</code>","<code>SWAP16</code>","<code>SWAP2</code>","<code>SWAP3</code>","<code>SWAP4</code>","<code>SWAP5</code>","<code>SWAP6</code>","<code>SWAP7</code>","<code>SWAP8</code>","<code>SWAP9</code>","<code>TIMESTAMP</code>","<code>XOR</code>","Returns the <code>OpcodeId</code> as a <code>u64</code>.","Returns the <code>OpcodeId</code> as a <code>u8</code>.","","","","","","","","","Returns the constant gas cost of <code>OpcodeId</code>","Returns number of bytes used by immediate data. This is &gt; …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns <code>true</code> if the <code>OpcodeId</code> has memory access","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the all invalid opcodes.","Returns invalid stack pointers of <code>OpcodeId</code>","Returns <code>true</code> if the <code>OpcodeId</code> is a CALL-like.","Returns <code>true</code> if the <code>OpcodeId</code> is a <code>CALL</code> or <code>CREATE</code> related .","Returns <code>true</code> if the <code>OpcodeId</code> is a CREATE-like.","Returns <code>true</code> if the <code>OpcodeId</code> is a <code>DUPn</code>.","Returns <code>true</code> if the <code>OpcodeId</code> is a <code>LOGn</code>.","Returns <code>true</code> if the <code>OpcodeId</code> is a <code>PUSHn</code> (including <code>PUSH0</code>).","Returns <code>true</code> if the <code>OpcodeId</code> is a <code>PUSH1</code> .. <code>PUSH32</code> …","Returns <code>true</code> if the <code>OpcodeId</code> is a <code>SWAPn</code>.","","","","","","","If operation has postfix returns it, otherwise None.","Returns PUSHn opcode from parameter n.","","","","","","","","","","","","Returns the all valid opcodes.","","","Represents a snapshot of the EVM stack state at a certain …","Represents a <code>StackAddress</code> of the EVM. The address range …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Generates a <code>Stack</code> instance from the given slice.","","Generates a <code>Stack</code> instance from the given vec.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the last <code>Word</code> allocated in the <code>Stack</code>.","Returns the last filled <code>StackAddress</code>.","Apply a function to the contained value.","Generates a new StackAddress given a <code>usize</code>.","Generate a new instance of EVM stack.","Returns the n-th last <code>Word</code> allocated in the <code>Stack</code>.","Returns the n-th last filled <code>StackAddress</code>.","","","Returns the first available/free <code>StackAddress</code>.","","","","","","","","","","","Represents a snapshot of the EVM stack state at a certain …","","","","","","","","","Generate an empty instance of EVM Storage.","","","Returns the argument unchanged.","","Get the word for a given key in the EVM storage","Get the word for a given key in the EVM storage.  Returns …","","Calls <code>U::from(self)</code>.","Generate an new instance of EVM storage given a …","","","","","","","Definition of all of the data related to an account.","Definition of all of the constants related to an Ethereum …","GethData is a type that contains all the information of a …","Definition of all of the constants related to an Ethereum …","Access list","Accounts","Address","Balance","base fee","","","","","","","","","The compiled code of a contract OR the first 4 bytes of …","Compute call data gas cost from call data","chain id","","","","","","","","","EVM Code","coinbase","","","","","","","","","","","","difficulty","","","","","","","Block from geth","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Sender address","Convinient method for gas limit","Gas fee cap","gas limit","Gas Limit / Supplied gas U64 type is required to serialize …","Gas Price","Gas tip cap","Execution Trace from geth","history hashes contains most recent 256 block hashes in …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Determine if this transaction is a contract create …","Return if account is empty or not.","Generate an account that has 100 ETH","Generate an account that is either empty or has code, …","Generates a new <code>BlockConstants</code> instance from it’s fields.","Nonce. U64 type is required to serialize into proper hex …","Transaction nonce U64 type is required to serialize into …","Block number U64 type is required to serialize into proper …","“r” value of the transaction signature","“s” value of the transaction signature","","","","Signs transactions with selected wallets","Return the SignData associated with this Transaction.","Storage","time","Recipient address (None for contract creation) Avoid …","Get the “to” address. If <code>to</code> is None then compute …","Get the “to” address. If <code>to</code> is None then zero address","","","","","Convert to transaction response","","","","","","","","","","","","","","“v” value of the transaction signature","Transfered value","","","","","The main keccak object","","","","","","Returns keccak hash based on current state","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Convinient method to get 32 bytes digest","","","","Take more input bytes to the state","","Secp256k1 Curve Scalar.  Referece: Section 2.4.1 …","Signature data required by the SignVerify Chip as input to …","Convert a <code>BigUint</code> into 32 bytes in little endian.","","","","","","","Helper function to convert a <code>CtOption</code> into an <code>Result</code>.  …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Hash of the message that is being signed","Secp256k1 public key","Return the secp256k1 public key (x, y) coordinates in …","Return a copy of the serialized public key with swapped …","Recover the public key from a secp256k1 signature and the …","Do a secp256k1 signature with a given randomness value.","Secp256k1 signature point","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,137,0,1,2,3,4,27,25,1,1,2,2,3,3,4,4,1,2,3,4,25,0,8,1,2,3,9,4,10,14,8,1,2,3,9,4,10,14,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,1,2,3,9,4,10,14,8,9,10,14,1,3,4,1,2,3,4,1,2,3,4,1,2,3,4,8,9,10,30,25,8,9,10,14,30,1,2,3,4,8,8,1,2,3,9,9,4,10,10,8,8,1,2,3,9,9,4,10,10,8,8,1,2,3,9,9,4,10,10,8,8,1,2,3,9,9,4,10,10,1,2,3,4,8,8,1,2,3,9,9,4,10,10,8,8,1,2,3,9,9,4,10,10,27,27,8,1,2,3,9,4,10,24,25,26,27,28,14,14,30,31,8,1,2,3,9,4,10,24,25,26,27,28,14,30,31,1,2,3,4,0,0,27,8,9,10,14,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,8,1,2,3,9,4,10,24,25,26,27,28,14,30,31,8,1,2,3,9,4,10,24,25,26,27,28,14,30,31,8,1,2,3,9,4,10,14,25,8,9,10,8,8,8,1,1,1,1,2,2,2,3,3,3,9,9,9,9,10,10,10,10,27,28,28,14,14,31,8,1,2,3,9,10,8,1,2,3,9,10,8,1,2,3,9,10,8,1,2,3,9,4,10,24,25,27,28,14,30,8,1,2,3,9,4,10,24,25,26,27,28,14,14,30,31,8,1,2,3,9,4,10,24,25,26,27,28,14,30,31,8,1,2,3,9,4,10,24,25,26,27,28,14,30,31,30,1,1,2,2,3,3,4,4,1,2,3,4,1,2,3,4,8,1,2,3,9,4,10,24,25,26,27,28,14,30,31,8,1,1,2,3,9,9,10,10,28,14,14,31,8,9,10,14,8,9,10,14,8,1,2,3,9,4,10,24,25,26,27,28,14,14,14,14,30,31,0,0,0,1,2,3,4,30,26,8,8,8,8,1,1,1,1,2,2,2,2,3,3,3,3,9,9,9,9,4,4,4,4,10,10,10,10,24,25,26,27,28,14,14,14,30,31,31,8,8,8,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,9,9,9,9,9,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,10,10,10,10,24,25,26,27,27,28,28,14,14,14,14,14,14,30,30,31,27,1,2,3,4,1,2,3,4,14,14,1,2,3,4,8,9,10,8,9,10,8,9,10,8,9,10,14,8,1,2,3,9,4,10,14,31,1,2,3,4,1,9,10,14,1,9,10,14,137,8,10,1,26,27,30,27,30,30,91,91,0,8,1,2,3,9,4,10,27,28,14,31,27,30,8,9,10,8,9,10,8,1,2,3,9,4,10,24,25,26,27,28,14,30,31,27,1,2,3,4,8,1,2,3,9,4,10,24,25,26,27,28,14,30,31,30,14,14,1,9,10,14,1,9,10,14,137,8,10,8,1,2,3,9,4,10,0,0,24,1,2,3,4,8,9,10,8,1,2,3,9,10,28,14,31,30,1,3,4,1,2,3,4,1,2,3,4,0,8,1,2,3,9,10,27,27,1,2,3,4,30,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,14,30,25,27,30,1,2,3,4,30,1,2,3,4,27,30,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,9,10,14,30,8,1,2,3,9,4,10,14,1,2,3,4,24,27,31,8,9,10,8,9,10,8,9,10,8,9,10,30,31,27,27,31,31,1,1,2,2,3,3,4,4,1,2,3,4,8,9,10,26,27,8,1,2,3,9,10,28,27,31,1,2,3,4,1,2,3,4,1,2,3,4,30,8,1,2,3,9,10,26,27,28,14,30,31,1,1,2,2,3,3,4,4,1,2,3,4,1,1,2,2,3,3,4,4,1,2,3,4,0,30,30,25,25,26,1,1,2,2,3,3,4,4,1,2,3,4,30,30,27,138,1,139,1,4,1,2,3,4,8,9,10,8,1,2,3,9,10,140,1,1,2,3,4,8,9,10,8,9,10,8,9,10,8,1,2,3,9,4,10,24,25,26,27,28,14,30,31,141,90,1,4,8,1,2,3,9,4,10,14,31,31,107,90,93,94,2,4,30,1,2,3,4,27,27,30,30,8,1,2,3,9,4,10,14,8,9,10,8,1,1,1,1,1,2,2,3,9,4,10,24,25,26,27,28,14,30,31,31,8,1,2,3,9,4,10,24,25,26,27,28,14,30,31,8,1,2,3,9,4,10,24,25,26,27,28,14,30,31,8,1,3,9,10,30,30,8,1,2,3,9,10,27,31,24,27,31,8,1,2,3,9,4,10,24,25,26,27,28,14,30,31,30,30,0,0,8,9,10,14,8,1,2,3,9,4,10,0,0,0,105,104,0,104,68,68,68,106,105,68,104,106,105,68,104,68,104,68,104,68,68,68,68,106,105,68,104,106,105,68,104,106,105,68,104,68,104,105,68,106,105,68,68,104,68,104,68,68,68,68,68,106,105,68,104,68,106,105,68,104,106,68,106,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,104,68,68,68,68,104,104,106,105,68,104,106,105,68,104,106,105,68,104,106,105,68,104,68,68,110,0,0,110,109,109,109,109,109,109,109,109,109,109,109,109,109,109,110,109,110,109,110,109,110,109,110,109,109,110,109,109,110,109,110,109,110,109,109,109,110,109,110,109,110,109,110,142,142,142,142,142,142,142,142,142,142,142,142,0,0,0,0,142,0,0,142,142,142,0,0,142,142,0,142,142,142,142,142,142,142,142,0,0,0,142,142,142,142,142,142,142,142,142,0,142,142,0,0,0,0,142,142,142,142,0,0,0,0,0,113,113,113,113,113,113,113,114,113,114,113,114,113,114,113,114,114,113,114,113,114,113,114,113,114,114,113,114,113,113,113,113,113,113,113,113,114,114,114,113,113,113,114,114,114,114,114,114,114,114,114,113,114,113,114,114,114,114,113,113,113,113,113,113,113,114,113,114,114,114,114,113,113,113,113,113,113,113,113,113,114,113,113,114,113,114,113,114,113,114,114,113,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,0,0,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,120,108,120,108,120,108,120,108,108,108,120,108,120,108,108,120,108,108,108,108,108,120,108,108,108,108,120,108,120,120,108,108,108,108,108,108,108,108,108,108,108,120,120,120,120,120,108,108,108,120,108,120,108,108,120,108,120,108,120,108,108,120,0,0,122,123,122,123,122,123,122,123,122,122,123,122,123,123,122,123,122,123,122,123,122,122,122,122,122,122,122,123,123,123,122,123,122,123,122,123,123,123,122,122,123,123,123,122,123,123,122,123,122,123,122,123,122,123,122,123,0,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,0,0,0,0,66,128,126,126,127,126,127,66,128,126,127,66,128,66,66,128,126,127,66,128,126,127,66,128,126,127,126,127,66,126,127,66,128,126,127,66,128,127,126,127,66,128,126,127,128,126,127,66,128,126,127,66,66,128,66,66,66,127,66,66,66,128,128,126,127,66,128,126,127,66,128,66,126,126,126,127,126,66,127,66,66,126,127,66,128,66,126,127,66,66,66,126,127,66,128,66,126,127,127,66,128,126,127,66,128,126,127,66,128,66,66,126,127,66,128,0,131,131,131,131,131,131,131,131,131,131,0,131,131,131,131,131,0,0,0,130,134,130,134,130,130,0,130,130,134,134,130,134,130,134,130,130,134,130,134,130,134,130,130,0,0,0,0,130,130,130,134,130,134,130,134,130,134],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],0,0,[[1,[5,[1]]],1],[[1,[5,[1]]],1],[[2,[5,[2]]],2],[[2,[5,[2]]],2],[[3,[5,[3]]],3],[[3,[5,[3]]],3],[[4,[5,[4]]],4],[[4,[5,[4]]],4],[[1,1]],[[2,2]],[[3,3]],[[4,4]],0,0,[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8],[9],[10],[8],[9],[10],[8],[9],[10],[8],[9],[10],[8],[9],[10],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[]],[[]],[[]],[8,11],[9,11],[10,11],[[],[[13,[12]]]],[[],[[13,[12]]]],[[],[[13,[12]]]],[8,11],[9,11],[10,11],[8],[1],[2],[3],[9],[4],[10],[14],[[],[[13,[12]]]],[[],[[13,[12]]]],[[],[[13,[12]]]],[[],[[13,[12]]]],[1,15],[3,15],[4,15],[1,16],[2,16],[3,16],[4,16],[1,17],[2,17],[3,17],[4,17],[1,18],[2,18],[3,18],[4,18],[8],[9],[10],0,0,[[],18],[[],18],[[],18],[[],18],0,[[1,18],19],[[2,18],19],[[3,18],19],[[4,18],19],[[8,8]],[[8,8]],[[1,1],1],[[2,2],2],[[3,3],3],[[9,9]],[[9,9]],[[4,4],4],[[10,10]],[[10,10]],[[8,8]],[[8,8]],[[1,1]],[[2,2]],[[3,3]],[[9,9]],[[9,9]],[[4,4]],[[10,10]],[[10,10]],[[8,8]],[[8,8]],[[1,1],1],[[2,2],2],[[3,3],3],[[9,9]],[[9,9]],[[4,4],4],[[10,10]],[[10,10]],[[8,8]],[[8,8]],[[1,1]],[[2,2]],[[3,3]],[[9,9]],[[9,9]],[[4,4]],[[10,10]],[[10,10]],[1,18],[2,18],[3,18],[4,18],[[8,8]],[[8,8]],[[1,1],1],[[2,2],2],[[3,3],3],[[9,9]],[[9,9]],[[4,4],4],[[10,10]],[[10,10]],[[8,8]],[[8,8]],[[1,1]],[[2,2]],[[3,3]],[[9,9]],[[9,9]],[[4,4]],[[10,10]],[[10,10]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,18],11],[[2,18],11],[[3,18],11],[[4,18],11],0,0,0,[[],[[13,[[22,[20,21]]]]]],[[],[[13,[[22,[20,21]]]]]],[[],[[13,[[22,[20,21]]]]]],[[],[[13,[[22,[20,21]]]]]],[[1,1],[[23,[1]]]],[[2,2],[[23,[2]]]],[[3,3],[[23,[3]]]],[[4,4],[[23,[4]]]],[[1,1],[[23,[1]]]],[[2,2],[[23,[2]]]],[[3,3],[[23,[3]]]],[[4,4],[[23,[4]]]],[[1,1],[[23,[1]]]],[[2,2],[[23,[2]]]],[[3,3],[[23,[3]]]],[[4,4],[[23,[4]]]],[1,[[23,[1]]]],[2,[[23,[2]]]],[3,[[23,[3]]]],[4,[[23,[4]]]],[[1,1],[[23,[1]]]],[[2,2],[[23,[2]]]],[[3,3],[[23,[3]]]],[[4,4],[[23,[4]]]],[[1,1],[[23,[1]]]],[[2,2],[[23,[2]]]],[[3,3],[[23,[3]]]],[[4,4],[[23,[4]]]],[[1,1],[[23,[1]]]],[[2,2],[[23,[2]]]],[[3,3],[[23,[3]]]],[[4,4],[[23,[4]]]],[8,8],[1,1],[2,2],[3,3],[9,9],[4,4],[10,10],[24,24],[25,25],[26,26],[27,27],[28,28],[14,14],[[[30,[29]]],[[30,[29]]]],[31,31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[8,8],32],[[1,1],32],[[2,2],32],[[3,3],32],[[9,9],32],[[4,4],32],[[10,10],32],[[14,14],32],0,[[8,8],19],[[9,9],19],[[10,10],19],[33,[[13,[8,34]]]],[[],[[13,[8,35]]]],[36,[[13,[8,37]]]],[38,[[13,[1,39]]]],[36,[[13,[1,37]]]],[[],[[13,[1,35]]]],[33,[[13,[1,34]]]],[33,[[13,[2,34]]]],[36,[[13,[2,37]]]],[[],[[13,[2,35]]]],[[],[[13,[3,35]]]],[33,[[13,[3,34]]]],[36,[[13,[3,37]]]],[[],[[13,[9,35]]]],[33,[[13,[9,34]]]],[38,[[13,[9,39]]]],[36,[[13,[9,37]]]],[33,[[13,[10,34]]]],[38,[[13,[10,39]]]],[[],[[13,[10,35]]]],[36,[[13,[10,37]]]],[36,[[13,[27,37]]]],[36,[[13,[28,37]]]],[[],[[13,[28,35]]]],[38,[[13,[14,39]]]],[[],[[13,[14,35]]]],[[],[[13,[31,35]]]],[[],[[13,[34]]]],[[],[[13,[34]]]],[[],[[13,[34]]]],[[],[[13,[34]]]],[[],[[13,[34]]]],[[],[[13,[34]]]],[16,[[13,[34]]]],[16,[[13,[34]]]],[16,[[13,[34]]]],[16,[[13,[34]]]],[16,[[13,[34]]]],[16,[[13,[34]]]],[[16,33],[[13,[34]]]],[[16,33],[[13,[34]]]],[[16,33],[[13,[34]]]],[[16,33],[[13,[34]]]],[[16,33],[[13,[34]]]],[[16,33],[[13,[34]]]],[[],8],[[],1],[[],2],[[],3],[[],9],[[],4],[[],10],[[],24],[[],25],[[],27],[[],28],[[],14],[[],[[30,[40]]]],[18],[18],[18],[18],[18],[18],[18],[18],[18],[18],[18],[18],[14],[18],[18],[18],[18],[18],[18],[18],[18],[18],[18],[18],[18],[18],[18],[18],[18],[18],[18],[41,[[13,[8]]]],[41,[[13,[1]]]],[41,[[13,[2]]]],[41,[[13,[3]]]],[41,[[13,[9]]]],[41,[[13,[4]]]],[41,[[13,[10]]]],[41,[[13,[24]]]],[41,[[13,[25]]]],[41,[[13,[26]]]],[41,[[13,[27]]]],[41,[[13,[28]]]],[41,[[13,[14]]]],[41,[[13,[[30,[[0,[42,43,40]]]]]]]],[41,[[13,[31]]]],0,[[1,[5,[1]]],1],[[1,[5,[1]]],1],[[2,[5,[2]]],2],[[2,[5,[2]]],2],[[3,[5,[3]]],3],[[3,[5,[3]]],3],[[4,[5,[4]]],4],[[4,[5,[4]]],4],[[1,[5,[1]]]],[[2,[5,[2]]]],[[3,[5,[3]]]],[[4,[5,[4]]]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[18],[18],[18],[18],[18],[18],[18],[18],[18],[18],[18],[18],[18],[18],[18],[[8,44]],[[1,44]],[1,[[22,[11,21]]]],[[2,44]],[[3,44]],[9,[[22,[11,21]]]],[[9,44]],[10,[[22,[11,21]]]],[[10,44]],[[28,44]],[[14,44]],[14,[[22,[11,21]]]],[[31,44]],[[],[[46,[45]]]],[[],[[46,[45]]]],[[],[[46,[45]]]],[[],[[46,[45]]]],[[],[[46,[45]]]],[[],[[46,[45]]]],[[],[[46,[45]]]],[[],[[46,[45]]]],[[8,8],19],[[1,1],19],[[2,2],19],[[3,3],19],[[9,9],19],[[4,4],19],[[10,10],19],[[24,24],19],[[25,25],19],[[26,26],19],[[27,27],19],[[28,28],19],[14,19],[[14,[22,[11,21]]],19],[[14,14],19],[[14,47],19],[[[30,[[48,[[48,[[48,[48]]]]]]]],[30,[[48,[[48,[[48,[48]]]]]]]]],19],[[31,31],19],0,0,0,[18,1],[18,2],[18,3],[18,4],0,0,[[8,49],[[13,[50]]]],[[8,49],[[13,[50]]]],[[8,49],[[13,[50]]]],[[8,49],[[13,[50]]]],[[1,49],[[13,[50]]]],[[1,49],[[13,[50]]]],[[1,49],[[13,[50]]]],[[1,49],[[13,[50]]]],[[2,49],[[13,[50]]]],[[2,49],[[13,[50]]]],[[2,49],[[13,[50]]]],[[2,49],[[13,[50]]]],[[3,49],[[13,[50]]]],[[3,49],[[13,[50]]]],[[3,49],[[13,[50]]]],[[3,49],[[13,[50]]]],[[9,49],[[13,[50]]]],[[9,49],[[13,[50]]]],[[9,49],[[13,[50]]]],[[9,49],[[13,[50]]]],[[4,49],51],[[4,49],51],[[4,49],51],[[4,49],51],[[10,49],[[13,[50]]]],[[10,49],[[13,[50]]]],[[10,49],[[13,[50]]]],[[10,49],[[13,[50]]]],[[24,49],51],[[25,49],51],[[26,49],51],[[27,49],[[13,[50]]]],[[28,49],[[13,[50]]]],[[14,49],[[13,[50]]]],[[14,49],[[13,[50]]]],[[14,49],[[13,[50]]]],[[[30,[52]],49],[[13,[50]]]],[[31,49],[[13,[50]]]],[[31,49],[[13,[50]]]],[[],8],[[]],[[],8],[[],8],[53,1],[54,1],[55,1],[56,1],[16,1],[15,1],[1,1],[[],1],[57,1],[[],1],[[],1],[[]],[58,1],[59,1],[17,1],[60,1],[61,1],[62,1],[63,1],[64,1],[65,1],[11,1],[18,1],[[],2],[62,2],[16,2],[11,2],[59,2],[[],2],[65,2],[[]],[61,2],[17,2],[2,2],[[],2],[55,2],[58,2],[56,2],[57,2],[18,2],[16,3],[65,3],[55,3],[[],3],[[],3],[[]],[18,3],[57,3],[54,3],[17,3],[15,3],[11,3],[1,3],[59,3],[3,3],[[],3],[61,3],[56,3],[1,3],[62,3],[60,3],[58,3],[[],9],[[]],[10,9],[[],9],[[],9],[16,4],[65,4],[15,4],[[],4],[60,4],[56,4],[[],4],[[],4],[11,4],[[]],[62,4],[4,4],[57,4],[18,4],[55,4],[17,4],[59,4],[61,4],[[],10],[9,10],[[],10],[[]],[[],10],[[]],[[]],[[]],[66,27],[[]],[[]],[[[22,[67,21]]],28],[[]],[[],14],[[[22,[11,21]]],14],[68,14],[47,14],[[],14],[[]],[[[30,[27]]],[[30,[10]]]],[[]],0,[[],1],[[],2],[[],3],[[],4],[59,[[13,[1,69]]]],[59,[[13,[2,69]]]],[59,[[13,[3,69]]]],[59,[[13,[4,69]]]],[70,14],[70,14],[[],1],[[],2],[[],3],[[],4],[17,8],[17,9],[17,10],[17,8],[17,9],[17,10],[17,8],[17,9],[17,10],[[],8],[[],9],[[],10],[[],14],[59,[[13,[8,71]]]],[59,[[13,[1]]]],[59,[[13,[2]]]],[59,[[13,[3]]]],[59,[[13,[9,71]]]],[59,[[13,[4]]]],[59,[[13,[10,71]]]],[59,[[13,[14]]]],[59,[[13,[31]]]],[[59,16],[[13,[1,72]]]],[[59,16],[[13,[2,72]]]],[[59,16],[[13,[3,72]]]],[[59,16],[[13,[4,72]]]],[73,[[13,[1,74]]]],[73,[[13,[9,74]]]],[73,[[13,[10,74]]]],[73,[[13,[14,74]]]],[[[22,[73,21]]],[[13,[74]]]],[[[22,[73,21]]],[[13,[74]]]],[[[22,[73,21]]],[[13,[74]]]],[[[22,[73,21]]],[[13,[74]]]],[[]],[2,8],[1,10],[[1,1],3],0,0,0,0,[30,1],0,[[],15],[[],16],0,[[8,75]],[[1,75]],[[2,75]],[[3,75]],[[9,75]],[[4,75]],[[10,75]],[27,10],[[28,75]],[[14,75]],[[31,75]],0,0,[[8,76]],[[9,76]],[[10,76]],[[8,76]],[[9,76]],[[10,76]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],0,[1,1],[2,2],[3,3],[4,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[30,[10]],[22,[27,21]]],[[30,[27]]]],[14],[14],[1,73],[9,73],[10,73],[14,73],[[],[[22,[73,21]]]],[[],[[22,[73,21]]]],[[],[[22,[73,21]]]],[[],[[22,[73,21]]]],[[]],[8,2],[10,1],[8,19],[1,19],[2,19],[3,19],[9,19],[4,19],[10,19],0,0,0,[1,16],[2,16],[3,16],[4,16],[[],18],[[],18],[[],18],[8,18],[1,18],[2,18],[3,18],[9,18],[10,18],[28,18],[14,18],[31,18],0,[1,15],[3,15],[4,15],[1,16],[2,16],[3,16],[4,16],[1,17],[2,17],[3,17],[4,17],0,[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],0,0,[[],1],[[],2],[[],3],[[],4],0,[[1,61],1],[[1,55],1],[[1,55],1],[[1,16],1],[[1,11],1],[[1,56],1],[[1,65],1],[[1,65],1],[[1,65],1],[[1,1],1],[[1,57],1],[[1,62],1],[[1,16],1],[[1,11],1],[[1,16],1],[[1,56],1],[[1,62],1],[[1,1],1],[[1,57],1],[[1,17],1],[[1,56],1],[[1,61],1],[[1,62],1],[[1,11],1],[[1,16],1],[[1,57],1],[[1,18],1],[[1,56],1],[[1,57],1],[[1,62],1],[[1,61],1],[[1,17],1],[[1,18],1],[[1,65],1],[[1,55],1],[[1,11],1],[[1,61],1],[[1,55],1],[[1,1],1],[[1,1],1],[[1,18],1],[[1,17],1],[[1,18],1],[[1,17],1],[[2,57],2],[[2,16],2],[[2,62],2],[[2,55],2],[[2,57],2],[[2,57],2],[[2,11],2],[[2,61],2],[[2,17],2],[[2,16],2],[[2,65],2],[[2,16],2],[[2,56],2],[[2,2],2],[[2,55],2],[[2,57],2],[[2,56],2],[[2,62],2],[[2,18],2],[[2,17],2],[[2,56],2],[[2,55],2],[[2,65],2],[[2,16],2],[[2,62],2],[[2,11],2],[[2,55],2],[[2,18],2],[[2,2],2],[[2,18],2],[[2,2],2],[[2,18],2],[[2,11],2],[[2,61],2],[[2,61],2],[[2,65],2],[[2,17],2],[[2,62],2],[[2,65],2],[[2,11],2],[[2,61],2],[[2,2],2],[[2,17],2],[[2,56],2],[[3,11],3],[[3,18],3],[[3,57],3],[[3,3],3],[[3,17],3],[[3,11],3],[[3,55],3],[[3,62],3],[[3,18],3],[[3,56],3],[[3,11],3],[[3,16],3],[[3,3],3],[[3,65],3],[[3,65],3],[[3,18],3],[[3,65],3],[[3,11],3],[[3,61],3],[[3,16],3],[[3,65],3],[[3,61],3],[[3,62],3],[[3,55],3],[[3,16],3],[[3,61],3],[[3,57],3],[[3,18],3],[[3,61],3],[[3,56],3],[[3,56],3],[[3,17],3],[[3,62],3],[[3,57],3],[[3,17],3],[[3,3],3],[[3,57],3],[[3,62],3],[[3,55],3],[[3,55],3],[[3,3],3],[[3,16],3],[[3,56],3],[[3,17],3],[[4,17],4],[[4,57],4],[[4,55],4],[[4,57],4],[[4,56],4],[[4,55],4],[[4,4],4],[[4,65],4],[[4,56],4],[[4,61],4],[[4,16],4],[[4,56],4],[[4,62],4],[[4,65],4],[[4,61],4],[[4,4],4],[[4,11],4],[[4,57],4],[[4,16],4],[[4,18],4],[[4,55],4],[[4,4],4],[[4,11],4],[[4,16],4],[[4,62],4],[[4,55],4],[[4,17],4],[[4,61],4],[[4,62],4],[[4,11],4],[[4,18],4],[[4,17],4],[[4,61],4],[[4,18],4],[[4,18],4],[[4,17],4],[[4,11],4],[[4,56],4],[[4,57],4],[[4,65],4],[[4,65],4],[[4,62],4],[[4,4],4],[[4,16],4],[[1,55]],[[1,57]],[[1,18]],[[1,62]],[[1,65]],[[1,56]],[[1,17]],[[1,16]],[[1,61]],[[1,1]],[[1,11]],[[2,61]],[[2,2]],[[2,62]],[[2,65]],[[2,16]],[[2,11]],[[2,18]],[[2,55]],[[2,57]],[[2,17]],[[2,56]],[[3,65]],[[3,17]],[[3,61]],[[3,55]],[[3,3]],[[3,57]],[[3,62]],[[3,56]],[[3,11]],[[3,16]],[[3,18]],[[4,11]],[[4,55]],[[4,65]],[[4,56]],[[4,61]],[[4,4]],[[4,57]],[[4,18]],[[4,16]],[[4,62]],[[4,17]],[[],14],[30,[[23,[1]]]],0,0,0,[1,1],[2,2],[3,3],[4,4],0,[[],1],[[],2],[[],3],[[],4],0,0,[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[1],[2],[3],[4],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[],77],[[],77],[[],77],[[],77],[[],77],0,[[8,8],[[23,[32]]]],[[1,1],[[23,[32]]]],[[2,2],[[23,[32]]]],[[3,3],[[23,[32]]]],[[9,9],[[23,[32]]]],[[4,4],[[23,[32]]]],[[10,10],[[23,[32]]]],[[14,14],[[23,[32]]]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],0,0,0,[[],8],[[],9],[[],10],[[[0,[78,79]]],8],[[[0,[78,79]]],9],[[[0,[78,79]]],10],[8],[9],[10],[[8,[0,[78,79]]]],[[9,[0,[78,79]]]],[[10,[0,[78,79]]]],0,[[31,[5,[80]]],[[13,[9,81]]]],[27,[[13,[9,81]]]],[27,[[13,[9,81]]]],[[31,82],[[13,[9,81]]]],[31,[[13,[83,81]]]],[[1,[0,[[5,[1]],84]]],1],[[1,[0,[[5,[1]],84]]],1],[[2,[0,[[5,[2]],84]]],2],[[2,[0,[[5,[2]],84]]],2],[[3,[0,[[5,[3]],84]]],3],[[3,[0,[[5,[3]],84]]],3],[[4,[0,[[5,[4]],84]]],4],[[4,[0,[[5,[4]],84]]],4],[[1,[0,[[5,[1]],84]]]],[[2,[0,[[5,[2]],84]]]],[[3,[0,[[5,[3]],84]]]],[[4,[0,[[5,[4]],84]]]],[11,8],[11,9],[11,10],0,[27,14],[[8,85]],[[1,85]],[[2,85]],[[3,85]],[[9,85]],[[10,85]],[[28,85]],0,0,[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],0,[[8,86],13],[[1,86],13],[[2,86],13],[[3,86],13],[[9,86],13],[[10,86],13],[[26,86],13],[[27,86],13],[[28,86],13],[[14,86],13],[[[30,[[0,[42,43]]]],86],13],[[31,86],13],[[1,[5,[1]]],1],[[1,[5,[1]]],1],[[2,[5,[2]]],2],[[2,[5,[2]]],2],[[3,[5,[3]]],3],[[3,[5,[3]]],3],[[4,[5,[4]]],4],[[4,[5,[4]]],4],[[1,[5,[1]]]],[[2,[5,[2]]]],[[3,[5,[3]]]],[[4,[5,[4]]]],[[1,[5,[1]]],1],[[1,[5,[1]]],1],[[2,[5,[2]]],2],[[2,[5,[2]]],2],[[3,[5,[3]]],3],[[3,[5,[3]]],3],[[4,[5,[4]]],4],[[4,[5,[4]]],4],[[1,[5,[1]]]],[[2,[5,[2]]]],[[3,[5,[3]]]],[[4,[5,[4]]]],0,0,0,0,0,0,[[1,[5,[1]]],1],[[1,[5,[1]]],1],[[2,[5,[2]]],2],[[2,[5,[2]]],2],[[3,[5,[3]]],3],[[3,[5,[3]]],3],[[4,[5,[4]]],4],[[4,[5,[4]]],4],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[30,[[13,[[88,[87]],89]]]],0,0,[[],90],[1,90],[[]],[1],[4],[1],[2],[3],[4],[8],[9],[10],[[],[[22,[11,21]]]],[[],[[22,[11,21]]]],[[],[[22,[11,21]]]],[[],[[22,[11,21]]]],[[],[[22,[11,21]]]],[[],[[22,[11,21]]]],[[]],[1],[1],[2],[3],[4],[8,17],[9,17],[10,17],[8,17],[9,17],[10,17],[8,17],[9,17],[10,17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],23],[90,[[23,[91]]]],[1,[[23,[91]]]],[4,[[23,[91]]]],[[],92],[[],92],[[],92],[[],92],[[],92],[[],92],[[],92],[[],92],[[],92],[31,[[22,[11,21]]]],[[],93],[90,93],[93,93],[94,93],[2,93],[4,93],0,[1,16],[2,16],[3,16],[4,16],0,0,0,0,[[],[[13,[[7,[6]],95]]]],[[],[[13,[[7,[6]],95]]]],[[],[[13,[[7,[6]],95]]]],[[],[[13,[[7,[6]],95]]]],[[],[[13,[[7,[6]],95]]]],[[],[[13,[[7,[6]],95]]]],[[],[[13,[[7,[6]],95]]]],[[],[[13,[[7,[6]],95]]]],[[],[[13,[[7,[6]],95]]]],[[],[[13,[[7,[6]],95]]]],[[],[[13,[[7,[6]],95]]]],[[],13],[3,[[13,[1,96]]]],[3,[[13,[1,96]]]],[97,[[13,[1]]]],[[],13],[98,[[13,[1]]]],[[],13],[97,[[13,[2]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],[[13,[31]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],99],[[],99],[[],99],[[],99],[[],99],[[],99],[[],99],[[],99],[[],99],[[],99],[[],99],[[],99],[[],99],[[],99],[[],99],[[],[[101,[100]]]],[[],[[101,[100]]]],[[],[[101,[100]]]],[[],[[101,[100]]]],[[],[[101,[100]]]],0,0,[[8,102]],[[1,102]],[[2,102]],[[3,102]],[[9,102]],[[10,102]],0,0,0,0,[[31,[5,[80]],[5,[9]]],[[13,[81]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[103,13],[103,13],[103,13],[103,13],[[],8],[[],1],[[],2],[[],3],[[],9],[[],4],[[],10],0,0,0,0,0,0,0,[[68,92],68],[[68,68]],[[68,104],68],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[68,68],[104,104],[[]],[[]],[68,[[22,[11]]]],[68,22],[68,18],[[],68],[18],[18],[18],[18],[18],[18],[18],[18],[18],[18],[18],[18],[[68,68],19],[[104,104],19],[[105,49],51],[[68,49],51],[[]],[[]],[[]],[[[22,[11]]],68],[[]],[[[22,[11]]],68],[59,[[13,[104]]]],[[68,18],23],[[68,18],[[23,[11]]]],[[68,59],18],[68,93],[68,94],[[],18],[[],18],[[],18],[[],18],[[68,59,18]],[[]],[[]],[[]],[[]],[[]],[68,106],[106,23],[[68,107,107],68],[[68,107,107,107],68],[68,68],[[68,107,107],68],[[68,107],68],[[68,107],68],[[68,107,107],68],[[68,107,107,107,107,107,107,107],68],[[68,107,107,107,107,107,107,107],68],[[68,107,107,107],68],[[68,107],68],[68,68],[68,68],[68,68],[68,68],[[68,107,107,107],68],[68,68],[68,68],[[68,107,107,107],68],[[68,107,107,107,107],68],[[68,107,107,107,107,107,107],68],[68,68],[[68,107,107],68],[68,68],[68,68],[68,68],[68,68],[68,68],[68,68],[68,68],[68,68],[68,68],[68,68],[68,68],[68,68],[68,68],[68,68],[68,68],[68,68],[[68,107,107],68],[[68,107,107],68],[[68,107,107,107,107],68],[[68,107],68],[[68,107],68],[68,68],[68,68],[68,68],[[68,107,107],68],[[68,107],68],[[68,107],68],[68,18],[[68,107],68],[[68,107,107],68],[[68,107,107,107],68],[[68,107,107,107,107],68],[[68,107,107,107,107,107],68],[[68,107,107,107,107,107,107],68],[[68,107,107],68],[[68,107],68],[[68,107,107],68],[68,68],[[68,107,107],68],[[68,107,107],68],[[68,107,107],68],[[68,107,107,107],68],[[68,107],68],[68,68],[[68,107,107],68],[68,68],[68,68],[68,68],[68,68],[68,68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107],68],[[68,107,107],68],[[68,107,107,107],68],[68,68],[[68,107,107],68],[[68,107,107],68],[[68,107,107],68],[68,68],[[68,107,107],68],[[68,107,107],68],[[68,107,107],68],[[68,107,107],68],[[68,107,107],68],[[68,107],68],[[68,107,107],68],[[68,107,107],68],[[68,107,107],68],[[68,107,107,107,107,107,107],68],[68,68],[[68,107,107],68],[68,68],[68,68],[68,68],[68,68],[68,68],[68,68],[68,68],[68,68],[68,68],[68,68],[68,68],[68,68],[68,68],[68,68],[68,68],[68,68],[68,68],[[68,107,107],68],[104,108],[[68,11,107],68],[68,68],[[68,68]],[[]],[[]],[104,92],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],99],[[],99],[[],99],[[],99],[[]],[[]],[[]],[[]],[[68,11,19],68],[[68,108],68],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[18],[18],[18],[18],[18],[18],[[109,49],51],[[109,49],51],[[110,49],51],[111,109],[[]],[[]],[[],18],[[],18],[[]],[[]],[112],[[],92],[[],13],[[],13],[[],13],[[],13],[[],99],[[],99],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[18],[18],[18],[[]],0,[[],18],[[]],0,0,0,0,[[],13],[[],13],[[],99],[[]],[[17,93],17],[[17,17,17],17],[[17,17],17],0,0,[[113,113],113],[[113,113],113],[[113,113],113],[[113,113]],[[113,113]],[[113,113]],[[]],[[]],[[]],[[]],[113,113],[114,114],[[]],[[]],[[113,113],32],[[114,93,93,93]],[[],114],[18],[18],[18],[18],[18],[18],[[113,113],19],[[114,114],19],[[114,18]],[[113,49],51],[[114,49],51],[17,113],[11,113],[16,113],[57,113],[[]],[55,113],[65,113],[18,113],[[[22,[11]]],114],[[]],[[[22,[93]]],114],[38,[[13,[113,109]]]],[38,[[13,[113,109]]]],[59,[[13,[113]]]],[[114,[115,[113]]]],[[114,116]],[[114,[117,[18]]]],[[114,[118,[113]]]],[[114,[5,[113]]]],[[114,[119,[113]]]],[[114,[117,[113]]]],[[114,[5,[113]]]],[[114,[117,[18]]]],[[],18],[[],18],[[]],[[]],[114,19],[114,113],[114,18],[[113,102],113],[[113,113],113],[[113,113],113],[[113,113],113],[[113,113]],[[113,113]],[[113,113]],[[],114],[[113,113],[[23,[32]]]],[[114,38]],[[114,113,113],[[22,[11]]]],[[114,113],93],[[114,86],13],[[113,113],113],[[113,113]],[[113,113],113],[[113,113],113],[[113,113]],[[113,113]],[113],[113],[[]],[[]],[93,[[13,[113]]]],[[],13],[[],13],[[],13],[[],13],[[],99],[[],99],[[]],[[]],[114,18],[[],113],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[108,17],[108,11],[[]],[[]],[[]],[[]],[108,108],[120,120],[[]],[[]],[108,17],[108,18],[18],[18],[18],[18],[41,[[13,[108]]]],[18],[18],[[108,108],19],[[108,49],51],[[108,49],51],[11,108],[[]],[[]],[59,[[13,[108]]]],[108,19],[[108,75]],[[],18],[[],18],[[]],[[]],[[]],[[],[[22,[108]]]],[108,[[22,[16]]]],[108,19],[108,19],[108,19],[108,19],[108,19],[108,19],[108,19],[108,19],[[],120],[120,18],[120,23],[120,23],[[120,18],23],[[],121],[108,[[23,[11]]]],[11,[[13,[108,109]]]],[[108,86],13],[120],[[]],[[]],[[],92],[[],13],[[],13],[[],13],[[],13],[[],99],[[],99],[[],[[22,[108]]]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[122,122],[123,123],[[]],[[]],[[122,122],32],[18],[18],[18],[18],[41,[[13,[123]]]],[18],[18],[[122,122],19],[[123,123],19],[[122,49],51],[[123,49],51],[[]],[65,122],[16,122],[55,122],[57,122],[18,122],[11,122],[[]],[[[5,[[22,[93]]]]],123],[[],123],[59,[[13,[122]]]],[[[22,[93]]],123],[[],18],[[],18],[[]],[[]],[123,[[13,[93,109]]]],[123,122],[[122,102],122],[18,122],[[],123],[[123,18],[[13,[93,109]]]],[[123,18],122],[[122,122],[[23,[32]]]],[[123,86],13],[123,122],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],99],[[],99],[[]],[[]],0,[[]],[[]],[124,124],[[]],[[],124],[18],[18],[18],[[],124],[[124,124],19],[[124,49],51],[[]],[[[5,[[125,[93,93]]]]],124],[[124,93],[[23,[93]]]],[[124,93],[[13,[93,109]]]],[[],18],[[]],[[[125,[93,93]]],124],[[124,86],13],[[]],[[],13],[[],13],[[],99],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[66,17],0,[126,126],[127,127],[66,66],[128,128],[[]],[[]],[[]],[[]],0,0,[[],126],[[],127],[[],66],[18],[18],[18],[18],[18],[18],[18],[18],0,[18],[18],[18],[18],[[126,126],19],[[127,127],19],0,[[126,49],51],[[127,49],51],[[66,49],51],[[128,49],51],[[]],[[]],[27,66],[[]],[[]],0,[66,17],0,0,0,0,0,0,0,[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[66,19],[126,19],[68,126],[68,126],[[90,93,2,93,93,93],127],0,0,0,0,0,[[126,86],13],[[127,86],13],[[66,86],13],[[128,[125,[90,129]]]],[[66,17],[[13,[130,109]]]],0,0,0,[66,90],[66,90],[[]],[[]],[[]],[[]],[[66,2,93,2],27],[[],13],[[],13],[30,[[13,[127]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],99],[[],99],[[],99],[[],99],0,0,[[]],[[]],[[]],[[]],0,[[]],[[]],[[],131],[18],[18],[131,[[22,[11]]]],[18],[[]],[[],18],[[]],[[]],[[],13],[[],13],[[],99],[131],[[]],0,0,[132],[[]],[[]],[[]],[[]],[130,130],[[]],[133,13],[[],130],[18],[18],[134,132],[18],[18],[18],[18],[[130,49],51],[[]],[[]],[[],18],[[],18],[[]],[[]],0,0,[135],[[]],[[11,93,93],[[13,[135,111]]]],[[136,136,136]],0,[[]],[[],13],[[],13],[[],13],[[],13],[[],99],[[],99],[[]],[[]]],"c":[],"p":[[3,"U256"],[3,"U64"],[3,"U512"],[3,"DebugU256"],[8,"Into"],[8,"BitOrder"],[3,"BitSlice"],[3,"H64"],[3,"H160"],[3,"H256"],[15,"u8"],[4,"Error"],[4,"Result"],[3,"Bytes"],[15,"u128"],[15,"u32"],[15,"u64"],[15,"usize"],[15,"bool"],[3,"u5"],[3,"Global"],[3,"Vec"],[4,"Option"],[3,"StorageProof"],[3,"EIP1186ProofResponse"],[3,"GethExecTrace"],[3,"Transaction"],[3,"AccessList"],[8,"Clone"],[3,"Block"],[3,"Signature"],[4,"Ordering"],[8,"Input"],[3,"Error"],[4,"DecodeError"],[3,"Rlp"],[4,"DecoderError"],[8,"AsRef"],[4,"AbiError"],[8,"Default"],[8,"Deserializer"],[8,"Serialize"],[8,"DeserializeOwned"],[8,"BufMut"],[15,"char"],[8,"FromIterator"],[3,"Bytes"],[8,"PartialEq"],[3,"Formatter"],[3,"Error"],[6,"Result"],[8,"Debug"],[4,"Numeric"],[3,"U128"],[15,"u16"],[15,"isize"],[15,"i32"],[4,"Chain"],[15,"str"],[15,"i128"],[15,"i8"],[15,"i16"],[4,"ParseUnits"],[3,"Uint8"],[15,"i64"],[3,"Transaction"],[3,"AccessListItem"],[3,"Bytecode"],[4,"FromDecStrErr"],[8,"IntoIterator"],[4,"FromHexError"],[3,"FromStrRadixErr"],[4,"Token"],[3,"InvalidOutputType"],[8,"Hasher"],[8,"SliceIndex"],[4,"ParamType"],[8,"Rng"],[8,"Sized"],[4,"RecoveryMessage"],[4,"SignatureError"],[8,"Eip712"],[3,"RecoveryId"],[8,"Copy"],[3,"RlpStream"],[8,"Serializer"],[3,"Utc"],[3,"DateTime"],[4,"TimeError"],[6,"Address"],[8,"Field"],[3,"String"],[6,"Word"],[6,"Hash"],[4,"BitSpanError"],[4,"Error"],[4,"StringifiedNumeric"],[3,"I256"],[3,"TypeId"],[4,"MetaForm"],[3,"Type"],[8,"FnOnce"],[8,"WriteBase32"],[4,"OpcodeWithData"],[4,"Error"],[3,"BytecodeIterator"],[8,"ToWord"],[4,"OpcodeId"],[4,"Error"],[4,"EthAddressParsingError"],[4,"Error"],[3,"Demand"],[3,"MemoryAddress"],[3,"Memory"],[3,"RangeFrom"],[3,"RangeFull"],[3,"Range"],[3,"RangeTo"],[3,"RangeToInclusive"],[3,"OpcodeIdIter"],[3,"IterBridge"],[3,"StackAddress"],[3,"Stack"],[3,"Storage"],[3,"HashMap"],[3,"Account"],[3,"BlockConstants"],[3,"GethData"],[6,"LocalWallet"],[3,"SignData"],[3,"Keccak"],[3,"BigUint"],[3,"CtOption"],[3,"SECP256K1_Q"],[3,"Secp256k1Affine"],[3,"Fq"],[8,"BigEndianHash"],[8,"ToAddress"],[8,"ToBigEndian"],[8,"ToLittleEndian"],[8,"ToScalar"],[3,"GasCost"]]},\
"external_tracer":{"doc":"This module generates traces by connecting to an external …","t":"DDMMLLLLMLLLLLLLLLLMMLLLMMLLLLMLLLLMLLLLFMLLLLLLLL","n":["LoggerConfig","TraceConfig","accounts","block_constants","borrow","borrow","borrow_mut","borrow_mut","chain_id","clone","clone","clone_into","clone_into","default","default","deref","deref","deref_mut","deref_mut","disable_stack","disable_storage","drop","drop","enable_memory","enable_memory","enable_return_data","fmt","fmt","from","from","history_hashes","init","init","into","into","logger_config","serialize","serialize","to_owned","to_owned","trace","transactions","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"external_tracer"]],"d":["Configuration structure for <code>logger.Config</code>","Configuration structure for <code>geth_utlis::trace</code>","accounts","block constants","","","","","chain id","","","","","","","","","","","disable stack capture","disable storage capture","","","","enable memory capture","enable return data capture","","","Returns the argument unchanged.","Returns the argument unchanged.","history hashes contains most recent 256 block hashes in …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","logger","","","","","Creates a trace for the specified config","transaction","","","","","","","",""],"i":[0,0,1,1,1,2,1,2,1,1,2,1,2,1,2,1,2,1,2,2,2,1,2,2,2,2,1,2,1,2,1,1,2,1,2,1,1,2,1,2,0,1,1,2,1,2,1,2,1,2],"f":[0,0,0,0,[[]],[[]],[[]],[[]],0,[1,1],[2,2],[[]],[[]],[[],1],[[],2],[3],[3],[3],[3],0,0,[3],[3],[[],2],0,0,[[1,4],5],[[2,4],5],[[]],[[]],0,[[],3],[[],3],[[]],[[]],0,[[1,6],7],[[2,6],7],[[]],[[]],[1,[[7,[[9,[8]],10]]]],0,[[],7],[[],7],[[],7],[[],7],[[],11],[[],11],[[]],[[]]],"c":[],"p":[[3,"TraceConfig"],[3,"LoggerConfig"],[15,"usize"],[3,"Formatter"],[6,"Result"],[8,"Serializer"],[4,"Result"],[3,"GethExecTrace"],[3,"Vec"],[4,"Error"],[3,"TypeId"]]},\
"gadgets":{"doc":"ZKEVM-Gadgets","t":"AAFOOAAAFADDLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLIDDLKLMLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLDDILLKLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLLDDIKLLLLLLLLLLLLLLLLMLLLLLLLLLLLKLLMMLLLLLLLLMLLDDLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLMLLLLLLLLLLIIAKFAAAFKAFFAAFFFFFFFFFFFFFFF","n":["batched_is_zero","binary_number","bool_check","impl_expr","impl_scalar","is_zero","less_than","mul_add","range_check","util","BatchedIsZeroChip","BatchedIsZeroConfig","annotate_columns_in_region","assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","configure","construct","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","init","init","into","into","is_zero","nonempty_witness","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","AsBits","BinaryNumberChip","BinaryNumberConfig","annotate_columns_in_region","as_bits","assign","bits","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","configure","construct","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","from_bits","init","init","into","into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","value_equals","value_equals_expr","vzip","vzip","IsZeroChip","IsZeroConfig","IsZeroInstruction","annotate_columns_in_region","annotate_columns_in_region","assign","assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","config","configure","construct","deref","deref","deref_mut","deref_mut","drop","drop","expr","fmt","fmt","from","from","init","init","into","into","is_zero_expression","loaded","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value_inv","vzip","vzip","LtChip","LtConfig","LtInstruction","assign","assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","config","configure","construct","deref","deref","deref_mut","deref_mut","diff","drop","drop","fmt","fmt","from","from","init","init","into","into","is_lt","load","load","loaded","lt","range","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","u8","vzip","vzip","MulAddChip","MulAddConfig","a_limbs_cur","annotate_columns_in_region","assign","b_limbs_cur","borrow","borrow","borrow_mut","borrow_mut","c_lo_hi_cur","clone","clone","clone_into","clone_into","col0","col1","col2","col3","col4","config","configure","construct","d_lo_hi_cur","d_lo_hi_next","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","into","into","overflow","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Expr","Scalar","and","expr","expr_from_bytes","not","or","pow","pow_of_two","scalar","select","split_u256","split_u256_limb64","sum","xor","expr","value","expr","value","expr","value","expr","value","expr","value","value_word","expr","value","expr","value"],"q":[[0,"gadgets"],[10,"gadgets::batched_is_zero"],[46,"gadgets::binary_number"],[91,"gadgets::is_zero"],[137,"gadgets::less_than"],[185,"gadgets::mul_add"],[235,"gadgets::util"],[250,"gadgets::util::and"],[252,"gadgets::util::not"],[254,"gadgets::util::or"],[256,"gadgets::util::pow"],[258,"gadgets::util::select"],[261,"gadgets::util::sum"],[263,"gadgets::util::xor"]],"d":["BatchedIsZero chip works as follows:","The binary number chip implements functionality to …","Restrict an expression to be a boolean.","Implementation trait <code>Expr</code> for type able to be casted to u64","Implementation trait <code>Scalar</code> for type able to be casted to …","IsZero gadget works as follows:","Lt chip can be used to compare LT for two expressions LHS …","Chip that implements instructions to check: a * b + c == d …","Restrict an expression such that 0 &lt;= word &lt; range.","Utility traits, functions used in the crate.","Verify that a list of values are all 0.","BatchedIsZeroChip configuration","Annotates columns of this gadget embedded within a circuit …","Assign the BatchedIsZeroChip","","","","","","","Configure the BatchedIsZeroChip","Given an <code>BatchedIsZeroConfig</code>, construct the chip.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","All the values are 0","If some value is non-zero, this is its inverse","","","","","","","","","","Helper trait that implements functionality to represent a …","This chip helps working with binary encoding of integers …","Config for the binary number chip.","Annotates columns of this gadget embedded within a circuit …","Return the bits of self, starting from the most …","Assign a value to the binary number chip. A generic type …","Must be constrained to be binary for correctness.","","","","","","","","","Configure constraints for the binary number chip.","Construct the binary number chip given a config.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Helper function to get a decimal representation given the …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the expression value of the bits at the given …","Returns a function that can evaluate to a binary …","Returns a binary expression that evaluates to 1 if …","","","Wrapper arround <code>IsZeroConfig</code> for which <code>Chip</code> is implemented.","Config struct representing the required fields for an …","Trait that needs to be implemented for any gadget or …","Annotates columns of this gadget embedded within a circuit …","Annotates columns of this gadget embedded within a circuit …","Given a <code>value</code> to be checked if it is zero:","","","","","","","","","","","Sets up the configuration of the chip by creating the …","Given an <code>IsZeroConfig</code>, construct the chip.","","","","","","","Returns the is_zero expression","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","This can be used directly for custom gate at the offset if …","","","","","","","","","","Modular inverse of the value.","","","Chip that compares lhs &lt; rhs.","Config for the Lt chip.","Instruction that the Lt chip needs to implement.","Assign the lhs and rhs witnesses to the Lt chip’s region.","","","","","","","","","","","Configures the Lt chip.","Constructs a Lt chip given a config.","","","","","Denotes the bytes representation of the difference between …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns an expression that denotes whether lhs &lt; rhs, or …","Load the u8 lookup table.","","","Denotes the lt outcome. If lhs &lt; rhs then lt == 1, …","Denotes the range within which both lhs and rhs lie.","","","","","","","","","Denotes the range within which each byte should lie.","","","Chip to constrain a * b + c == d (mod 2^256).","Config for the MulAddChip.","64-bit limbs representing <code>a</code> from the equation …","Annotates columns of this gadget embedded within a circuit …","Assign witness data to the MulAdd chip.","64-bit limbs representing <code>b</code> from the equation …","","","","","128-bit lo-hi parts of <code>c</code> from the equation <code>a * b + c == d</code>.","","","","","First of the columns which we use over multiple rows to …","Second of the columns which we use over multiple rows to …","Third of the columns which we use over multiple rows to …","Fourth of the columns which we use over multiple rows to …","Fifth of the columns which we use over multiple rows to …","Config for the chip.","Configure the MulAdd chip.","Construct the MulAdd chip given a configuration.","128-bit lo-hi parts of <code>d</code> from the equation <code>a * b + c == d</code>.","128-bit lo-hi parts of <code>d</code> from the next step.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Sum of the parts higher than 256-bit in the product.","","","","","","","","","","","Trait that implements functionality to get a constant …","Trait that implements functionality to get a scalar from …","Returns <code>1</code> when <code>expr[0] &amp;&amp; expr[1] &amp;&amp; ... == 1</code>, and returns …","Returns an expression for the type.","Given a bytes-representation of an expression, it computes …","Returns <code>1</code> when <code>b == 0</code>, and returns <code>0</code> otherwise. <code>b</code> needs to …","Returns <code>1</code> when <code>expr[0] || expr[1] || ... == 1</code>, and returns …","Returns the power of a number using straightforward …","Returns 2**by as Field","Returns a scalar for the type.","Returns <code>when_true</code> when <code>selector == 1</code>, and returns …","Returns tuple consists of low and high part of U256","Split a U256 value into 4 64-bit limbs stored in U256 …","Returns the sum of the passed in cells","Returns <code>a ^ b</code>. <code>a</code> and <code>b</code> needs to be boolean","Returns an expression that evaluates to 1 only if all the …","Returns the product of all given values.","Returns an expression that represents the NOT of the given …","Returns a value that represents the NOT of the given value.","Returns an expression that evaluates to 1 if any …","Returns the value after passing all given values through …","Raises <code>value</code> to the power of <code>exponent</code>","Raises <code>value</code> to the power of <code>exponent</code>","Returns the <code>when_true</code> expression when the selector is …","Returns the <code>when_true</code> value when the selector is true, …","Returns the <code>when_true</code> word when selector is true, else …","Returns an expression for the sum of the list of …","Returns the sum of the given list of values within the …","Returns an expression that represents the XOR of the given …","Returns a value that represents the XOR of the given value."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,4,7,7,4,7,4,4,4,7,7,7,4,7,4,7,4,4,7,4,7,4,7,4,4,4,4,7,4,7,4,7,4,7,4,0,0,0,17,16,19,17,17,19,17,19,17,19,17,19,19,19,17,19,17,19,17,19,17,19,17,19,0,17,19,17,19,17,19,17,19,17,19,17,19,17,17,17,17,19,0,0,0,28,29,40,29,28,29,28,29,28,29,28,29,29,29,29,28,29,28,29,28,29,28,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,28,29,0,0,0,41,30,31,30,31,30,31,30,31,30,30,30,30,31,30,31,30,31,31,30,31,30,31,30,31,30,31,30,31,41,30,30,31,31,31,30,31,30,31,30,31,30,31,31,30,0,0,34,35,35,34,34,35,34,35,34,34,35,34,35,34,34,34,34,34,35,35,35,34,34,34,35,34,35,34,35,34,35,34,35,34,35,34,35,34,34,35,34,35,34,35,34,35,34,35,0,0,0,39,0,0,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,[[[2,[1]]],[[2,[1]]]],0,0,0,0,0,[[[2,[1]],3],[[2,[1]]]],0,0,0,[[4,[5,[1]],6]],[[[7,[1]],[5,[1]],3,8],[[10,[9]]]],[[]],[[]],[[]],[[]],[4,4],[[]],[[[11,[1]],12,12],4],[4,[[7,[1]]]],[3],[3],[3],[3],[3],[3],[[4,13],14],[[]],[[]],[[],3],[[],3],[[]],[[]],0,0,[[]],[[],10],[[],10],[[],10],[[],10],[[],15],[[],15],[[]],[[]],0,0,0,[[[17,[16]],[5,[1]],6]],[[]],[[[19,[1,[0,[16,18]]]],[5,[1]],3,[0,[16,18]]],[[10,[9]]]],0,[[]],[[]],[[]],[[]],[[[17,[20]]],[[17,[20]]]],[[[19,[20,20]]],[[19,[20,20]]]],[[]],[[]],[[[11,[1]],[22,[21]],[24,[[22,[23]]]]],[[17,[[0,[16,18]]]]]],[[[17,[[0,[16,18]]]]],[[19,[1,[0,[16,18]]]]]],[3],[3],[3],[3],[3],[3],[[[17,[25]],13],14],[[[19,[25,25]],13],14],[[]],[[]],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],15],[[],15],[[[17,[16]],26],27],[[[17,[16]],16,26],27],[16,[[2,[1]]]],[[]],[[]],0,0,0,[[[28,[1]],[5,[1]],6]],[[[29,[1]],[5,[1]],6]],[[5,3,8],[[10,[9]]]],[[[29,[1]],[5,[1]],3,[8,[1]]],[[10,[9]]]],[[]],[[]],[[]],[[]],[[[28,[20]]],[[28,[20]]]],[[[29,[20]]],[[29,[20]]]],[[]],[[]],[[[29,[1]]]],[[[11,[1]],27,27,[22,[23]]],[[28,[1]]]],[[[28,[1]]],[[29,[1]]]],[3],[3],[3],[3],[3],[3],[[[28,[1]]],[[2,[1]]]],[[[28,[25]],13],14],[[[29,[25]],13],14],[[]],[[]],[[],3],[[],3],[[]],[[]],0,[[[29,[1]]]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],15],[[],15],0,[[]],[[]],0,0,0,[[5,3,8,8],[[10,[9]]]],[[[30,[1]],[5,[1]],3,[8,[1]],[8,[1]]],[[10,[9]]]],[[]],[[]],[[]],[[]],[[[31,[20]]],[[31,[20]]]],[[[30,[20]]],[[30,[20]]]],[[]],[[]],[[[30,[1]]]],[[[11,[1]],27,27,27],[[31,[1]]]],[[[31,[1]]],[[30,[1]]]],[3],[3],[3],[3],0,[3],[3],[[[31,[25]],13],14],[[[30,[25]],13],14],[[]],[[]],[[],3],[[],3],[[]],[[]],[[[31,[1]],[32,[1]],[24,[26]]],[[2,[1]]]],[33,[[10,[9]]]],[[[30,[1]],[33,[1]]],[[10,[9]]]],[[[30,[1]]]],0,0,[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],15],[[],15],0,[[]],[[]],0,0,[[[34,[1]],[32,[1]]]],[[[35,[1]],[5,[1]],6]],[[[35,[1]],[5,[1]],3],[[10,[9]]]],[[[34,[1]],[32,[1]]]],[[]],[[]],[[]],[[]],[[[34,[1]],[32,[1]]]],[[[34,[20]]],[[34,[20]]]],[[[35,[20]]],[[35,[20]]]],[[]],[[]],0,0,0,0,0,0,[[[11,[1]],27],[[34,[1]]]],[[[34,[1]]],[[35,[1]]]],[[[34,[1]],[32,[1]]]],[[[34,[1]],[32,[1]]]],[3],[3],[3],[3],[3],[3],[[[34,[25]],13],14],[[[35,[25]],13],14],[[]],[[]],[[],3],[[],3],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],15],[[],15],[[]],[[]],0,0,0,[[],2],[[],[[2,[1]]]],0,0,0,[3,1],[[]],0,[36],[36],0,0,[37,[[2,[1]]]],[[[38,[1]]],1],[[[39,[1]]],[[2,[1]]]],[1,1],[37,[[2,[1]]]],[[[38,[1]]],1],[[[2,[1]],3],[[2,[1]]]],[[1,3],1],[[[2,[1]],[2,[1]],[2,[1]]],[[2,[1]]]],[[1,1,1],1],[1],[37,[[2,[1]]]],[[],1],[[[39,[1]],[39,[1]]],[[2,[1]]]],[[1,1],1]],"c":[],"p":[[8,"Field"],[4,"Expression"],[15,"usize"],[3,"BatchedIsZeroConfig"],[3,"Region"],[15,"str"],[3,"BatchedIsZeroChip"],[3,"Value"],[4,"Error"],[4,"Result"],[3,"ConstraintSystem"],[8,"Fn"],[3,"Formatter"],[6,"Result"],[3,"TypeId"],[8,"AsBits"],[3,"BinaryNumberConfig"],[8,"IntoEnumIterator"],[3,"BinaryNumberChip"],[8,"Clone"],[3,"Fixed"],[3,"Column"],[3,"Advice"],[4,"Option"],[8,"Debug"],[3,"Rotation"],[8,"FnOnce"],[3,"IsZeroConfig"],[3,"IsZeroChip"],[3,"LtChip"],[3,"LtConfig"],[3,"VirtualCells"],[8,"Layouter"],[3,"MulAddConfig"],[3,"MulAddChip"],[3,"U256"],[8,"IntoIterator"],[3,"Vec"],[8,"Expr"],[8,"IsZeroInstruction"],[8,"LtInstruction"],[8,"Scalar"]]},\
"gen_blockchain_data":{"doc":"","t":"FFFF","n":["deploy","erc20_transfer","main","send_confirm_tx"],"q":[[0,"gen_blockchain_data"]],"d":["","","",""],"i":[0,0,0,0],"f":[[[[2,[1]],3,4],[[5,[1]]]],[[[2,[1]],6,7,6,8],9],[[]],[[[2,[1]],9],10]],"c":[],"p":[[8,"Middleware"],[3,"Arc"],[3,"CompiledContract"],[8,"Tokenize"],[6,"Contract"],[6,"Address"],[3,"Contract"],[3,"U256"],[4,"TypedTransaction"],[3,"TransactionReceipt"]]},\
"geth_utils":{"doc":"Connection to external EVM tracer.","t":"ENLLLLLLLLLLFLLL","n":["Error","TracingError","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","into","to_owned","to_string","trace","try_from","try_into","type_id"],"q":[[0,"geth_utils"]],"d":["Error type for any geth-utils related failure.","Error while tracing.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Creates the trace","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1],"f":[0,0,[[]],[[]],[1,1],[[]],[[1,2],3],[[1,2],3],[[]],[[]],[[]],[[],4],[5,[[6,[4,1]]]],[[],6],[[],6],[[],7]],"c":[],"p":[[4,"Error"],[3,"Formatter"],[6,"Result"],[3,"String"],[15,"str"],[4,"Result"],[3,"TypeId"]]},\
"integration_tests":{"doc":"Integration testing","t":"RRRDRDDRMMMMLLLLLLMMLLLLLLLLLLLLLLLFFFFLLLALLLLFMMLLLLLLLLLLLLLLLMDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["CHAIN_ID","CONTRACTS","CONTRACTS_PATH","CompiledContract","GENDATA_OUTPUT_PATH","GETH0_URL","GenDataOutput","WARN","abi","bin","bin_runtime","blocks","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","coinbase","deployments","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","from","from","from","get_chain_id","get_client","get_provider","get_wallet","init","init","init","integration_test_circuits","into","into","into","load","log_init","name","path","serialize","serialize","store","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","wallets","BYTECODE_CIRCUIT_TEST","COPY_CIRCUIT_TEST","EVM_CIRCUIT_TEST","EXP_CIRCUIT_TEST","IntegrationTest","KECCAK_CIRCUIT_TEST","PI_CIRCUIT_TEST","STATE_CIRCUIT_TEST","SUPER_CIRCUIT_TEST","TX_CIRCUIT_TEST","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","test_at_block_tag","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"integration_tests"],[66,"integration_tests::integration_test_circuits"]],"d":["Geth dev chain ID","List of contracts as (ContractName, ContractSolidityFile)","Path to the test contracts","Solc-compiled contract output","Path to gen_blockchain_data output file","URL of the integration test geth0 instance, which contains …","Output information of the blockchain data generated by …","Solidity compilation warnings to ignore (by error code) …","ABI","Bytecode","Runtime Bytecode","Block map: BlockContent -&gt; BlockNum","","","","","","","Coinbase of the blockchain","Contracts deployed map: ContractName -&gt; (BlockNum, Address)","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the chain id by querying the geth client.","Get the integration test <code>GethClient</code>","Get the integration test <code>Provider</code>","Get a wallet by index","","","","Common code for integration tests of circuits.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Load <code>GenDataOutput</code> from the json file.","Initialize log","Contract name","Contract path","","","Store <code>GenDataOutput</code> into the json file.","","","","","","","","","","","","","Wallets used by <code>gen_blockchain_data</code>","Integration test for Bytecode circuit","Integration test for Copy circuit","Integration test for EVM circuit","Integration test for Exp circuit","Generic implementation for integration tests","Integration test for Keccak circuit","Integration test for Pi circuit","Integration test for State circuit","Integration test for Copy circuit","Integration test for State circuit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Run integration test at a block identified by a tag.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,7,7,7,5,1,5,7,1,5,7,5,5,1,1,5,7,1,5,7,5,7,1,5,7,1,5,7,0,0,0,0,1,5,7,0,1,5,7,5,0,7,7,5,7,5,1,5,7,1,5,7,1,5,7,1,5,7,5,0,0,0,0,0,0,0,0,0,0,20,17,22,24,26,28,30,32,34,36,20,17,22,24,26,28,30,32,34,36,20,17,17,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,20,17,22,24,26,28,30,32,34,36,20,17,22,24,26,28,30,32,34,36,20,17,22,24,26,28,30,32,34,36,20,17,22,24,26,28,30,32,34,36,20,17,22,24,26,28,30,32,34,36,20,20,17,22,24,26,28,30,32,34,36,20,17,22,24,26,28,30,32,34,36,20,17,22,24,26,28,30,32,34,36,20,17,22,24,26,28,30,32,34,36],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[1,2],[3],[3],[3],[3],[3],[3],[4,[[6,[5]]]],[4,[[6,[7]]]],[3],[3],[3],[[]],[[]],[[]],[[],8],[[],[[10,[9]]]],[[],[[11,[9]]]],[12,[[14,[13]]]],[[],3],[[],3],[[],3],0,[[]],[[]],[[]],[[],5],[[]],0,0,[[5,15],6],[[7,15],6],[5],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],16],[[],16],[[],16],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3],[3],[17,[[21,[[20,[[19,[18]]]]]]]],[3],[22,[[21,[[20,[[23,[18]]]]]]]],[3],[24,[[21,[[20,[[25,[18]]]]]]]],[3],[26,[[21,[[20,[[27,[18]]]]]]]],[3],[28,[[21,[[20,[[29,[18]]]]]]]],[30,[[21,[[20,[[31,[18]]]]]]]],[3],[3],[32,[[21,[[20,[[33,[18]]]]]]]],[34,[[21,[[20,[[35,[18]]]]]]]],[3],[3],[36,[[21,[[20,[[37,[18]]]]]]]],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[20,[[0,[[38,[18]],[39,[18]]]]]],40,41,41]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[3,"GETH0_URL"],[3,"String"],[15,"usize"],[8,"Deserializer"],[3,"GenDataOutput"],[4,"Result"],[3,"CompiledContract"],[15,"u64"],[3,"Provider"],[3,"GethClient"],[3,"Provider"],[15,"u32"],[6,"SigningKey"],[3,"Wallet"],[8,"Serializer"],[3,"TypeId"],[3,"EVM_CIRCUIT_TEST"],[3,"Fr"],[3,"EvmCircuit"],[3,"IntegrationTest"],[3,"Mutex"],[3,"STATE_CIRCUIT_TEST"],[3,"StateCircuit"],[3,"TX_CIRCUIT_TEST"],[3,"TxCircuit"],[3,"BYTECODE_CIRCUIT_TEST"],[3,"BytecodeCircuit"],[3,"COPY_CIRCUIT_TEST"],[3,"CopyCircuit"],[3,"KECCAK_CIRCUIT_TEST"],[3,"KeccakCircuit"],[3,"SUPER_CIRCUIT_TEST"],[3,"SuperCircuit"],[3,"EXP_CIRCUIT_TEST"],[3,"ExpCircuit"],[3,"PI_CIRCUIT_TEST"],[3,"PiCircuit"],[8,"SubCircuit"],[8,"Circuit"],[15,"str"],[15,"bool"]]},\
"mock":{"doc":"Mock types and functions to generate GethData used for …","t":"NEDDDDRDDDDDDDDDDDCNLMLMLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLMLMMLMLFFLMLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLMLMLLLLMMMMFLMMMLMALMLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLDDMLLLLMLLLLLLLLLMMLLLMMMLLLLFMAMLLLLLLLLLLLLLLLLLLFF","n":["Addr","AddrOrWallet","CORRECT_MOCK_TXS","MOCK_1_ETH","MOCK_ACCOUNTS","MOCK_BASEFEE","MOCK_BLOCK_GAS_LIMIT","MOCK_CHAIN_ID","MOCK_CODES","MOCK_COINBASE","MOCK_DEPLOYED_CONTRACT_BYTECODE","MOCK_DIFFICULTY","MOCK_GASLIMIT","MOCK_GASPRICE","MOCK_WALLETS","MockCallBytecodeParams","MockTransaction","Sha3CodeGen","TestContext","Wallet","access_list","access_list","address","address","as_wallet","block_hash","block_hash","block_number","block_number","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","call_data_length","call_data_offset","chain_id","clone","clone","clone_into","clone_into","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eth","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gas","gas","gas","gas_price","gas_price","gen_sha3_code","generate_mock_call_bytecode","gwei","hash","hash","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","input","input","instructions_after_call","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","max_fee_per_gas","max_fee_per_gas","max_priority_fee_per_gas","max_priority_fee_per_gas","mem_empty","mem_eq_size","mem_gt_size","mem_lt_size","nonce","offset","pushdata","r","rand_bytes","random","return_data_offset","return_data_size","s","sig_data","size","test_ctx","to","to","to_owned","to_owned","transaction_index","transaction_type","transaction_type","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","v","value","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","LoggerConfig","TestContext","accounts","borrow","borrow","borrow_mut","borrow_mut","chain_id","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","disable_stack","disable_storage","drop","drop","enable_memory","enable_memory","enable_return_data","eth_block","fmt","fmt","from","from","gen_geth_traces","geth_traces","helpers","history_hashes","init","init","into","into","new","new_with_logger_config","serialize","simple_ctx_with_bytecode","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","account_0_code_account_1_no_code","tx_from_1_to_0"],"q":[[0,"mock"],[294,"mock::test_ctx"],[345,"mock::test_ctx::helpers"]],"d":["","","Collection of correctly hashed and signed Transactions …","Mock 1 ETH","Mock accounts loaded with ETH to use for test cases.","Mock BASEFEE value","Mock block gas limit","Mock chain ID value","Mock EVM codes to use for test cases.","Mock coinbase value","Mock EVM bytecode for a deployed contract. PUSH1 0x20 …","Mock DIFFICULTY value","Mock GASLIMIT value","Mock gasprice value","Mock wallets used to generate correctly signed and hashed …","Holds the parameters for generating mock EVM bytecode for …","Mock structure which represents a Transaction and can be …","Generate Sha3 opcode","","","Set access_list field for the MockTransaction.","","Returns the underlying address associated to the …","The address to call with the generated bytecode","Returns the underlying wallet stored in the enum.","Set block_hash field for the MockTransaction.","","Set block_number field for the MockTransaction.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consumes the mutable ref to the MockTransaction returning …","The length of the call data.","The offset in memory where the call data will be stored.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate a <code>Word</code> which corresponds to a certain amount of …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Set from field for the MockTransaction.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Set gas field for the MockTransaction.","The amount of gas to be used for the contract call.","","Set gas_price field for the MockTransaction.","","Generate bytecode for SHA3 opcode after having populated …","Generate mock EVM bytecode that performs a contract call","Express an amount of ETH in GWei.","Tx Hash computed based on the fields of the Tx by default …","","","","","","","","","","","","","","","","","","Set input field for the MockTransaction.","","The instructions to be executed after the contract call.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Set max_fee_per_gas field for the MockTransaction.","","Set max_priority_fee_per_gas field for the MockTransaction.","","Construct with empty memory","Construct with memory equal to size","Construct with memory greater than size","Construct with memory less than size","","The offset","The data to be passed as arguments to the contract …","","Generate random bytes for the specified size.","Generates a random Wallet from a random secpk256 keypair","The offset in memory where the return data will be stored.","The size of the return data.","","Set sig_data field for the MockTransaction.","The size","Mock types and functions to generate Test enviroments for …","Set to field for the MockTransaction.","","","","","Set transaction_type field for the MockTransaction.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set value field for the MockTransaction.","","","","","","","","","","","","","","","","","","Configuration structure for <code>logger.Config</code>","TestContext is a type that contains all the information …","Account list","","","","","chain id","","","","","","","","","","disable stack capture","disable storage capture","","","","enable memory capture","enable return data capture","Block from geth","","","Returns the argument unchanged.","Returns the argument unchanged.","Generates execution traces for the transactions included …","Execution Trace from geth","Collection of helper functions which contribute to …","history hashes contains most recent 256 block hashes in …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new TestContext which starts with <code>NACC</code> default …","","","Returns a simple TestContext setup with a single tx …","","","","","","","","","","","Generate a simple setup which adds balance to two default …","Generate a single transaction from the second account of …"],"i":[3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,3,8,3,1,1,1,1,28,8,10,3,1,12,14,15,16,17,18,19,20,21,23,24,28,8,10,3,1,12,14,15,16,17,18,19,20,21,23,24,1,8,8,1,3,1,3,1,8,3,1,28,8,10,10,3,1,12,12,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,23,23,24,24,28,8,10,3,1,12,14,15,16,17,18,19,20,21,23,24,28,8,10,3,1,12,14,15,16,17,18,19,20,21,23,24,0,3,1,28,8,10,3,3,3,1,1,12,14,15,16,17,18,19,20,21,23,24,1,1,8,1,1,1,28,0,0,1,1,28,8,10,3,1,12,14,15,16,17,18,19,20,21,23,24,1,1,8,28,8,10,3,1,12,14,15,16,17,18,19,20,21,23,24,1,1,1,1,28,28,28,28,1,28,8,1,0,3,8,8,1,1,28,0,1,1,3,1,1,1,1,28,8,10,3,1,12,14,15,16,17,18,19,20,21,23,24,28,8,10,3,1,12,14,15,16,17,18,19,20,21,23,24,28,8,10,3,1,12,14,15,16,17,18,19,20,21,23,24,1,1,1,28,8,10,3,1,12,14,15,16,17,18,19,20,21,23,24,0,0,36,35,36,35,36,36,35,36,35,36,35,35,36,35,36,35,35,35,36,35,35,35,36,35,36,35,36,0,36,0,36,35,36,35,36,36,36,35,36,35,36,35,36,35,36,35,36,35,36,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],0,[3,4],0,[3,5],[[1,6],1],0,[[1,7],1],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],0,0,0,[3,3],[1,1],[[]],[[]],[[],8],[[],3],[[],1],[9],[9],[10,[[11,[1]]]],[9],[9],[9],[12,13],[9],[14,4],[9],[15,13],[9],[9],[16,13],[17,13],[9],[9],[18,13],[9],[19,13],[20,[[11,[4]]]],[9],[9],[21,[[11,[22]]]],[9],[23,[[11,[5]]]],[24,13],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[7,13],[[3,25],26],[[1,25],26],[[]],[[]],[[]],[[]],[5,3],[4,3],[[]],[[1,[27,[3]]],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[1,13],1],0,0,[[1,13],1],0,[28],[8,29],[7,13],[[1,6],1],0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[1,22],1],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,13],1],0,[[1,13],1],0,[[9,9],28],[[9,9],28],[[9,9],28],[[9,9],28],0,0,0,0,[9,[[11,[30]]]],[[[0,[31,32]]],3],0,0,0,[1,1],0,0,[[1,[27,[3]]],1],0,[[]],[[]],0,[[1,7],1],0,[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],0,[[1,13],1],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],0,[35,35],[36,36],[[]],[[]],[[],35],[9],[9],[9],[9],0,0,[9],[9],[[],35],0,0,0,[[35,25],[[33,[37]]]],[[36,25],26],[[]],[[]],[[13,[39,[38]],[11,[40]],[41,[[11,[13]]]],35],[[33,[[11,[42]],43]]]],0,0,0,[[],9],[[],9],[[]],[[]],[[[41,[[11,[13]]]],44,44,44],[[33,[36,43]]]],[[[41,[[11,[13]]]],44,44,44,35],[[33,[36,43]]]],[[35,45],33],[29,[[33,[36,43]]]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],34],[[],34],[[]],[[]],[29,44],[[[11,[1]]]]],"c":[],"p":[[3,"MockTransaction"],[3,"AccessList"],[4,"AddrOrWallet"],[6,"Address"],[6,"LocalWallet"],[6,"Hash"],[15,"u64"],[3,"MockCallBytecodeParams"],[15,"usize"],[3,"CORRECT_MOCK_TXS"],[3,"Vec"],[3,"MOCK_1_ETH"],[6,"Word"],[3,"MOCK_COINBASE"],[3,"MOCK_GASPRICE"],[3,"MOCK_BASEFEE"],[3,"MOCK_GASLIMIT"],[3,"MOCK_CHAIN_ID"],[3,"MOCK_DIFFICULTY"],[3,"MOCK_ACCOUNTS"],[3,"MOCK_CODES"],[3,"Bytes"],[3,"MOCK_WALLETS"],[3,"MOCK_DEPLOYED_CONTRACT_BYTECODE"],[3,"Formatter"],[6,"Result"],[8,"Into"],[3,"Sha3CodeGen"],[3,"Bytecode"],[15,"u8"],[8,"RngCore"],[8,"CryptoRng"],[4,"Result"],[3,"TypeId"],[3,"LoggerConfig"],[3,"TestContext"],[3,"Error"],[3,"Transaction"],[3,"Block"],[3,"Account"],[4,"Option"],[3,"GethExecTrace"],[4,"Error"],[8,"FnOnce"],[8,"Serializer"]]},\
"testool":{"doc":"","t":"DRERALLLLNLLLLMMAALLLLLLLLLLLLLLLLFLLLMLLLLLLMMFMMFNAMLLLLLLLLLLLAMLLFDDDDDDDDNDNEDENDDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLMMMLLLMMMMLMLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLMMMMMLLLLLLLLLLLLMMLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRDDDDDMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLMMMMMMMLMMMLLLLLLLLLLLLLLLLLLLLLLLLLCCCCCCCCCCACACAACCAAANNDNNNNNENLLLLFLLLLLLLLLLLLLLLLLFLLLLFLLFMLLLLLLLLLLMMMMMMMMMMMDDNDNDDDEDDDMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLMLMMMLLLLMMMMMMMLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLGFFFFFFFFFDDNNRNDDEDDNMLLLLLLLLLLLLLLMMMLLLLLLLMLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLMMLLLLMMMLLLLLLLMMMMLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDGMMLLLLLLLLLLLLMMMMMMMLLLLLLLLLLMLLLLLLLLLMLLLLLLLMMMMLLLLLLMMLMMMMMMMLLLLLLLLLLLLLLMLLLFFNNGNEDDLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNENNNRNLLFFFLLLLLLLLLLLLLFLLLL","n":["Args","CODEHASH_FILE","Circuits","REPORT_FOLDER","abi","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","basic","borrow","borrow","borrow_mut","borrow_mut","cache","circuits","compiler","config","deref","deref","deref_mut","deref_mut","drop","drop","eq","fmt","fmt","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_str","go","has_subcommand","init","init","inspect","into","into","into_app","into_app","into_app_for_update","into_app_for_update","levels","ls","main","oneliner","report","run_single_test","sc","statetest","suite","try_from","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","utils","v","vzip","vzip","encode_funccall","BytecodeResult","Cache","CompilationError","CompilationResult","Compiler","CompilerInput","CompilerSettings","Contract","Error","Evm","Info","Language","Optimizer","Severity","Solidity","Source","SourceLocation","Warning","Yul","asm","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytecode","cache","compile","component","content","contracts","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","details","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","enabled","end","entries","eq","equivalent","equivalent","error_code","error_type","errors","evm","exec","file","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","formatted_message","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","hash","init","init","init","init","init","init","init","init","init","init","init","init","init","init","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","language","lll","message","new","new","new_default","object","opcodes","optimizer","output_selection","path","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","settings","severity","solc","solidity","source_location","source_map","sources","start","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","yul","CONFIG_FILE","Config","SkipPaths","SkipTests","TestSuite","TestsSet","allow_tests","allowed","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","desc","desc","desc","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","id","id","ignore_tests","init","init","init","init","init","into","into","into","into","into","load","max_gas","max_steps","path","paths","set","skip_paths","skip_tests","suite","suite","tests","tests","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","AccountMatch","CircuitsConfig","Env","JsonStateTestBuilder","ResultLevel","Results","StateTest","StateTestError","StateTestResult","YamlStateTestBuilder","executor","geth_trace","json","load_statetests_suite","parse","results","run_statetests_suite","run_test","spec","suite","yaml","BalanceMismatch","CircuitInput","CircuitsConfig","CodeMismatch","Exception","NonceMismatch","SkipTestMaxGasLimit","SkipTestMaxSteps","StateTestError","StorageMismatch","borrow","borrow","borrow_mut","borrow_mut","check_post","clone","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","geth_trace","init","init","into","into","into_traceconfig","is_skip","provide","run_test","super_circuit","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","expected","expected","expected","expected","expected","found","found","found","found","found","slot","AccountPost","AccountPre","Any","Expect","Index","Indexes","JsonStateTest","JsonStateTestBuilder","Ref","Refs","TestEnv","Transaction","balance","balance","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","code","code","compiler","contains_index","current_coinbase","current_difficulty","current_gas_limit","current_number","current_timestamp","data","data","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","env","expect","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","gas","gas_limit","gas_price","indexes","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","load_json","network","new","nonce","nonce","nonce","parse_accounts_post","parse_accounts_pre","parse_env","parse_refs","pre","previous_hash","result","secret_key","storage","storage","to","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transaction","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Label","decompose_tags","parse_address","parse_bytes","parse_calldata","parse_code","parse_hash","parse_to_address","parse_u256","parse_u64","DiffEntry","Diffs","Fail","Ignored","MAX_DETAILS_LEN","Panic","Report","ResultInfo","ResultLevel","ResultLevelIter","Results","Success","back_idx","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_folder","by_result","cache","clone","clone","clone","clone_into","clone_into","clone_into","contains","curr","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","details","diffs","display_string","drop","drop","drop","drop","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from","from","from_file","from_str","gen_html","gen_info","get","hash","id","idx","init","init","init","init","init","init","init","insert","into","into","into","into","into","into","into","into_iter","iter","len","level","marker","next","next_back","nth","par_bridge","path","prev","previous","print_tty","report","serialize","serialize","set_cache","size_hint","success","test_id","tests","tests","tests","to_bytes","to_owned","to_owned","to_owned","to_units","to_utf16chars","to_utf8chars","trim","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_cache","AccountMatch","Env","StateTest","StateTestResult","address","balance","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","code","current_coinbase","current_difficulty","current_gas_limit","current_number","current_timestamp","data","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","env","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","exception","fmt","fmt","fmt","fmt","from","from","from","from","gas_limit","gas_price","id","init","init","init","into","into","into","nonce","nonce","parse_oneline_spec","path","pre","previous_hash","result","secret_key","storage","to","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","value","vzip","vzip","vzip","load_statetests_suite","run_statetests_suite","Any","Index","Label","Label","Ref","Refs","YamlStateTestBuilder","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compiler","contains_index","contains_label","decompose_tags","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","from","from","from","init","init","init","into","into","into","load_yaml","new","parse_accounts","parse_address","parse_bytes","parse_calldata","parse_code","parse_env","parse_hash","parse_refs","parse_to_address","parse_u256","parse_u64","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Altair","ArrowGlacier","Berlin","Byzantium","Constantinople","Frontier","GrayGlacier","Homestead","Istanbul","London","MainnetFork","Merge","MuirGlacier","SpuriousDragon","TEST_FORK","TangerineWhistle","borrow","borrow_mut","bytecode_of","current_git_commit","current_submodule_git_commit","deref","deref_mut","drop","eq","equivalent","equivalent","fmt","from","from_str","in_network_range","init","into","partial_cmp","print_trace","try_from","try_into","type_id","vzip"],"q":[[0,"testool"],[69,"testool::abi"],[70,"testool::compiler"],[340,"testool::config"],[452,"testool::statetest"],[473,"testool::statetest::executor"],[525,"testool::statetest::executor::StateTestError"],[536,"testool::statetest::json"],[746,"testool::statetest::parse"],[756,"testool::statetest::results"],[920,"testool::statetest::spec"],[1011,"testool::statetest::suite"],[1013,"testool::statetest::yaml"],[1077,"testool::utils"]],"d":["EVM test vectors utility","","","","Execute the bytecode from an empty state and run the EVM …","","","","","","","","","","Cache execution results","Circuits to execute, can be basic (evm only) or sc …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Execute only one test and dump the results","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","whitelist level from cache result","Do not execute any test, just list collected tests","","Run statetest in oneliner spec","Generates log and and html file with info.","","","","Suite (by default is “default”)","","","","","","","","","","","","","Verbose","","","encodes an abi call (e.g. “f(uint) 1”)","","","","","","","","","","","","","","","","","","","","compiles ASM code","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","compiles LLL code","","","","","","","","","","","","","","","","","","","","","","","","","compiles Solidity code","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","compiles YUL code","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","generates <code>StateTest</code> vectors from a ethereum josn test …","","","","","","parse a vector of address=&gt;(storage,balance,code,nonce) …","parse a vector of address=&gt;(storage,balance,code,nonce) …","parse env section","parse a unique or a list of references, -1 =&gt; Ref::Any a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","converts list of tagged values string into a map if there…","returns the element as an address","returns the element as an array of bytes","returns the element as calldata bytes, supports 0x, :raw, …","parse entry as code, can be 0x, :raw or { LLL }","parse a hash entry","returns the element as a to address","parse an uint256 entry","parse u64 entry","","","","","","","","","","An iterator over the variants of Self","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","converts list of tagged values string into a map if there…","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","generates <code>StateTest</code> vectors from a ethereum yaml test …","","parse a vector of address=&gt;(storage,balance,code,nonce) …","returns the element as an address","returns the element as an array of bytes","returns the element as calldata bytes, supports 0x, :raw, …","parse entry as code, can be 0x, :raw, :yul or { LLL }","parse env section","parse a hash entry","parse a unique or a list of references, -1 =&gt; Ref::Any a …","returns the element as a to address","parse an uint256 entry","parse u64 entry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,7,7,3,3,3,3,7,3,7,7,7,0,0,3,7,3,7,3,7,3,3,7,3,7,3,7,3,7,3,0,3,3,7,7,3,7,3,7,3,7,7,7,0,7,7,0,3,0,7,3,3,7,3,7,3,7,3,7,3,7,0,7,3,7,0,0,0,0,0,0,0,0,0,29,0,29,0,0,0,22,0,0,29,22,17,32,21,22,18,19,23,24,25,26,27,28,29,30,17,32,21,22,18,19,23,24,25,26,27,28,29,30,17,26,17,17,28,23,24,18,19,17,32,21,22,18,19,23,24,25,26,27,28,29,30,17,32,21,22,18,19,23,24,25,26,27,28,29,30,17,21,22,18,19,23,24,25,26,27,28,29,30,19,32,21,22,18,19,23,24,25,26,27,28,29,30,17,19,30,32,29,29,29,28,28,24,25,17,30,21,22,18,19,23,24,25,26,27,28,29,30,28,32,21,22,18,19,23,24,25,26,27,28,29,30,17,32,32,32,21,22,18,19,23,24,25,26,27,28,29,30,17,32,32,21,22,18,19,23,24,25,26,27,28,29,30,17,21,17,28,32,17,21,27,27,18,18,32,21,22,18,19,23,24,25,26,27,28,29,30,21,28,17,17,28,27,21,30,32,21,22,18,19,23,24,25,26,27,28,29,30,17,32,21,22,18,19,23,24,25,26,27,28,29,30,17,32,21,22,18,19,23,24,25,26,27,28,29,30,17,32,21,22,18,19,23,24,25,26,27,28,29,30,17,17,0,0,0,0,0,0,37,37,38,37,39,40,41,38,37,39,40,41,38,37,39,40,41,38,37,39,40,41,37,38,37,39,40,41,38,37,39,40,41,39,40,41,38,37,39,40,41,38,37,39,40,41,38,37,39,40,41,38,37,39,40,41,37,39,37,38,37,39,40,41,38,37,39,40,41,38,37,37,37,40,38,38,38,38,38,39,41,38,37,39,40,41,38,37,39,40,41,38,37,39,40,41,38,37,39,40,41,38,37,39,40,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,47,0,47,47,47,47,47,0,47,47,14,47,14,0,14,14,14,47,14,47,14,47,14,47,47,47,47,47,14,47,14,0,47,14,47,14,0,47,47,0,14,14,47,47,14,47,14,47,14,47,14,86,87,88,89,90,86,87,88,89,90,89,0,0,57,0,57,0,0,0,0,0,0,0,52,53,58,59,50,51,52,53,54,55,56,57,58,59,50,51,52,53,54,55,56,57,50,51,52,53,54,55,56,57,50,51,52,53,54,55,56,57,52,53,59,58,50,50,50,50,50,51,56,58,59,50,51,52,53,54,55,56,57,58,59,50,51,52,53,54,55,56,57,50,51,52,53,54,55,56,58,59,50,51,52,53,54,55,56,57,55,55,50,51,52,53,54,55,56,57,58,59,50,51,52,53,54,55,56,57,51,56,56,54,58,59,50,51,52,53,54,55,56,57,58,59,50,51,52,53,54,55,56,57,59,54,59,52,53,56,59,59,59,59,55,50,54,56,52,53,56,50,51,52,53,54,55,56,57,55,58,59,50,51,52,53,54,55,56,57,58,59,50,51,52,53,54,55,56,57,58,59,50,51,52,53,54,55,56,57,51,56,58,59,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,0,0,66,66,0,66,0,0,0,0,0,66,67,91,71,70,66,67,68,69,91,71,70,66,67,68,69,70,70,69,66,67,68,66,67,68,69,91,69,91,71,70,66,67,68,69,91,71,70,66,67,68,69,66,68,68,70,66,91,71,70,66,67,68,69,66,68,66,66,68,68,66,68,91,71,70,66,67,68,69,69,66,70,71,67,66,91,67,91,71,70,66,67,68,69,69,91,71,70,66,67,68,69,67,66,67,68,67,67,67,67,67,68,91,71,70,69,66,68,69,67,69,68,71,70,69,67,66,67,68,67,67,67,0,91,71,70,66,66,67,68,69,91,71,70,66,67,68,69,91,71,70,66,67,68,69,91,71,70,66,67,68,69,69,0,0,0,0,45,45,62,45,13,62,45,13,62,45,13,62,45,13,45,62,62,62,62,62,13,45,62,45,13,62,45,13,62,45,13,13,62,45,13,62,62,45,45,13,13,13,62,45,13,13,62,45,13,13,13,13,13,62,45,13,62,45,13,45,13,13,13,13,62,13,13,45,13,62,45,13,13,62,45,13,62,45,45,13,62,45,13,13,62,45,13,0,0,78,78,0,78,0,0,0,79,80,78,79,80,78,78,78,80,79,79,80,79,80,78,79,80,78,79,80,78,78,79,80,78,79,80,78,79,80,78,80,80,80,80,80,80,80,80,80,80,80,80,80,78,79,80,78,79,80,78,79,80,78,79,80,78,83,83,83,83,83,83,83,83,83,83,0,83,83,83,0,83,83,83,0,0,0,83,83,83,83,83,83,83,83,83,83,83,83,83,0,83,83,83,83],"f":[0,0,0,0,0,[1,1],[1,1],[1,1],[1,1],0,[[]],[[]],[[]],[[]],0,0,0,0,[2],[2],[2],[2],[2],[2],[[3,3],4],[[3,5],6],[[7,5],6],[[]],[[]],[8,[[10,[3,9]]]],[8,[[10,[7,9]]]],[8,[[10,[3,9]]]],[8,[[10,[7,9]]]],[11,[[10,[3]]]],[[],12],[11,4],[[],2],[[],2],0,[[]],[[]],[[],1],[[],1],[[],1],[[],1],0,0,[[]],0,0,[[13,14],12],0,0,0,[11,[[10,[3]]]],[[],10],[[],10],[[],10],[[],10],[[],15],[[],15],[[3,8],[[10,[9]]]],[[7,8],[[10,[9]]]],[[3,8],[[10,[9]]]],[[7,8],[[10,[9]]]],0,0,[[]],[[]],[11,[[12,[16]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[17,11],[[12,[16]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[],18],[[],19],[[],17],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[20,[[10,[21]]]],[20,[[10,[22]]]],[20,[[10,[18]]]],[20,[[10,[19]]]],[20,[[10,[23]]]],[20,[[10,[24]]]],[20,[[10,[25]]]],[20,[[10,[26]]]],[20,[[10,[27]]]],[20,[[10,[28]]]],[20,[[10,[29]]]],[20,[[10,[30]]]],0,[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],0,0,0,[[29,29],4],[[],4],[[],4],0,0,0,0,[11,[[12,[31]]]],0,[[21,5],6],[[22,5],6],[[18,5],6],[[19,5],6],[[23,5],6],[[24,5],6],[[25,5],6],[[26,5],6],[[27,5],6],[[28,5],6],[[29,5],6],[[30,5],6],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[32,11],[[33,[16]]]],[11,34],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[32,11,16],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[17,11],[[12,[16]]]],0,[35,[[12,[32]]]],[[4,[33,[35]]],[[12,[17]]]],[[22,11],21],0,0,0,0,0,[[21,36],10],[[22,36],10],[[18,36],10],[[19,36],10],[[23,36],10],[[24,36],10],[[25,36],10],[[26,36],10],[[27,36],10],[[28,36],10],[[29,36],10],[[30,36],10],0,0,[[17,22,11],[[12,[16]]]],[[17,11],[[12,[16]]]],0,0,0,0,[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[17,11],[[12,[16]]]],0,0,0,0,0,0,0,[[37,11],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38,38],[37,37],[39,39],[40,40],[41,41],[[]],[[]],[[]],[[]],[[]],[[],37],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],0,0,0,[20,[[10,[38]]]],[20,[[10,[37]]]],[20,[[10,[39]]]],[20,[[10,[40]]]],[20,[[10,[41]]]],[2],[2],[2],[2],[2],[[38,5],6],[[37,5],6],[[39,5],6],[[40,5],6],[[41,5],6],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[],[[12,[38]]]],0,0,0,0,0,0,0,[[38,11],[[12,[37]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[43,[42]],[46,[44,45]]],[[10,[47]]]],[14,14],[[]],[[],14],[2],[2],[2],[2],[2],[2],[[47,47],4],[[],4],[[],4],[[47,5],6],[[47,5],6],[[14,5],6],[[]],[[]],[13,[[10,[48,47]]]],[[],2],[[],2],[[]],[[]],[13],[47,4],[49],[[13,37,14],[[10,[47]]]],0,[[]],[[],31],[[],10],[[],10],[[],10],[[],10],[[],15],[[],15],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[58,2],4],0,0,0,0,0,0,0,[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[20,[[10,[50]]]],[20,[[10,[51]]]],[20,[[10,[52]]]],[20,[[10,[53]]]],[20,[[10,[54]]]],[20,[[10,[55]]]],[20,[[10,[56]]]],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],0,0,[[50,5],6],[[51,5],6],[[52,5],6],[[53,5],6],[[54,5],6],[[55,5],6],[[56,5],6],[[57,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[59,11,11],[[12,[[60,[13]]]]]],0,[17,59],0,0,0,[[59,[46,[31,52]]],[[12,[[46,[44,45]]]]]],[[59,[46,[31,53]]],[[12,[[46,[44,61]]]]]],[50,[[12,[62]]]],[63,[[12,[58]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[11,[[46,[31,31]]]],[11,[[12,[44]]]],[11,[[12,[16]]]],[[17,11],12],[[17,11],[[12,[16]]]],[11,[[12,[34]]]],[11,[[12,[[33,[44]]]]]],[11,[[12,[64]]]],[11,[[12,[65]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[66,66],[67,67],[68,68],[[]],[[]],[[]],[[69,11],4],0,[[],69],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[20,[[10,[66]]]],[20,[[10,[68]]]],0,0,[66,31],[2],[2],[2],[2],[2],[2],[2],[[66,66],4],[[68,68],4],[[],4],[[],4],[[],4],[[],4],[[66,5],6],[[68,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35,[[12,[69]]]],[11,[[10,[66]]]],[[70,31],[[12,[31]]]],[71],[[67,2],[[33,[66]]]],[[66,72]],0,0,[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[69,68],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],67],[67,2],0,0,[67,33],[67,33],[[67,2],33],[[],73],0,0,0,[70,12],[[69,33],70],[[66,36],10],[[68,36],10],[[69,35]],[67],[69,4],0,0,0,0,[[],74],[[]],[[]],[[]],[[],75],[[],76],[[],77],[[11,2],11],[[],10],[[],10],[[],10],[11,[[10,[66]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35,[[12,[69]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[62,62],[45,45],[13,13],[[]],[[]],[[]],0,0,0,0,0,0,0,[[],45],[2],[2],[2],[2],[2],[2],[2],[2],[2],0,[[62,62],4],[[45,45],4],[[13,13],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],0,[[62,5],6],[[45,5],6],[[13,5],6],[[13,5],6],[[]],[[]],[[]],0,0,0,0,[[],2],[[],2],[[],2],[[]],[[]],[[]],0,0,[11,[[12,[13]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[],31],[[],10],[[],10],[[],10],[[],10],[45,[[10,[61]]]],[[],10],[[],10],[[],15],[[],15],[[],15],0,[[]],[[]],[[]],[[11,38,17],[[12,[[60,[13]]]]]],[[[60,[13]],14,37,69],12],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[78,78],[[]],0,[[79,2],4],[[79,11],4],[11,[[46,[31,31]]]],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[78,5],6],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[80,11,11],[[12,[[60,[13]]]]]],[17,80],[[80,81],[[12,[[46,[44,45]]]]]],[81,[[12,[44]]]],[81,[[12,[16]]]],[[80,81],12],[[80,81],[[12,[16]]]],[81,[[12,[62]]]],[81,[[12,[34]]]],[81,[[12,[79]]]],[81,[[12,[[33,[44]]]]]],[81,[[12,[64]]]],[81,[[12,[65]]]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],15],[[],15],[[],15],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[11,[[12,[82]]]],[[],[[12,[31]]]],[[],[[12,[31]]]],[2],[2],[2],[[83,83],4],[[],4],[[],4],[[83,5],6],[[]],[11,[[12,[83]]]],[[],[[12,[4,84]]]],[[],2],[[]],[[83,83],[[33,[85]]]],[48,12],[[],10],[[],10],[[],15],[[]]],"c":[],"p":[[6,"Command"],[15,"usize"],[4,"Circuits"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Args"],[3,"ArgMatches"],[3,"Error"],[4,"Result"],[15,"str"],[6,"Result"],[3,"StateTest"],[3,"CircuitsConfig"],[3,"TypeId"],[3,"Bytes"],[3,"Compiler"],[3,"CompilerSettings"],[3,"Optimizer"],[8,"Deserializer"],[3,"CompilerInput"],[4,"Language"],[3,"Source"],[3,"CompilationResult"],[3,"Contract"],[3,"Evm"],[3,"BytecodeResult"],[3,"CompilationError"],[4,"Severity"],[3,"SourceLocation"],[3,"String"],[3,"Cache"],[4,"Option"],[3,"H256"],[3,"PathBuf"],[8,"Serializer"],[3,"TestSuite"],[3,"Config"],[3,"TestsSet"],[3,"SkipPaths"],[3,"SkipTests"],[3,"FixedCParams"],[3,"CircuitInputBuilder"],[6,"Address"],[3,"AccountMatch"],[3,"HashMap"],[4,"StateTestError"],[3,"GethExecTrace"],[3,"Demand"],[3,"TestEnv"],[3,"Indexes"],[3,"AccountPost"],[3,"AccountPre"],[3,"Expect"],[3,"JsonStateTest"],[3,"Transaction"],[4,"Ref"],[3,"Refs"],[3,"JsonStateTestBuilder"],[3,"Vec"],[3,"Account"],[3,"Env"],[4,"Value"],[3,"U256"],[15,"u64"],[4,"ResultLevel"],[3,"ResultLevelIter"],[3,"ResultInfo"],[3,"Results"],[3,"Report"],[3,"Diffs"],[8,"Hasher"],[3,"IterBridge"],[3,"Utf8CharSplitter"],[3,"Utf16CharSplitter"],[3,"Utf16CharMerger"],[3,"Utf8CharMerger"],[4,"Ref"],[3,"Refs"],[3,"YamlStateTestBuilder"],[4,"Yaml"],[3,"Bytecode"],[4,"MainnetFork"],[3,"Error"],[4,"Ordering"],[13,"BalanceMismatch"],[13,"NonceMismatch"],[13,"CodeMismatch"],[13,"StorageMismatch"],[13,"Exception"],[3,"DiffEntry"]]},\
"zkevm_circuits":{"doc":"zk_evm","t":"OOOOOOOOAOAOAAAOOOAAOAAOAAAAAAAACADDDLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMLLLLLLLLLLLLLLLLLLAAAAADIDMLLLLLLLLLLLLLLLLMLLLLLLKLLLLMMLLLLLLLLLLDDIEDNNNLLLLLLLLLKLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMLKLMLLLLLLLLLLLLLLLLLLLLDDIIDIIIIIIKLLLLLLLMLLLLLLMMLLLLLLMMLLLMMLLLLLLLLLLMMMKLMMKKKKKKKMMMKLLLKLLLLLLLLLMLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDCMLLLLLLLLLLMMMMLLLLLLLMMMLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMMMMMMMLLLLLLMMMMMMLLLLLLLLLLLLLMMMLLLLLMMLLLLLDDDCMMLLLLLLMMLLLLLMLLLLLLLLLLMMLLLLLLLLLLLMLLLLLAMALLALLLLLLLLMLLLMMLLLLLCRRRRRRRRRRRRRRRNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNEDNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNEDNNNNNNNNNNNNNEDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDCLLLLLLLLLLLLLLLLLMMLLLLLLLLMLMLLLMMLLLLLLLLLLLLLLDDDDMMMMLLLLLLLLMMMMLLLLLLLLMLLLLLLLLLLLLMLLLLLLLLLLLLMMMMLLLLLMMLLLLLLLLMMMMMFMMMMLLLLMLLLLLLLLMLLLLMLLLLDDDCCLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLAMMLLLLLLLLLLLLLLLLLLLLLLNNENNDDDDNNNNNNNEDNMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMFLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLADDDDRRRRDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLDDDCMLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLMLLLLLLLLLLMLLLLLLLLDRDGDGGGGRDGGGDGDDDCLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDCLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMMLLLLLLLLLLLLLLLLLMMMLLLLLLDDDDLLLLLLLLLLMMLLLLLLMLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLMMMLMMLLLMMLLLLLLLLLLLLMLLLLLLLLLLEDNEDNNNNNNNNNNNNNNNNNINNNNNNNNNNNLLLKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLCDDDLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMLLLLLAMLLLLLLLLLLMMLLLLLLLLDMMLLLLLLLLLLLLMLLLLLLLMGDQQISIIDLLLLLLLLLLLLLLLLLLLLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLFLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLFLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLALDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLMLLLLLLLLDIDLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLNNDDDNDNDDDEDDNNDNNNNNMMFLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMLLMLLMLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMMLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLMMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLMMMMMMLMMLLLMLLLMMMMMMMMLLMMMLMLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM","n":["_cb","_ifx","_matchx","_require","_require2","_unreachablex","assign","assignf","bytecode_circuit","circuit","circuit_tools","concat_with_preamble","copy_circuit","evm_circuit","exp_circuit","impl_expr","impl_expr_result","impl_expr_vec","instance","keccak_circuit","matchw","mpt_circuit","pi_circuit","require_parser","root_circuit","state_circuit","super_circuit","table","test_util","tx_circuit","util","witness","TestBytecodeCircuit","circuit","BytecodeCircuit","BytecodeCircuitConfig","BytecodeCircuitConfigArgs","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bytecode_table","challenges","clone","clone","clone_into","clone_into","configure","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","from","from","from","init","init","init","into","into","into","keccak_table","min_num_rows_block","new","new","new_from_block","size","synthesize","synthesize_sub","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unusable_rows","vzip","vzip","vzip","without_witnesses","cached_region","cell_manager","constraint_builder","gadgets","memory","CachedRegion","ChallengeSet","StoredExpression","advice","assign","assign_advice","assign_fixed","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","constrain_constant","deref","deref","deref_mut","deref_mut","drop","drop","fixed","fmt","from","from","get_advice","get_fixed","hash","indexed","init","init","into","into","keccak_r","key_r","name_column","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CellConfig","CellManager","CellType","DefaultCellType","DynamicLookupTable","StoragePhase1","StoragePhase2","StoragePhase3","annotations","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_type","byte_type","cell_type","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","columns","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","equivalent","equivalent","expr_phase","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","init","init","init","init","init_columns","into","into","into","into","is_permute","num_columns","partial_cmp","phase","storage_for_expr","storage_for_phase","storage_for_phase","table","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","ConstraintBuilder","DynamicData","ExprResult","ExprVec","ExpressionVec","RLCChainable","RLCChainableRev","RLCChainableValue","RLCable","RLCableValue","ToVec","add","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cell_manager","clone","clone","clone","clone_into","clone_into","clone_into","compress","condition","deref","deref","deref","deref_mut","deref_mut","deref_mut","description","disable_description","drop","drop","drop","dynamic_lookups","dynamic_tables","fmt","from","from","from","init","init","init","into","into","into","is_fixed","lookup_challenge","lookups","mul","mul","region_id","region_id","rlc","rlc_chain","rlc_chain_rev","rlc_chain_value","rlc_rev","rlc_value","rlc_value_rev","state_constraints_start","state_context","stored_expressions","to_expr_vec","to_owned","to_owned","to_owned","to_vec","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","values","vzip","vzip","vzip","IsEqualGadget","IsEqualWordGadget","IsZeroGadget","LtGadget","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","CopyCircuit","CopyCircuitConfig","CopyCircuitConfigArgs","ExternalData","TestCopyCircuit","addr_lt_addr_end","assign_copy_event","assign_copy_events","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytecode_table","bytecode_table","bytecodes","challenges","clone","clone","clone","clone_into","clone_into","clone_into","configure","copy_events","copy_table","copy_table","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","external_data","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","is_code","is_last","is_pad","max_calldata","max_copy_rows","max_rws","max_txs","min_num_rows_block","new","new","new_from_block","new_from_block_no_external","new_with_external_data","q_enable","q_enable","q_step","rw_table","rw_table","rws","synthesize","synthesize_sub","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tx_table","tx_table","txs","type_id","type_id","type_id","type_id","unusable_rows","value","value_acc_rlc","vzip","vzip","vzip","vzip","without_witnesses","EvmCircuit","EvmCircuitConfig","EvmCircuitConfigArgs","TestEvmCircuit","block","block_table","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bytecode_table","challenges","clone","clone","clone_into","clone_into","configure","copy_table","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","execution","exp_table","fmt","fmt","from","from","from","init","init","init","into","into","into","keccak_table","load_fixed_table","min_num_rows_block","new","new","new_from_block","param","rw_table","step","synthesize","synthesize_sub","table","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","tx_table","type_id","type_id","type_id","u16_table","u8_table","unusable_rows","vzip","vzip","vzip","without_witnesses","witness","BLOCK_TABLE_LOOKUPS","BYTECODE_TABLE_LOOKUPS","COPY_TABLE_LOOKUPS","EXP_TABLE_LOOKUPS","FIXED_TABLE_LOOKUPS","KECCAK_TABLE_LOOKUPS","LOOKUP_CONFIG","MAX_STEP_HEIGHT","N_COPY_COLUMNS","N_PHASE1_COLUMNS","N_PHASE2_COLUMNS","N_U16_LOOKUPS","N_U8_LOOKUPS","RW_TABLE_LOOKUPS","TX_TABLE_LOOKUPS","ADDMOD","ADDRESS","ADD_SUB","BALANCE","BITWISE","BLOCKCTX","BLOCKHASH","BYTE","BeginTx","CALLDATACOPY","CALLDATALOAD","CALLDATASIZE","CALLER","CALLVALUE","CALL_OP","CHAINID","CMP","CODECOPY","CODESIZE","CREATE","CREATE2","DUP","EXP","EXTCODECOPY","EXTCODEHASH","EXTCODESIZE","EndBlock","EndTx","ErrorCodeStore","ErrorContractAddressCollision","ErrorDepth","ErrorInsufficientBalance","ErrorInvalidCreationCode","ErrorInvalidJump","ErrorInvalidOpcode","ErrorOutOfGasAccountAccess","ErrorOutOfGasCREATE2","ErrorOutOfGasCall","ErrorOutOfGasConstant","ErrorOutOfGasDynamicMemoryExpansion","ErrorOutOfGasEXP","ErrorOutOfGasEXTCODECOPY","ErrorOutOfGasLOG","ErrorOutOfGasMemoryCopy","ErrorOutOfGasSELFDESTRUCT","ErrorOutOfGasSHA3","ErrorOutOfGasSloadSstore","ErrorOutOfGasStaticMemoryExpansion","ErrorReturnDataOutOfBound","ErrorStack","ErrorWriteProtection","ExecutionState","ExecutionStateIter","GAS","GASPRICE","ISZERO","InvalidStackPtr","JUMP","JUMPDEST","JUMPI","LOG","MEMORY","MSIZE","MULMOD","MUL_DIV_MOD","NOT","ORIGIN","Op","PC","POP","PUSH","RETURNDATACOPY","RETURNDATASIZE","RETURN_REVERT","ResponsibleOp","SAR","SCMP","SDIV_SMOD","SELFBALANCE","SELFDESTRUCT","SHA3","SHL_SHR","SIGNEXTEND","SLOAD","SSTORE","STOP","SWAP","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from","from","from","get_step_height_option","hash","init","init","init","into","into","into","into_iter","iter","len","next","next_back","nth","opcode","par_bridge","responsible_opcodes","size_hint","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","BitwiseAnd","BitwiseOr","BitwiseXor","Block","Bytecode","ConstantGasCost","Copy","Exp","Fixed","FixedTableTag","FixedTableTagIter","Keccak","Pow2","Range1024","Range128","Range16","Range256","Range32","Range5","Range512","Range64","ResponsibleOpcode","Rw","SignByte","Table","TableIter","Tx","U16","U8","Zero","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","equivalent","equivalent","expr","fmt","fmt","from","from","from","from","hash","init","init","init","init","into","into","into","into","into_iter","into_iter","iter","iter","len","len","next","next","next_back","next_back","nth","nth","par_bridge","par_bridge","partial_cmp","scalar","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","ExpCircuit","ExpCircuitConfig","TestExpCircuit","assign_exp_events","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","configure","default","deref","deref","deref_mut","deref_mut","drop","drop","exp_events","exp_table","fmt","fmt","from","from","init","init","into","into","max_exp_rows","min_num_rows_block","mul_gadget","new","new","new_from_block","parity_check","q_usable","synthesize","synthesize_sub","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unusable_rows","vzip","vzip","without_witnesses","BlockValues","ExtraValues","PublicData","TxValues","base_fee","block_constants","block_hash","block_hash","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call_data_gas_cost","call_data_len","chain_id","chain_id","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","coinbase","default","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","difficulty","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from_addr","gas_limit","gas_limit","gas_price","get_block_table_values","get_extra_values","get_pi_bytes","get_rpi_digest_word","get_tx_table_values","history_hashes","history_hashes","init","init","init","init","into","into","into","into","is_create","nonce","number","prev_state_root","prev_state_root","public_data_convert","state_root","state_root","timestamp","to_addr","to_owned","to_owned","to_owned","to_owned","transactions","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tx_sign_hash","type_id","type_id","type_id","type_id","value","vzip","vzip","vzip","vzip","KeccakCircuit","KeccakCircuitConfig","KeccakCircuitConfigArgs","KeccakConfig","TestKeccakCircuit","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","capacity","challenges","clone","clone","clone_into","clone_into","configure","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","from","from","from","init","init","init","into","into","into","keccak_packed_multi","keccak_table","keccak_table","min_num_rows_block","new","new","new_from_block","synthesize","synthesize_sub","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unusable_rows","vzip","vzip","vzip","without_witnesses","Disabled","ExtOddKey","FixedTableTag","Hash","Key","MPTCircuit","MPTCircuitParams","MPTConfig","MPTContext","Nibbles","Node","RLP","Range16","Range256","RangeKeyLen16","RangeKeyLen256","RlpItemType","StateMachineConfig","Value","_marker","assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","configure","configure_with_params","default","default","degree","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","disable_preimage_check","drop","drop","drop","drop","drop","drop","drop","eq","expr","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","init","init","init","init","init","init","init","into","into","into","into","into","into","into","keccak_data","load_proof","new","nodes","params","scalar","synthesize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","without_witnesses","witness_row","AccountNode","BranchNode","ExtensionBranchNode","ExtensionNode","NODE_RLP_TYPES_ACCOUNT","NODE_RLP_TYPES_BRANCH","NODE_RLP_TYPES_START","NODE_RLP_TYPES_STORAGE","Node","StartNode","StorageNode","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","init","init","init","init","init","init","init","into","into","into","into","into","into","into","keccak_data","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","vzip","vzip","vzip","vzip","vzip","vzip","vzip","PiCircuit","PiCircuitConfig","PiCircuitConfigArgs","TestPiCircuit","block_table","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","challenges","clone","clone","clone_into","clone_into","configure","configure_with_params","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","from","from","from","init","init","init","instance","into","into","into","keccak_table","max_calldata","max_txs","min_num_rows_block","new","new","new_from_block","params","public_data","synthesize","synthesize_sub","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","tx_table","type_id","type_id","type_id","unusable_rows","vzip","vzip","vzip","without_witnesses","AggregationConfig","BITS","Config","EccChip","EvmTranscript","Gwc","Halo2Loader","KzgDk","KzgSvk","LIMBS","NativeLoader","PlonkSuccinctVerifier","PlonkVerifier","PoseidonTranscript","RootCircuit","Shplonk","Snark","SnarkWitness","TestAggregationCircuit","TestRootCircuit","accumulator_indices","accumulator_indices","aggregate","aggregate","assert_eq","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","common_ec_point","common_ec_point","common_point","common_scalar","common_scalar","common_scalar","compile","configure","configure","configure","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","ec_point_assert_eq","ec_point_load_const","ecc_chip","finalize","finalize","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","instance","instances","into","into","into","into","into","into","into","into","ipa","kzg","load_const","load_instances","load_table","loader","loader","main_gate","main_gate_config","multi_scalar_multiplication","new","new","new","new","new","new","num_instance","num_instance","proof","protocol","range_chip","range_config","read_ec_point","read_ec_point","read_point","read_scalar","read_scalar","read_scalar","set_query_instance","set_zk","squeeze_challenge","squeeze_challenge","squeeze_challenge","stream_mut","synthesize","synthesize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_accumulator_indices","with_num_instance","with_num_proof","without_witnesses","without_witnesses","without_witnesses","write_point","write_scalar","SortKeysConfig","StateCircuit","StateCircuitConfig","StateCircuitConfigArgs","TestStateCircuit","annotate_columns_in_region","assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","challenges","clone","clone","clone","clone_into","clone_into","clone_into","configure","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","from","from","from","from","init","init","init","init","instance","into","into","into","into","min_num_rows_block","mpt_table","new","new","new_from_block","rows","rw_table","synthesize","synthesize_sub","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u10_table","u16_table","u8_table","unusable_rows","vzip","vzip","vzip","vzip","without_witnesses","SuperCircuit","SuperCircuitConfig","SuperCircuitConfigArgs","SuperCircuitParams","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_from_circuit_input_builder","bytecode_circuit","circuits_params","clone","clone","clone_into","clone_into","configure","configure_with_params","copy_circuit","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","evm_circuit","exp_circuit","fmt","from","from","from","from","get_num_rows_required","init","init","init","init","instance","into","into","into","into","keccak_circuit","max_calldata","max_txs","min_num_rows_block","mock_randomness","mock_randomness","new","new_from_block","params","pi_circuit","state_circuit","synthesize","synthesize_sub","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tx_circuit","type_id","type_id","type_id","type_id","unusable_rows","vzip","vzip","vzip","vzip","without_witnesses","AccountFieldTag","AccountFieldTagIter","Balance","CallContextFieldTag","CallContextFieldTagIter","CallDataLength","CallDataOffset","CalleeAddress","CallerAddress","CallerId","CodeHash","CodeHash","Depth","GasLeft","IsCreate","IsPersistent","IsRoot","IsStatic","IsSuccess","LastCalleeId","LastCalleeReturnDataLength","LastCalleeReturnDataOffset","LookupTable","MemorySize","NonExisting","Nonce","ProgramCounter","ReturnDataLength","ReturnDataOffset","ReversibleWriteCounter","RwCounterEndOfReversion","StackPointer","TxId","Value","advice_columns","annotate_columns","annotate_columns_in_region","annotations","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","columns","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","expr","expr","fmt","fmt","from","from","from","from","hash","init","init","init","init","into","into","into","into","into_iter","into_iter","iter","iter","len","len","next","next","next_back","next_back","nth","nth","par_bridge","par_bridge","partial_cmp","scalar","scalar","size_hint","size_hint","table_exprs","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","CircuitTestBuilder","block","block_modifier","borrow","borrow_mut","deref","deref_mut","drop","evm_checks","from","init","into","new_from_block","new_from_test_ctx","params","run","state_checks","test_ctx","try_from","try_into","type_id","vzip","TestTxCircuit","TxCircuit","TxCircuitConfig","TxCircuitConfigArgs","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chain_id","challenges","clone","clone","clone_into","clone_into","configure","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","from","from","from","get_num_rows_required","init","init","init","instance","into","into","into","keccak_table","load_aux_tables","max_calldata","max_txs","min_num_rows","min_num_rows_block","new","new","new_from_block","sign_verify","sign_verify","synthesize","synthesize_sub","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","tx_table","txs","type_id","type_id","type_id","unusable_rows","vzip","vzip","vzip","without_witnesses","SignVerifyChip","_marker","aux_generator","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","fmt","from","init","into","max_verif","min_num_rows","new","to_owned","try_from","try_into","type_id","vzip","window_size","Address","Challenges","Config","ConfigArgs","Expr","MAX","SubCircuit","SubCircuitConfig","U256","abs_diff","add","add","add_assign","as_bits","as_byte_slice","as_ref","as_u128","as_u32","as_u64","as_usize","bit","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","byte","cell_manager","cell_placement_strategy","checked_add","checked_div","checked_mul","checked_neg","checked_pow","checked_rem","checked_sub","clone","clone","clone_into","clone_into","cmp","construct","decode","decode","decode","decode","decode_all","decode_all_with_depth_limit","decode_with_depth_limit","default","default","deref","deref","deref_mut","deref_mut","deserialize","div","div","div_assign","div_mod","drop","drop","encode","encode","eq","equivalent","equivalent","exp10","expr","exprs","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_big_endian","from_dec_str","from_little_endian","from_str","from_str_radix","from_token","from_tokens","full_mul","hash","indexed","indexed","init","init","instance","int_decomposition","integer_sqrt","into","into","into_token","into_tokens","is_zero","keccak_input","keccak_powers_of_randomness","leading_zeros","length","log2_ceil","lookup_input","lookup_input_powers_of_randomness","low_u128","low_u32","low_u64","max_encoded_len","max_value","min_num_rows_block","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","new","new_from_block","not","one","overflowing_add","overflowing_mul","overflowing_neg","overflowing_pow","overflowing_sub","param_type","partial_cmp","pow","query_expression","rem","rem","rem_assign","rlp_append","saturating_add","saturating_mul","saturating_sub","serialize","shl","shl","shl_assign","shr","shr","shr_assign","sub","sub","sub_assign","synthesize_sub","to_address","to_be_bytes","to_big_endian","to_keyed_vec","to_le_bytes","to_little_endian","to_owned","to_owned","to_scalar","to_string","to_word","trailing_zeros","try_as_bits","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","type_info","unusable_rows","using_encoded","values","vzip","vzip","word","zero","Cell","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","expr","expr","fmt","from","init","into","new","new_from_cs","to_owned","try_from","try_into","type_id","vzip","IntDecomposition","assign","assign_h160","assign_u256","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","expr","fmt","from","init","into","limbs","new","sum_expr","to_owned","to_word","try_from","try_into","type_id","vzip","Word","WordExpr","WordLimbs","add_unchecked","assign_advice","assign_h160","assign_u256","assign_u64","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deref","deref","deref","deref_mut","deref_mut","drop","drop","empty_code_hash_word_value","eq","eq","expr","fmt","fmt","from","from","from","from","from","from","from","from","from_lo_unchecked","hi","init","init","into","into","into_lo_hi","into_value","is_zero_vartime","limbs","lo","map","mul_selector","mul_unchecked","n","n","new","new","one","query_advice","query_advice","rlc","rlc_rev","select","sub_unchecked","to_expr","to_expr_vec","to_lo_hi","to_owned","to_owned","to_word","to_word","to_word","to_word","to_word","to_word_n","to_word_n","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","zero","Account","AccountStorage","Block","BlockContext","Call","CallContext","ExecStep","Memory","MptUpdate","MptUpdateRow","MptUpdates","Rw","RwMap","RwRow","Stack","Start","Transaction","TxAccessListAccount","TxAccessListAccountStorage","TxLog","TxReceipt","TxRefund","address","base_fee","block_convert","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bus_mapping_instance","bytecodes","call_data_length","call_data_offset","call_id","call_index","caller_address","caller_id","calls","calls_mut","chain_id","check_rw_counter_sanity","check_value","circuits_params","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","code_address","code_hash","code_source","coinbase","context","copy_events","copy_rw_counter_delta","default","default","default","default","default","default","default","default","default","depth","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","difficulty","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","end_block_last","end_block_not_last","eq","equivalent","equivalent","error","eth_block","exec_state","exp_circuit_pad_to","exp_events","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","gas_cost","gas_left","gas_limit","gas_refund","get_test_degree","history_hashes","id","index","index","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","is_create","is_delegatecall","is_persistent","is_root","is_static","is_steps_empty","is_success","keccak_inputs","kind","last_callee_id","last_callee_return_data_length","last_callee_return_data_offset","last_step","log_id","memory_size","memory_word_size","new","new","number","oog_or_stack_error","opcode","padding_tx","pc","prev_state_root","randomness","return_data_length","return_data_offset","reversible_write_counter","reversible_write_counter_delta","rw_counter_end_of_reversion","rw_index","rw_indices_len","rwc","rws","sha3_inputs","stack_pointer","stack_size","steps","steps_mut","table_assignments","table_assignments","table_assignments_prepad","timestamp","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","txs","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","values","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","account_address","account_address","account_address","account_address","byte","call_id","call_id","call_id","committed_value","field_tag","field_tag","field_tag","field_tag","index","is_warm","is_warm","is_warm_prev","is_warm_prev","is_write","is_write","is_write","is_write","is_write","is_write","is_write","is_write","is_write","is_write","log_id","memory_address","rw_counter","rw_counter","rw_counter","rw_counter","rw_counter","rw_counter","rw_counter","rw_counter","rw_counter","rw_counter","rw_counter","stack_pointer","storage_key","storage_key","tx_id","tx_id","tx_id","tx_id","tx_id","tx_id","value","value","value","value","value","value","value","value_prev","value_prev","value_prev"],"q":[[0,"zkevm_circuits"],[32,"zkevm_circuits::bytecode_circuit"],[34,"zkevm_circuits::bytecode_circuit::circuit"],[95,"zkevm_circuits::circuit_tools"],[100,"zkevm_circuits::circuit_tools::cached_region"],[144,"zkevm_circuits::circuit_tools::cell_manager"],[239,"zkevm_circuits::circuit_tools::constraint_builder"],[325,"zkevm_circuits::circuit_tools::gadgets"],[397,"zkevm_circuits::copy_circuit"],[504,"zkevm_circuits::evm_circuit"],[579,"zkevm_circuits::evm_circuit::param"],[594,"zkevm_circuits::evm_circuit::step"],[746,"zkevm_circuits::evm_circuit::table"],[862,"zkevm_circuits::exp_circuit"],[914,"zkevm_circuits::instance"],[1020,"zkevm_circuits::keccak_circuit"],[1084,"zkevm_circuits::mpt_circuit"],[1229,"zkevm_circuits::mpt_circuit::witness_row"],[1369,"zkevm_circuits::pi_circuit"],[1437,"zkevm_circuits::root_circuit"],[1647,"zkevm_circuits::state_circuit"],[1730,"zkevm_circuits::super_circuit"],[1818,"zkevm_circuits::table"],[1949,"zkevm_circuits::test_util"],[1971,"zkevm_circuits::tx_circuit"],[2042,"zkevm_circuits::tx_circuit::sign_verify"],[2066,"zkevm_circuits::util"],[2324,"zkevm_circuits::util::cell_manager"],[2345,"zkevm_circuits::util::int_decomposition"],[2370,"zkevm_circuits::util::word"],[2455,"zkevm_circuits::witness"],[2756,"zkevm_circuits::witness::Rw"]],"d":["Creates a dummy constraint builder that cannot be used to …","ifx","matchx Supports <code>_</code> which works the same as in the normal …","_require","_require2","Can be used to mark a specific branch as unreachable","assign advice","assign fixed","The bytecode circuit implementation.","Circuit builder macros Nested macro’s can’t do …","Circuit utilities","Concats arguments with preamble consisting of the …","The Copy circuit implements constraints and lookups for …","The EVM circuit implementation.","Exponentiation verification circuit.","Implementation trait <code>Expr</code> for type able to be casted to u64","Implement <code>ExprResult</code> for tupples","Implementation trait <code>ExprVec</code> for type able to be casted to …","The instance definition.","The keccak circuit implementation.","matchw - Resembles matchx so that the witness generation …","The MPT circuit implementation.","Public Input Circuit implementation","require_parser","The Root circuit implementation.","The state circuit implementation.","The Super Circuit is a circuit that contains all the …","Table definitions used cross-circuits","Testing utilities","The transaction circuit implementation.","Common utility traits and functions.","Witness for all circuits. The <code>Block&lt;F&gt;</code> is the witness …","","Bytecode circuit","BytecodeCircuit","Bytecode circuit configuration","Circuit configuration arguments","","","","","","","BytecodeTable","Challenges","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","KeccakTable","Return the minimum number of rows required to prove the …","Return a new BytecodeCircuitConfig","new BytecodeCircuitTester","","Circuit size","","Make the assignments to the TxCircuit","","","","","","","","","","","","","","","","","","Cell manager","Circuit utilities","Circuit gadgets","Memory","","","","","","Assign an advice column value (witness).","","","","","","","","Constrains a cell to have a constant value.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","LookupTable created dynamically and stored in an advice …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Construct a new BlockTable","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Return the storage cell of the expression","Return the storage phase of phase","","Table","","","","","","","","","","","","","","","","","","","","","Constraint builder","Data for dynamic lookup","Trait for doing math on Expressions, no matter the type …","Trait that generates a vector of expressions","Newtype wrapper for <code>Vec&lt;Expression&lt;F&gt;&gt;</code>","Trait around RLC","Trait around RLC","Trait around RLC","Trait around RLC","Trait around RLC","General trait to convert to a vec","Adds two values together","","","","","","","","CellManager","","","","","","","Use rlc","Condition under which the lookup needs to be done","","","","","","","Desciption","Disable macro-generated description for constraints &amp; …","","","","The lookups generated during synthesis assembles runtime …","The tables written during synthesis write to RAM","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If is fixed, use static table for lookup","lookup input challenge","Lookups","Multiply with a scalar","","region","region id","Returns the RLC of itself","Returns the RLC of itself with a starting rlc/multiplier","Returns the RLC of itself with a starting rlc/multiplier","Returns the RLC of itself with a starting rlc/multiplier","Returns the RLC of the reverse of itself","Returns the RLC of itself","Returns the RLC of the reverse of itself","state constraints start","state contect","All stored expressions","Returns a vector of the expressions from itself","","","","Converts a tuple to a vector","","","","","","","","","","The values to lookup","","","","Returns <code>1</code> when <code>lhs == rhs</code>, and returns <code>0</code> otherwise.","Returns <code>1</code> when <code>lhs == rhs</code>, and returns <code>0</code> otherwise.","Returns <code>1</code> when <code>value == 0</code>, and returns <code>0</code> otherwise.","Returns <code>1</code> when <code>lhs &lt; rhs</code>, and returns <code>0</code> otherwise. lhs and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Copy Circuit","The rw table shared between evm circuit and state circuit","Circuit configuration arguments","Struct for external data, specifies values for related …","","Lt chip to check: src_addr &lt; src_addr_end. Since <code>src_addr</code> …","Assign an individual copy event to the Copy Circuit.","Assign vec of copy events","","","","","","","","","BytecodeTable","BytecodeTable","BytecodeCircuit -&gt; bytecodes","Challenges","","","","","","","","Copy events","CopyTable","The Copy Table contains the columns that are exposed via …","","","","","","","","","","","","","","","Data for external lookup tables","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","In case of a bytecode tag, this denotes whether or not the …","Whether the row is the last read-write pair for a copy …","Whether the row is padding.","TxCircuit -&gt; max_calldata","Max number of rows in copy circuit","StateCircuit -&gt; max_rws","TxCircuit -&gt; max_txs","Return the minimum number of rows required to prove the …","Configure the Copy Circuit constraining read-write steps …","Return a new CopyCircuit","","Return a new CopyCircuit from a block without the external …","Return a new CopyCircuit with external data","q_enable","Whether the row is enabled or not.","Whether this row denotes a step. A read row is a step and …","RwTable","RwTable","StateCircuit -&gt; rws","","Make the assignments to the CopyCircuit","","","","","","","","","","","","TxTable","TxTable","TxCircuit -&gt; txs","","","","","","The value copied in this copy step.","Random linear combination accumulator value.","","","","","","Tx Circuit for verifying transaction signatures","EvmCircuitConfig implements verification of execution …","Circuit configuration arguments","","Block","BlockTable","","","","","","","BytecodeTable","Challenge","","","","","","CopyTable","","","","","","","","","","","The execution config","ExpTable","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","KeccakTable","Load fixed table","Return the minimum number of rows required to prove the …","Configure EvmCircuitConfig","Return a new EvmCircuit","","Constants and parameters for the EVM circuit","RwTable","EVM execution state. We model the EVM execution as a …","","Make the assignments to the EvmCircuit","Fixed lookup tables and dynamic lookup tables for the EVM …","","","","","","","","","TxTable","","","","U16Table","U8Table","","","","","","","Block Table lookups done in EVMCircuit","Bytecode Table lookups done in EVMCircuit","Copy Table lookups done in EVMCircuit","Exp Table lookups done in EVMCircuit","Fixed Table lookups done in EVMCircuit","Keccak Table lookups done in EVMCircuit","Lookups done per row.","Step height","Number of copy columns","Number of Advice Phase1 columns in the EVM circuit","Number of Advice Phase2 columns in the EVM circuit","Number of columns reserved for u16 lookup","Number of columns reserved for u8 lookup","Rw Table lookups done in EVMCircuit","Tx Table lookups done in EVMCircuit","","","ADD and SUB opcodes share this state","","AND, OR, XOR","TIMESTAMP, NUMBER, GASLIMIT, COINBASE, DIFFICULTY, BASEFEE","","","","","","","","","CALL, CALLCODE, DELEGATECALL, STATICCALL","","LT, GT, EQ","","","","","DUP1, DUP2, …, DUP16","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All the possible execution states that the computation of …","An iterator over the variants of Self","","","","Corresponding to ExecutionState::ErrorStack","","","","LOG0, LOG1, …, LOG4","MLOAD, MSTORE, MSTORE8","","","MUL, DIV, MOD","","","Raw opcode","","","PUSH0, PUSH1, PUSH2, …, PUSH32","","","","Enum of Responsible opcode mapping to execution state.","","SLT, SGT","SDIV, SMOD","","","","SHL, SHR","","","","","SWAP1, SWAP2, …, SWAP16","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Get the state hight","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Get the opcode","","Get the opocdes that are related to the execution state","","","","","","","","","","","","","","","","","bitwise AND","bitwise OR","bitwise XOR","Lookup for block constants","Lookup for bytecode table","Lookup constant gas cost for opcodes","Lookup for copy table","Lookup for exp table","The rest of the fixed table. See <code>FixedTableTag</code>","Tags for different fixed tables","An iterator over the variants of Self","Lookup for keccak table","power of 2","0 &lt;= x &lt; 1024","0 &lt;= x &lt; 128","0 &lt;= x &lt; 16","0 &lt;= x &lt; 256","0 &lt;= x &lt; 32","0 &lt;= x &lt; 5","0 &lt;= x &lt; 512","0 &lt;= x &lt; 64","lookup for corresponding opcode","Lookup for read write operations","-128 &lt;= x &lt; 128","Each item represents the lookup table to query","An iterator over the variants of Self","Lookup for transactions","The range check table for u16","The range check table for u8","x == 0","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ExpCircuit","Layout for the Exponentiation circuit.","","Assign witness to the exponentiation circuit.","","","","","","","","","","","","","","","","","Exp events","The Exponentiation circuit’s table.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Max number of rows in exp circuit","Return the minimum number of rows required to prove the …","Multiplication gadget for verification of each step.","Return a new ExpCircuitConfig","Return a new ExpCircuit","","Multiplication gadget to perform 2*n + k.","Whether the row is enabled.","","Make the assignments to the ExpCircuit","","","","","","","","","","","","","Values of the block table (as in the spec)","Extra values (not contained in block or tx tables)","PublicData contains all the values that the PiCircuit …","Values of the tx table (as in the spec)","base_fee","Constants related to Ethereum block","block_hash","Block Hash","","","","","","","","","call_data_gas_cost","call_data_len","chain_id","chain id","","","","","","","","","coinbase","","","","","","","","","","","","","difficulty","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","from_addr","gas_limit","gas_limit","gas_price","Returns struct with values for the block table","Returns struct with the extra values","get the serialized public data bytes","generate public data from validator perspective","Returns struct with values for the tx table","history_hashes","History hashes contains the most recent 256 block hashes …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","is_create","nonce","number","prev_state_root","Previous block root","convert witness block to public data","state_root","Block State Root","timestamp","to_addr","","","","","Block Transactions","","","","","","","","","tx_sign_hash","","","","","value","","","","","KeccakCircuit","KeccakConfig","Circuit configuration arguments","","","","","","","","","The number of keccak_f’s that can be done in this circuit","Challenges randomness","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Keccak packed multi","KeccakTable","The columns for other circuits to lookup Keccak hash …","Return the minimum number of rows required to prove the …","Return a new KeccakCircuitConfig","Creates a new circuit instance","The <code>block.circuits_params.keccak_padding</code> parmeter, when …","","Make the assignments to the KeccakCircuit","","","","","","","","","","","","","","","","","All zero lookup data","Extesion key odd key","Enumerator to determine the type of row in the fixed table.","Hash (string with len == 32)","Key (string with len &lt;= 33)","MPT Circuit for proving the storage modification is valid.","MPT Circuit configuration parameters","Merkle Patricia Trie config.","Merkle Patricia Trie context","Nibbles","Node (string with len == 0 or 32, OR list with len &lt;= 31)","RLP decoding","0 - 15","0 - 255","For checking there are 0s after the RLP stream ends","For checking there are 0s after the RLP stream ends","RLP item type","State machine config.","Value (string with len &lt;= 32)","Marker","Make the assignments to the MPTCircuit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","log2(height)","","","","","","","","","","","","","","","disable_preimage_check Can be used to test artificially …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","MPT keccak_data","Loads an MPT proof from disk","Configure MPT Circuit","MPT nodes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","MPT witness row","MPT account node","MPT branch node","MPT extension branch node","MPT extension node","RLP types account","RLP types branch","RLP types start","RLP types account","MPT node","MPT start node","MPT storage node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","MPT keccak data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","MPT node values","","","","","","","","Public Inputs Circuit","Config for PiCircuit","Circuit configuration arguments","","BlockTable","","","","","","","Challenges","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Compute the public inputs for this circuit.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Keccak Table","Max number of supported calldata bytes","Max number of supported transactions","Return the minimum number of rows required to prove the …","Return a new PiCircuitConfig","Creates a new PiCircuit","","","PublicInputs data known by the verifier","","Make the assignments to the PiCircuit","","","","","","","","","TxTable","","","","","","","","","Aggregation configuration.","Number of bits of each decomposed limb.","Configuration for converting a <code>VerifyingKey</code> of <code>halo2_proofs</code>…","<code>BaseFieldEccChip</code> with hardcoded <code>LIMBS</code> and <code>BITS</code> serving as …","Transcript for verifier on EVM using keccak256 as hasher.","KZG accumulation scheme with GWC19 multiopen.","<code>Halo2Loader</code> with hardcoded <code>EccChip</code>.","KZG deciding key","KZG succinct verifying key","Number of limbs to decompose a elliptic curve base field …","<code>Loader</code> implementation in native rust.","Plonk succinct verifier with <code>KzgAs</code>","Plonk verifier with <code>KzgAs</code> and <code>LimbsEncoding&lt;LIMBS, BITS&gt;</code>.","<code>PoseidonTranscript</code> with hardcoded parameter with 128-bits …","RootCircuit for aggregating SuperCircuit into a much …","KZG accumulation scheme with BDFG21 multiopen.","Snark contains the minimal information for verification","SnarkWitness","Aggregation circuit for testing purpose.","","Returns accumulator indices in instance columns, which …","Returns accumulator indices in instance columns, which …","Aggregate snarks into a single accumulator and decompose …","Aggregate snarks into a single accumulator and decompose …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert a <code>VerifyingKey</code> of <code>halo2_proofs</code> into <code>PlonkProtocol</code>.","Configure for <code>MainGate</code> and <code>RangeChip</code> with corresponding …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>EccChip</code>.","","Finalize transcript and returns <code>stream</code>.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Returns instance","Returns instances","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>Config</code> with <code>query_instance</code> set to <code>true</code>.","Returns <code>Config</code> with <code>query_instance</code> set to <code>false</code>.","","Load <code>num_instance</code> instances from calldata to memory.","Load fixed lookup table for <code>RangeChip</code>","","","Returns <code>MainGate</code>.","MainGateConfig","","Initialize <code>EvmTranscript</code> given readable or writeable …","Initialize <code>EvmTranscript</code> given <code>Rc&lt;EvmLoader&gt;</code> and …","Construct <code>Snark</code> with each field.","Construct <code>SnarkWitness</code> with each field.","Create an Aggregation circuit with aggregated accumulator …","Create a <code>RootCircuit</code> with accumulator computed given a …","Returns number of instance","Returns number of instance","Returns proof as reference.","Returns protocol as reference.","Returns <code>RangeChip</code>.","RangeConfig","","","","","","","Set <code>query_instance</code>","Set <code>zk</code>","","","","Returns mutable <code>stream</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set <code>accumulator_indices</code>","Set <code>num_instance</code>","Set <code>num_proof</code>","Returns <code>SnarkWitness</code> with all witness as <code>Value::unknown()</code>.","","","","","Keys for sorting the rows of the state circuit","State Circuit for proving RwTable is valid","Config for StateCircuit","Circuit configuration arguments","","Annotates this config within a circuit region.","Make the assignments to the StateCircuit","","","","","","","","","Challenges","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","powers of randomness for instance columns","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the minimum number of rows required to prove the …","MptTable","Return a new StateCircuitConfig","make a new state circuit from an RwMap","","Rw rows","RwTable","","Make the assignments to the StateCircuit","","","","","","","","","","","","","","","","U10Table","U16Table","U8Table","","","","","","","The Super Circuit contains all the zkEVM circuits","Configuration of the Super Circuit","Circuit configuration arguments","Super Circuit configuration parameters","","","","","","","","","From the witness data, generate a SuperCircuit instance …","From CircuitInputBuilder, generate a SuperCircuit instance …","Bytecode Circuit","Circuits Parameters","","","","","","","Copy Circuit","","","","","","","","","","","","","","","EVM Circuit","Exp Circuit","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return the number of rows required to verify a given block","","","","","Returns suitable inputs for the SuperCircuit.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Keccak Circuit","Max calldata","Max txs","Return the minimum number of rows required to prove the …","Mock randomness","Mock randomness","Configure SuperCircuitConfig","","","Public Input Circuit","State Circuit","","Make the assignments to the SuperCircuit","","","","","","","","","","","The transaction circuit that will be used in the <code>synthesize</code>…","","","","","","","","","","","Tag for an AccountField in RwTable","An iterator over the variants of Self","Balance field","Tag for a CallContextField in RwTable","An iterator over the variants of Self","CallDataLength","CallDataOffset","CalleeAddress","CallerAddress","CallerId","CodeHash field","CodeHash","Depth","GasLeft","IsCreate","IsPersistent","IsRoot","IsStatic","IsSuccess","LastCalleeId","LastCalleeReturnDataLength","LastCalleeReturnDataOffset","Trait used to define lookup tables","MemorySize","NonExisting field","Nonce field","ProgramCounter","ReturnDataLength","ReturnDataOffset","ReversibleWriteCounter","RwCounterEndOfReversion","StackPointer","TxId","Value","Returns the list of ALL the table advice columns following …","Annotates a lookup table by passing annotations for each …","Annotates columns of a table embedded within a circuit …","Returns the String annotations associated to each column …","","","","","","","","","","","","","","","","","","Returns the list of ALL the table columns following the …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Return the list of expressions used to define the lookup …","","","","","","","","","","","","","","","","","","","","","Struct used to easily generate tests for EVM &amp;| State …","Allows to pass a <code>Block</code> already built to the constructor.","Allows to provide modifier functions for the <code>Block</code> that …","","","","","","Allows to provide checks different than the default ones …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Generates a CTBC from a <code>Block</code> passed with all the other …","Generates a CTBC from a <code>TestContext</code> passed with all the …","Allows to pass a non-default <code>FixedCParams</code> to the builder. …","Triggers the <code>CircuitTestBuilder</code> to convert the <code>TestContext</code> …","Allows to provide checks different than the default ones …","Allows to produce a <code>TestContext</code> which will serve as the …","","","","","","Tx Circuit for verifying transaction signatures","Config for TxCircuit","Circuit configuration arguments","","","","","","","Chain ID","Challenges","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get number of rows required.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","KeccakTable","Load ECDSA RangeChip table.","Max number of supported calldata bytes","Max number of supported transactions","Return the minimum number of rows required to prove an …","Return the minimum number of rows required to prove the …","Return a new TxCircuitConfig","Return a new TxCircuit","","Circuit to verify multiple ECDSA secp256k1 signatures.","SignVerify chip","","Make the assignments to the TxCircuit","","","","","","","","","TxTable","List of Transactions","","","","","","","","","Auxiliary Gadget to verify a that a message hash is signed …","Marker","Aux generator for EccChip","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Max number of verifications","Return the minimum number of rows required to prove an …","Return a new SignVerifyChip","","","","","","Window size for EccChip","","All challenges used in <code>SuperCircuit</code>.","Configuration of the SubCircuit.","Config constructor arguments","Trait that implements functionality to get a constant …","Maximum value.","SubCircuit is a circuit that performs the verification of …","SubCircuit configuration","Little-endian large integer type 256-bit unsigned integer.","Computes the absolute difference between self and other.","","","","","","","Conversion to u128 with overflow checking","Conversion to u32 with overflow checking","Conversion to u64 with overflow checking","Conversion to usize with overflow checking","Return if specific bit is set.","","","","","Return the least number of bits needed to represent the …","","","","","","","Return specific byte.","Cell Manager","Cell Placement strategies","Checked addition. Returns <code>None</code> if overflow occurred.","Checked division. Returns <code>None</code> if <code>other == 0</code>.","Checked multiplication. Returns <code>None</code> if overflow occurred.","Checked negation. Returns <code>None</code> unless <code>self == 0</code>.","Checked exponentiation. Returns <code>None</code> if overflow occurred.","Checked modulus. Returns <code>None</code> if <code>other == 0</code>.","Checked subtraction. Returns <code>None</code> if overflow occurred.","","","","","","Construct <code>Challenges</code> by allocating challenges in specific …","","","","","","","","","","","","","","","","","","Returns a pair <code>(self / other, self % other)</code>.","","","","","","","","Create <code>10**n</code> as this type.","Returns an expression for the type.","Returns <code>Expression</code> of challenges from <code>ConstraintSystem</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Converts from big endian representation bytes in memory.","Convert from a decimal string.","Converts from little endian representation bytes in memory.","","Converts a string slice in a given base to an integer. …","","","Multiplies two 256-bit integers to produce full 512-bit …","","Returns the challenges indexed by the challenge index","","","","Returns the instance columns required for this circuit.","Define IntDecomposition to decompose int into byte limbs","Compute the highest <code>n</code> such that <code>n * n &lt;= self</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Whether this is zero.","Returns challenge of <code>keccak_input</code>.","Returns powers of randomness for keccak circuit’s input","Returns the number of leading zeros in the binary …","","Ceiling of log_2(n)","Returns challenge of <code>lookup_input</code>.","Returns powers of randomness for lookups","Low 2 words (u128)","Conversion to u32","Low word (u64)","","The maximum value which can be inhabited by this type.","Return the minimum number of rows required to prove the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Type constructor","Create a new SubCircuit from a witness Block","","One (multiplicative identity) of this type.","Addition which overflows and returns a flag if it does.","Multiply with overflow, returning a flag if it does.","Negation with overflow.","Fast exponentiation by squaring. Returns result and …","Subtraction which underflows and returns a flag if it does.","","","Fast exponentiation by squaring …","Steal the expression from gate","","","","","Addition which saturates at the maximum value (Self::MAX).","Multiplication which saturates at the maximum value..","Subtraction which saturates at zero.","","","","","","","","","","","Assign only the columns used by this sub-circuit.  This …","","Encode the value as byte array in big endian.","Write to the slice in big-endian format.","","Encode the value as byte array in little endian.","Write to the slice in little-endian format.","","","","","","Returns the number of trailing zeros in the binary …","","","","","","","","","","","","","Returns number of unusable rows of the SubCircuit, which …","","Returns <code>Value</code> of challenges from <code>Layouter</code>.","","","Define generic Word type with utility functions","Zero (additive identity) of this type.","Cell is a (column, rotation) pair that has been placed and …","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Creates a Cell from VirtualCells.","Creates a Cell from ConstraintSystem.","","","","","","IntDecomposition decompose integer into byte limbs","assign bytes to cells","assign h160 to cells","assign u256 to cells","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","inner cells in little-endian for synthesis","new by cell limbs","assign all limbs into one expression","","","","","","","<code>Word</code>, special alias for Word2.","Get the word expression","The EVM word for witness","No overflow check on lo/hi limbs","Assign advice","assign h160 to wordlimbs","assign u256 to wordlimbs","assign u64 to wordlimbs","","","","","","","","","","","","","","","","","","Return the hash of the empty code as a Word&lt;Value&gt; in …","Equality expression","","","","","Returns the argument unchanged.","Construct the word from u256","","Construct the word from u64","Construct the word from H256","Construct the word from u8","Construct the word from h160","Returns the argument unchanged.","create word from lo limb with hi limb as 0. caller need to …","The high 128 bits limb","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Extract (move) lo and hi values","Wrap <code>Word</code> into <code>Word&lt;Value&gt;</code>","Check if zero","The limbs of this word.","the low 128 bits limb","Map the word to other types","Assume selector is 1/0 therefore no overflow check","No overflow check on lo/hi limbs","The number of limbs","number of limbs","Constructor","Construct the word from 2 limbs","one word","Query advice of WordLibs of columns advice","Query advice of Word of columns advice","","","select based on selector. Here assume selector is 1/0 …","No underflow check on lo/hi limbs","Convert WordLimbs of u8 to WordLimbs of expressions","","word to low and high 128 bits","","","Get the word expression","","","","","convert from N cells to N2 expressions limbs","to_wordlimbs will aggregate nested expressions, which …","","","","","","","","","zero word","Account","AccountStorage","Block is the struct used by all circuits, which contains …","Block context for execution","Circuit Input related to an Ethereum Call","CallContext","An execution step of the EVM.","Memory","An MPT update whose validity is proved by the MptCircuit","The field element encoding of an MPT update, which is used …","All the MPT updates in the MptCircuit, accessible by their …","Read-write records in execution. Rws are used for …","Rw constainer for a witness block","Rw table row assignment","Stack","Start","Result of the parsing of an Ethereum Transaction.","TxAccessListAccount","TxAccessListAccountStorage","TxLog","TxReceipt","TxRefund","Address where this call is being executed","The base fee, the minimum amount of gas fee for a …","Convert a block struct in bus-mapping to a witness block …","","","","","","","","","","","","","","","","","","","","","","","The list of references to Operations in the container","Bytecode used in the block","Call data length","Call data offset","Unique call identifier within the Block.","Call index within the Transaction.","Address of caller","Caller’s id.","Return the list of calls of this transaction.","Return a mutable reference to the list containing the …","The chain id","Check rw_counter is continuous and starting from 1","Check value in the same way like StateCircuit","Circuit Setup Parameters","","","","","","","","","","","","","","","","","","","","","","","Get the code address if possible","Code Hash","Code Source","The address of the miner for the block","The block context","Copy events for the copy circuit’s table.","Number of rw operations performed via a copy event in this …","","","","","","","","","","Depth","","","","","","","","","","","","","","","","","","","","","","","","The difficulty of the blcok","","","","","","","","","","","","Last EndBlock step that appears in the last EVM row.","EndBlock step that is repeated after the last transaction …","","","","Error generated by this step","Original Block from geth","Execution state","Pad exponentiation circuit to make selectors fixed.","Exponentiation traces for the exponentiation circuit’s …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Gas cost of the step.  If the error is OutOfGas caused by …","Gas left","The gas limit of the block","Accumulated gas refund","Obtains the expected Circuit degree needed in order to be …","The hash of previous blocks","The transaction id","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","This call is root call with tx.to == null, or op == CREATE …","This call is call with op DELEGATECALL","This call is persistent or call stack reverts at some point","This call generated implicity by a Transaction.","This call is being executed without write access (STATIC)","Return whether the steps in this transaction is empty","This call ends successfully or not","Keccak inputs","Type of call","Last Callee’s id.","last callee’s return data length","last callee’s return data offset","Return last step in this transaction.","Log index when this step was executed.","Memory size","The memory size in word <strong>before</strong> this step","Create a new Self from a <code>GethExecStep</code>.","Create a new Self.","The number of the block","Returns <code>true</code> if <code>error</code> is oog and stack related..","Try get opcode, if possible","Constructor for padding tx in tx circuit","Program Counter","State root of the previous block","The randomness for random linear combination","Return data length","Return data offset","Reversible Write Counter.  Counter of write operations in …","Number of reversible write operations done by this step.","This rw_counter at the end of reversion","get rw index","Get the size of read and writes","The global counter when this step was executed.","Read write events in the RwTable","Inputs to the SHA3 opcode","Get stack pointer","Stack size","Return the list of execution steps of this transaction.","Return a mutable reference to the list of execution steps …","Assignments for block table","Build Rws for assignment","Prepad Rw::Start rows to target length","The timestamp of the block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Transactions in the block","","","","","","","","","","","","Value","The individual values of the row, in the column order used …","","","","","","","","","","","","","","","","","","","","","","","","","index has 3 usages depends on <code>crate::table::TxLogFieldTag</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","when it is topic field, value can be word type","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,2,4,231,2,4,231,231,2,4,2,4,4,4,231,2,4,231,2,4,231,2,4,2,4,231,2,4,231,2,4,231,2,4,231,4,2,4,4,4,4,4,2,4,231,2,4,231,2,4,231,2,4,4,231,2,4,4,0,0,0,0,0,0,0,0,21,20,21,21,21,20,21,20,20,20,21,21,20,21,20,21,20,21,20,21,20,21,21,20,22,21,20,21,20,21,21,21,20,21,20,21,20,21,20,21,20,0,0,0,0,0,37,37,37,34,38,37,39,34,38,37,39,34,19,37,38,38,37,39,34,38,37,39,34,37,34,37,38,37,39,34,38,37,39,34,38,37,39,34,37,37,37,19,38,37,39,34,38,38,37,39,34,34,37,38,37,39,34,38,38,37,39,34,38,38,37,38,19,19,37,34,38,37,39,34,38,37,39,34,38,37,39,34,38,37,39,34,38,37,39,34,0,0,0,0,0,0,0,0,0,0,0,232,44,45,46,44,45,46,44,46,45,46,44,45,46,44,45,45,45,46,44,45,46,44,45,46,45,46,44,46,46,45,45,46,44,45,46,44,45,46,44,45,46,46,232,44,45,46,233,234,235,236,233,237,237,46,46,46,238,45,46,44,239,45,46,44,45,46,44,45,46,44,45,45,46,44,0,0,0,0,47,48,49,50,47,48,49,50,47,48,49,50,47,48,49,50,47,48,49,50,47,48,49,50,47,48,49,50,47,48,49,50,47,48,49,50,47,48,49,50,47,48,49,50,47,48,49,50,47,48,49,50,47,48,49,50,47,48,49,50,47,48,49,50,47,48,49,50,0,0,0,0,0,51,51,51,240,51,57,58,240,51,57,58,240,51,57,240,51,57,58,51,57,58,58,58,240,51,57,58,240,51,57,58,240,51,57,58,240,51,57,58,58,51,57,58,240,51,57,58,240,51,57,58,240,51,57,58,51,51,51,57,58,57,57,58,51,58,58,58,58,240,51,51,240,51,57,58,58,51,57,58,240,51,57,58,240,51,57,58,240,51,57,240,51,57,58,58,51,51,240,51,57,58,58,0,0,0,0,60,241,241,59,60,241,59,60,241,241,59,60,59,60,60,241,60,241,59,60,241,59,60,241,59,60,59,241,59,60,241,59,60,241,59,60,241,59,60,241,59,60,59,60,60,0,241,0,60,60,0,59,60,241,59,60,241,59,60,241,241,59,60,241,241,60,241,59,60,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,0,62,62,62,64,62,62,62,62,62,62,62,62,62,62,64,62,62,62,62,62,62,0,62,62,62,62,62,62,62,62,62,62,62,62,62,63,64,62,63,64,62,63,62,63,62,62,63,64,62,63,64,62,63,64,62,62,62,62,62,64,62,62,62,63,64,64,62,62,62,63,64,62,63,64,63,62,63,63,63,63,64,63,62,63,62,63,62,62,63,64,62,63,64,62,63,64,62,63,64,61,61,61,70,70,61,70,70,70,0,0,70,61,61,61,61,61,61,61,61,61,61,70,61,0,0,70,70,70,61,61,69,70,71,61,69,70,71,61,69,70,71,61,69,70,71,70,61,69,70,71,61,69,70,71,61,69,70,71,70,70,70,61,61,70,61,69,70,71,70,61,69,70,71,61,69,70,71,69,71,61,70,69,71,69,71,69,71,69,71,69,71,70,61,69,71,61,69,70,71,61,69,70,71,61,69,70,71,61,69,70,71,61,69,70,71,0,0,0,72,72,73,72,73,72,73,72,73,73,73,72,73,72,73,72,73,73,72,72,73,72,73,72,73,72,73,73,73,72,72,73,73,72,72,73,73,72,73,72,73,72,73,72,73,73,72,73,73,0,0,0,0,75,78,77,78,75,76,77,78,75,76,77,78,76,76,75,78,75,76,77,78,75,76,77,78,75,75,76,77,78,75,76,77,78,75,76,77,78,75,75,76,77,78,75,76,77,78,75,76,77,78,76,75,76,76,78,78,78,78,78,75,78,75,76,77,78,75,76,77,78,76,76,75,77,78,0,77,78,75,76,75,76,77,78,78,75,76,77,78,75,76,77,78,76,75,76,77,78,76,75,76,77,78,0,0,0,0,0,242,81,80,242,81,80,80,242,81,80,81,80,80,80,242,81,80,242,81,80,242,81,80,81,80,242,81,80,242,81,80,242,81,80,0,242,81,80,81,80,80,80,80,81,80,242,81,80,242,81,80,242,81,80,80,242,81,80,80,86,86,0,85,85,0,0,0,0,85,85,86,86,86,86,86,0,0,85,88,82,83,84,85,82,86,88,87,83,84,85,82,86,88,87,83,84,85,82,86,87,83,84,85,82,86,87,88,88,88,87,88,83,84,85,82,86,88,87,83,84,85,82,86,88,87,88,83,84,85,82,86,88,87,85,86,83,84,85,86,87,83,84,85,82,86,88,87,83,84,85,82,86,88,87,83,84,85,82,86,88,87,88,0,82,88,88,86,88,83,84,85,82,86,87,83,84,85,82,86,88,87,83,84,85,82,86,88,87,83,84,85,82,86,88,87,83,84,85,82,86,88,87,88,0,0,0,0,0,0,0,0,0,0,0,0,91,92,93,94,95,96,90,91,92,93,94,95,96,90,91,92,93,94,95,96,90,91,92,93,94,95,96,90,90,91,92,93,94,95,96,90,91,92,93,94,95,96,90,91,92,93,94,95,96,90,91,92,93,94,95,96,90,91,92,93,94,95,96,90,91,92,93,94,95,96,90,91,92,93,94,95,96,90,91,92,93,94,95,96,90,90,91,92,93,94,95,96,90,91,92,93,94,95,96,90,91,92,93,94,95,96,90,91,92,93,94,95,96,90,91,92,93,94,95,96,90,90,91,92,93,94,95,96,90,0,0,0,0,243,243,99,100,243,99,100,243,99,100,99,100,100,100,100,243,99,100,243,99,100,243,99,100,99,100,243,99,100,243,99,100,100,243,99,100,243,243,243,100,99,100,100,100,100,100,100,99,100,243,99,100,243,99,100,243,243,99,100,100,243,99,100,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,107,0,111,102,102,120,113,115,116,111,106,107,102,120,113,115,116,111,106,107,102,113,115,116,111,106,107,102,113,115,116,111,106,107,120,120,120,120,120,120,0,111,106,107,113,102,120,113,115,116,111,106,107,102,120,113,115,116,111,106,107,102,120,113,115,116,111,106,107,102,102,111,120,120,102,120,113,102,120,113,115,116,116,111,106,107,102,120,120,120,113,115,116,111,106,107,107,106,102,120,113,115,116,111,106,107,113,113,102,120,111,120,120,111,111,102,120,120,115,116,106,107,106,107,116,116,111,111,120,120,120,120,120,120,113,113,120,120,120,120,106,107,102,113,115,116,111,106,107,102,120,113,115,116,111,106,107,102,120,113,115,116,111,106,107,102,120,113,115,116,111,106,107,102,120,113,115,116,111,106,107,113,113,113,116,106,107,120,120,0,0,0,0,0,139,140,244,140,139,141,244,140,139,141,244,140,139,141,140,139,141,141,141,244,140,139,141,244,140,139,141,244,140,139,141,141,244,140,139,141,244,140,139,141,141,244,140,139,141,141,244,140,141,141,141,244,141,141,140,139,141,244,140,139,141,244,140,139,141,244,140,139,141,244,244,244,141,244,140,139,141,141,0,0,0,0,245,147,148,149,245,147,148,149,148,148,148,148,147,148,147,148,148,148,148,148,149,245,147,148,149,245,147,148,149,245,147,148,149,148,148,148,245,147,148,149,148,245,147,148,149,148,245,147,148,149,148,245,245,148,245,148,147,148,148,148,148,148,148,147,148,245,147,148,149,245,147,148,149,148,245,147,148,149,148,245,147,148,149,148,0,0,150,0,0,152,152,152,152,152,150,152,152,152,152,152,152,152,152,152,152,152,0,152,150,150,152,152,152,152,152,152,152,152,246,246,246,246,150,151,152,153,150,151,152,153,150,151,152,153,150,151,152,153,150,246,150,151,152,153,150,151,152,153,150,151,152,153,150,152,150,150,152,152,150,152,150,152,150,151,152,153,150,150,151,152,153,150,151,152,153,151,153,150,152,151,153,151,153,151,153,151,153,151,153,150,150,152,151,153,246,150,151,152,153,150,151,152,153,150,151,152,153,150,151,152,153,150,151,152,153,0,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,0,0,0,0,247,159,160,247,159,160,160,247,159,160,159,160,160,160,247,159,160,247,159,160,247,159,160,159,160,247,159,160,159,247,159,160,160,247,159,160,247,159,160,160,160,160,159,160,160,0,160,160,160,159,160,247,159,160,247,159,160,247,160,247,159,160,160,247,159,160,160,0,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,0,0,248,249,0,164,0,0,0,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,17,164,17,164,0,0,164,164,164,164,164,164,164,164,17,164,17,164,17,164,164,164,164,164,164,164,164,17,164,17,164,17,164,164,164,164,164,164,17,164,164,164,164,164,164,214,17,164,164,164,164,17,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,17,164,164,164,164,164,164,164,164,164,17,17,164,17,248,0,164,164,17,164,164,164,17,17,164,164,0,17,17,164,164,164,164,164,248,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,249,248,164,164,164,164,164,164,164,164,164,164,0,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,248,164,164,164,164,164,164,164,17,164,164,164,164,164,164,164,164,164,164,17,164,17,164,17,164,248,164,17,164,17,0,164,0,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,0,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,0,0,0,79,79,210,210,210,210,79,210,79,210,79,210,79,210,79,210,79,79,210,79,210,79,0,210,79,79,210,79,210,79,79,79,79,79,79,79,79,79,210,79,210,79,79,79,210,210,79,79,79,79,210,79,210,79,79,210,79,79,79,79,79,210,79,79,210,79,250,210,210,79,79,210,210,210,79,210,79,210,79,210,79,79,221,221,0,0,0,221,0,221,0,0,0,0,0,0,221,221,0,221,221,221,221,221,216,217,0,216,66,215,11,217,218,219,220,142,221,222,216,66,215,11,217,218,219,220,142,221,222,66,11,216,216,216,66,216,216,215,215,217,142,142,11,216,66,215,11,217,218,219,220,142,221,222,216,66,215,11,217,218,219,220,142,221,222,216,216,216,217,11,11,66,216,66,215,11,217,219,220,142,222,216,216,66,215,215,11,217,218,219,220,142,221,222,216,66,215,11,217,218,219,220,142,221,222,217,216,66,215,11,217,218,219,220,142,221,222,11,11,216,216,216,66,11,66,11,11,216,66,215,11,217,218,219,220,142,221,222,216,66,215,11,217,217,218,219,220,142,142,221,222,66,66,217,66,11,217,215,142,142,216,66,215,11,217,218,219,220,142,221,222,216,66,215,11,217,218,219,220,142,221,222,216,216,216,216,216,215,216,11,216,216,216,216,215,66,66,66,66,215,217,66,66,215,66,11,11,216,216,66,66,216,66,66,66,11,11,66,66,215,215,217,142,142,217,216,66,215,11,217,218,219,220,142,221,222,216,66,215,11,217,218,219,220,142,221,222,216,66,215,11,217,218,219,220,142,221,222,11,216,66,215,11,217,218,219,220,142,221,222,216,220,216,66,215,11,217,218,219,220,142,221,222,251,252,253,254,255,256,257,255,254,253,256,258,259,258,251,252,251,252,251,252,260,253,254,256,257,255,258,259,258,255,261,251,252,260,253,254,256,257,255,258,259,257,252,254,251,252,260,254,258,259,260,253,254,256,257,258,259,260,253,254],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[2,[1]]],[[2,[1]]]],[[[4,[[0,[1,3]]]]],[[4,[[0,[1,3]]]]]],[[]],[[]],[[[5,[3]]]],[[],[[4,[[0,[6,3]]]]]],[7],[7],[7],[7],[7],[7],[7],[7],[7],[[[2,[8]],9],10],[[[4,[[0,[8,3]]]],9],10],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[]],[[]],[[]],0,[[[11,[3]]]],[[[5,[3]]],[[2,[3]]]],[[12,7],[[4,[3]]]],[[[11,[3]]],[[4,[3]]]],0,[[[4,[3]],[13,[3]]],[[15,[14]]]],[[[4,[3]],[17,[[16,[3]]]],[13,[3]]],[[15,[14]]]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],18],[[],18],[[],18],[[],7],[[]],[[]],[[]],[[[4,[3]]],[[4,[3]]]],0,0,0,0,0,0,0,0,0,[[[20,[3,19]],[21,[3]],[22,[3]],7],[[15,[[16,[3]],14]]]],[[[21,[3]],23,[25,[24]],7,23],[[15,[[26,[3]],14]]]],[[[21,[3]],23,[25,[27]],7,23],[[15,[[26,[3]],14]]]],[[]],[[]],[[]],[[]],[[[20,[1,[0,[1,19]]]]],[[20,[1,[0,[1,19]]]]]],[[]],[[[21,[3]],[26,[3,3]],[29,[[28,[3]]]]],[[15,[14]]]],[7],[7],[7],[7],[7],[7],0,[[[20,[8,[0,[8,19]]]],9],10],[[]],[[]],[[[21,[3]],7,7,30],3],[[[21,[3]],7,7,30],3],[[[20,[19]],31]],[[],[[32,[16]]]],[[],7],[[],7],[[]],[[]],0,0,[[[21,[3]],23,[29,[[25,[33]]]]]],[[]],[[],15],[[],15],[[],15],[[],15],[[],18],[[],18],[[]],[[]],0,0,0,0,0,0,0,0,[34,[[32,[35]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],36],[[],[[36,[37]]]],0,[[[38,[[0,[1,19]]]]],[[38,[[0,[1,19]]]]]],[37,37],[[[39,[1,[0,[1,19]]]]],[[39,[1,[0,[1,19]]]]]],[34,34],[[]],[[]],[[]],[[]],[[37,37],40],[34,[[32,[[25,[33]]]]]],[[],37],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[[37,37],41],[[],41],[[],41],[[[42,[3]]],43],[[[38,[[0,[8,19]]]],9],10],[[37,9],10],[[[39,[8,[0,[8,19]]]],9],10],[[34,9],10],[[],[[38,[19]]]],[[]],[[]],[[]],[[]],[[[39,[3,19]],19],34],[[37,31]],[[],7],[[],7],[[],7],[[],7],[[[38,[19]],[5,[3]]],[[32,[[25,[24]]]]]],[[]],[[]],[[]],[[]],0,0,[[37,37],[[36,[40]]]],0,[[[42,[3]]]],[43],[43,37],0,[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[[44,[3]],[44,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[45,[1]]],[[45,[1]]]],[[[46,[1,[0,[1,19]]]]],[[46,[1,[0,[1,19]]]]]],[[[44,[[0,[1,3]]]]],[[44,[[0,[1,3]]]]]],[[]],[[]],[[]],0,0,[7],[7],[7],[7],[7],[7],0,0,[7],[7],[7],0,0,[[[45,[8]],9],10],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[]],[[]],[[]],0,0,0,[42],[[[44,[3]],[44,[3]]]],0,0,[42,42],[42,42],[[],42],[[]],[42,42],[[]],[[]],0,0,0,[[],[[32,[42]]]],[[]],[[]],[[]],[[],32],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],18],[[],18],[[],18],0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[47,[1]]],[[47,[1]]]],[[[48,[1]]],[[48,[1]]]],[[[49,[1]]],[[49,[1]]]],[[[50,[1]]],[[50,[1]]]],[[]],[[]],[[]],[[]],[[],[[47,[6]]]],[[],[[48,[6]]]],[[],[[49,[6]]]],[[],[[50,[6]]]],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[[[47,[8]],9],10],[[[48,[8]],9],10],[[[49,[8]],9],10],[[[50,[8]],9],10],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[[51,[3]],[52,[3]],7,[54,[3,53]],[55,[3]],[17,[[16,[3]]]],56],[[15,[14]]]],[[[51,[3]],[13,[3]],7,[17,[[16,[3]]]]],[[15,[14]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[[51,[1]]],[[51,[1]]]],[57,57],[[[58,[[0,[1,3]]]]],[[58,[[0,[1,3]]]]]],[[]],[[]],[[]],[[[5,[3]]]],0,0,0,[[],57],[[],[[58,[[0,[6,3]]]]]],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],0,[[[51,[8]],9],10],[[57,9],10],[[[58,[[0,[8,3]]]],9],10],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[[11,[3]]]],[[[5,[3]]],[[51,[3]]]],[[[32,[56]],7],[[58,[3]]]],[[[11,[3]]],[[58,[3]]]],[[[11,[3]]],[[58,[3]]]],[[[32,[56]],7,57],[[58,[3]]]],0,0,0,0,0,0,[[[58,[3]],[13,[3]]],[[15,[14]]]],[[[58,[3]],[17,[[16,[3]]]],[13,[3]]],[[15,[14]]]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,0,0,[[],18],[[],18],[[],18],[[],18],[[],7],0,0,[[]],[[]],[[]],[[]],[[[58,[3]]],[[58,[3]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[59,[1]]],[[59,[1]]]],[[[60,[[0,[1,3]]]]],[[60,[[0,[1,3]]]]]],[[]],[[]],[[[5,[3]]]],0,[[],[[60,[[0,[6,3]]]]]],[7],[7],[7],[7],[7],[7],[7],[7],[7],0,0,[[[59,[8]],9],10],[[[60,[[0,[8,3]]]],9],10],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[]],[[]],[[]],0,[[[59,[3]],[13,[3]],[32,[61]]],[[15,[14]]]],[[[11,[3]]]],[[[5,[3]]],[[59,[3]]]],[[[11,[3]]],[[60,[3]]]],[[[11,[3]]],[[60,[3]]]],0,0,0,[[[60,[3]],[13,[3]]],[[15,[14]]]],[[[60,[3]],[17,[[16,[3]]]],[13,[3]]],[[15,[14]]]],0,[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,[[],18],[[],18],[[],18],0,0,[[],7],[[]],[[]],[[]],[[[60,[3]]],[[60,[3]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[62,62],[63,63],[[]],[[]],[[],62],[7],[7],[7],[7],[7],[7],[7],[7],[7],[[62,62],41],[[],41],[[],41],[[62,9],10],[[62,9],10],[[64,9],10],[65,62],[[]],[66,62],[[]],[67,64],[[]],[62,[[36,[7]]]],[[62,31]],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],[[],63],[63,7],[63,36],[63,36],[[63,7],36],[64,67],[[],68],[62,[[32,[64]]]],[63],[[]],[[]],[[],35],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],18],[[],18],[[],18],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[61,61],[69,69],[70,70],[71,71],[[]],[[]],[[]],[[]],[[70,70],40],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[[70,70],41],[[],41],[[],41],[61,[[42,[3]]]],[[61,9],10],[[70,9],10],[[]],[[]],[[]],[[]],[[70,31]],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],[[]],[[]],[[],69],[[],71],[69,7],[71,7],[69,36],[71,36],[69,36],[71,36],[[69,7],36],[[71,7],36],[[],68],[[],68],[[70,70],[[36,[40]]]],[61,3],[69],[71],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],0,0,0,[[[72,[3]],[13,[3]],7],[[15,[14]]]],[[]],[[]],[[]],[[]],[[[72,[1]]],[[72,[1]]]],[[[73,[1]]],[[73,[1]]]],[[]],[[]],[[[5,[3]]]],[[],[[73,[6]]]],[7],[7],[7],[7],[7],[7],0,0,[[[72,[8]],9],10],[[[73,[8]],9],10],[[]],[[]],[[],7],[[],7],[[]],[[]],0,[[[11,[3]]]],0,[[[5,[3]]],[[72,[3]]]],[[[32,[74]],7],[[73,[3]]]],[[[11,[3]]],[[73,[3]]]],0,0,[[[73,[3]],[13,[3]]],[[15,[14]]]],[[[73,[3]],[17,[[16,[3]]]],[13,[3]]],[[15,[14]]]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],18],[[],18],[[],7],[[]],[[]],[[[73,[3]]],[[73,[3]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[75,75],[76,76],[77,77],[78,78],[[]],[[]],[[]],[[]],0,[[],75],[[],76],[[],77],[[],78],[7],[7],[7],[7],[7],[7],[7],[7],0,[7],[7],[7],[7],[[75,9],10],[[76,9],10],[[77,9],10],[[78,9],10],[[]],[[]],[[]],[[]],0,0,0,0,[78,75],[78,77],[[78,7,7],[[32,[43]]]],[[78,7,7],[[79,[3]]]],[78,[[32,[76]]]],0,0,[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],0,0,0,0,0,[[[11,[3]]],78],0,0,0,0,[[]],[[]],[[]],[[]],0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,[[],18],[[],18],[[],18],[[],18],0,[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[80,[3]]],[[36,[7]]]],0,[[[81,[1]]],[[81,[1]]]],[[[80,[[0,[1,3]]]]],[[80,[[0,[1,3]]]]]],[[]],[[]],[[[5,[3]]]],[[],[[80,[[0,[6,3]]]]]],[7],[7],[7],[7],[7],[7],[7],[7],[7],[[[81,[8]],9],10],[[[80,[[0,[8,3]]]],9],10],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[]],[[]],[[]],0,0,0,[[[11,[3]]]],[[[5,[3]]],[[81,[3]]]],[[7,[32,[[32,[43]]]]],[[80,[3]]]],[[[11,[3]]],[[80,[3]]]],[[[80,[3]],[13,[3]]],[[15,[14]]]],[[[80,[3]],[17,[[16,[3]]]],[13,[3]]],[[15,[14]]]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],18],[[],18],[[],18],[[],7],[[]],[[]],[[]],[[[80,[3]]],[[80,[3]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[82,[3]],[13,[3]],[17,[[16,[3]]]]],[[15,[7,14]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[83,[1]]],[[83,[1]]]],[[[84,[1]]],[[84,[1]]]],[85,85],[[[82,[1]]],[[82,[1]]]],[86,86],[87,87],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[3]]]],[[[5,[3]]]],[[],[[88,[[0,[6,3]]]]]],[[],87],0,[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],0,[7],[7],[7],[7],[7],[7],[7],[[85,85],41],[86,[[42,[3]]]],[[[83,[8]],9],10],[[[84,[8]],9],10],[[85,9],10],[[86,9],10],[[87,9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[89,[[32,[90]]]],0,0,[[[88,[3]]]],[86,3],[[[88,[3]],[13,[3]]],[[15,[14]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[88,[3]]],[[88,[3]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[90,90],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],90],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[97,[[15,[91]]]],[97,[[15,[92]]]],[97,[[15,[93]]]],[97,[[15,[94]]]],[97,[[15,[95]]]],[97,[[15,[96]]]],[97,[[15,[90]]]],[7],[7],[7],[7],[7],[7],[7],[[91,9],10],[[92,9],10],[[93,9],10],[[94,9],10],[[95,9],10],[[96,9],10],[[90,9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[91,98],15],[[92,98],15],[[93,98],15],[[94,98],15],[[95,98],15],[[96,98],15],[[90,98],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[[99,[[0,[1,3]]]]],[[99,[[0,[1,3]]]]]],[[[100,[[0,[1,3]]]]],[[100,[[0,[1,3]]]]]],[[]],[[]],[[[5,[3]]]],[[[5,[3]]]],[[],[[100,[[0,[6,3]]]]]],[7],[7],[7],[7],[7],[7],[7],[7],[7],[[[99,[[0,[8,3]]]],9],10],[[[100,[[0,[8,3]]]],9],10],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[[100,[3]]],[[32,[[32,[3]]]]]],[[]],[[]],[[]],0,0,0,[[[11,[3]]]],[[[5,[3]]],[[99,[3]]]],[[7,7,78],[[100,[3]]]],[[[11,[3]]],[[100,[3]]]],[[[100,[3]]]],0,[[[100,[3]],[13,[3]]],[[15,[14]]]],[[[100,[3]],[17,[[16,[3]]]],[13,[3]]],[[15,[14]]]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,[[],18],[[],18],[[],18],[[],7],[[]],[[]],[[]],[[[100,[3]]],[[100,[3]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[106,[101,[0,[[103,[102]],104,[105,[102]]]]]]],32],[[[107,[101,[0,[[103,[102]],104,[105,[102]]]]]]],32],[[[108,[101]],109],[[15,[110]]]],[[111,13,[112,[101]],109],[[15,[14]]]],[[102,89],[[15,[110]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[102,102],[113,113],[[[115,[[0,[1,114]]]]],[[115,[[0,[1,114]]]]]],[[[116,[[0,[1,114]]]]],[[116,[[0,[1,114]]]]]],[111,111],[[[106,[[0,[1,101]],1]]],[[106,[[0,[1,101]],1]]]],[[[107,[[0,[1,101]],1]]],[[107,[[0,[1,101]],1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[120,[114,[118,[117]],7,119]],121],[[15,[110]]]],[[[120,[114,102,[32,[43,122]]]],114],[[15,[110]]]],[[[120,[114,102,[32,[43,122]]]],114],[[15,[123]]]],[[[120,[114,[118,[117]],7,119]],124],[[15,[110]]]],[[[120,[114,102,[32,[43,122]]]]],[[15,[123]]]],[[[120,[114,102,[32,[43,122]]]]],[[15,[110]]]],[[[125,[114]],[126,[114]],113],[[127,[114,102]]]],[5,111],[5],[5],[[],113],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[[102,89],[[15,[110]]]],[[102,114]],[111,[[128,[114]]]],[[[120,[114,102,129,[32,[43,122]]]]],129],[[[120,[114,102,129,[32,[43,122]]]]],129],[[102,9],[[15,[130]]]],[[[120,[[0,[8,114]],[0,[8,[131,[[0,[8,114]]]]]],8,8]],9],[[15,[130]]]],[[113,9],[[15,[130]]]],[[]],[[]],[[]],[[]],[[[115,[114]]],[[116,[114]]]],[[]],[[]],[[]],[[]],[[],7],[129,[[120,[114,102,129,[32,[43,122]]]]]],[132,[[120,[114,102,132,[32,[43,122]]]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[[107,[101,[0,[[103,[102]],104,[105,[102]]]]]]],[[32,[32]]]],[[[106,[101,[0,[[103,[102]],104,[105,[102]]]]]]],[[32,[32]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],113],[[],113],[[102,133]],[[[120,[114,[118,[117]],7,119]],[32,[7,122]]],[[32,[[32,[124,122]],122]]]],[[111,[13,[3]]],[[15,[14]]]],[[[120,[114,102,[32,[43,122]]]]],102],[[[120,[114,[118,[117]],7,119]]],[[118,[117]]]],[111,[[134,[3]]]],0,[[],114],[[],[[120,[114,102,[32,[43,122]]]]]],[[[118,[117]]],[[120,[114,[118,[117]],7,119]]]],[[[127,[114]],[32,[32]]],[[115,[114]]]],[[[127,[114]],[16,[[32,[32]]]],16],[[116,[114]]]],[[[108,[101]],109],[[15,[[106,[101,[0,[[103,[102]],104,[105,[102]]]]]],110]]]],[[[108,[101]],127,[16,[[32,[32]]]],16],[[15,[[107,[101,[0,[[103,[102]],104,[105,[102]]]]]],110]]]],[[[106,[101,[0,[[103,[102]],104,[105,[102]]]]]]],[[32,[7]]]],[[[107,[101,[0,[[103,[102]],104,[105,[102]]]]]]],[[32,[7]]]],[[[116,[114]]],16],[[[116,[114]]],[[127,[114]]]],[111,[[135,[3]]]],0,[[[120,[114,[118,[117]],7,119]]],[[15,[121,110]]]],[[[120,[114,102,132,[32,[43,122]]]]],[[15,[114,110]]]],[[[120,[114,102,132,[32,[43,122]]]]],[[15,[114,123]]]],[[[120,[114,[118,[117]],7,119]]],[[15,[124,110]]]],[[[120,[114,102,132,[32,[43,122]]]]],[[15,[110]]]],[[[120,[114,102,132,[32,[43,122]]]]],[[15,[123]]]],[[113,41],113],[[113,41],113],[[[120,[114,[118,[117]],7,119]]],124],[[[120,[114,102,[32,[43,122]]]]]],[[[120,[114,102,[32,[43,122]]]]],[[136,[114]]]],[[[120,[114,102,129,[32,[43,122]]]]],129],[[[106,[101,[0,[[103,[[118,[137]]]],[138,[[118,[137]]]]]]]],13],[[15,[14]]]],[[[107,[101,[0,[[103,[[118,[137]]]],[138,[[118,[137]]]]]]]],13],[[15,[14]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[113,[36,[[32,[122]]]]],113],[[113,[32,[7,122]]],113],[[113,7],113],[[[116,[114]]],[[116,[114]]]],[[[106,[101,[0,[[103,[[118,[137]]]],[138,[[118,[137]]]]]]]]],[[106,[101,[0,[[103,[[118,[137]]]],[138,[[118,[137]]]]]]]]]],[[[107,[101,[0,[[103,[[118,[137]]]],[138,[[118,[137]]]]]]]]],[[107,[101,[0,[[103,[[118,[137]]]],[138,[[118,[137]]]]]]]]]],[[[120,[114,102,129,[32,[43,122]]]],114],[[15,[123]]]],[[[120,[114,102,129,[32,[43,122]]]]],[[15,[123]]]],0,0,0,0,0,[[139,[52,[3]],89]],[[[140,[3]],[13,[3]],7],[[15,[14]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[140,[1]]],[[140,[1]]]],[139,139],[[[141,[1]]],[[141,[1]]]],[[]],[[]],[[]],[[[5,[3]]]],[[],[[141,[6]]]],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[[[141,[8]],9],10],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[[141,[3]]],[[32,[[32,[3]]]]]],[[]],[[]],[[]],[[]],[[[11,[3]]]],0,[[[5,[3]]],[[140,[3]]]],[[142,7],[[141,[3]]]],[[[11,[3]]],[[141,[3]]]],0,0,[[[141,[3]],[13,[3]]],[[15,[14]]]],[[[141,[3]],[17,[[16,[3]]]],[13,[3]]],[[15,[14]]]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],18],[[],18],[[],18],[[],18],0,0,0,[[],7],[[]],[[]],[[]],[[]],[[[141,[3]]],[[141,[3]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[143,144,3],[[15,[145]]]],[[[146,[144]],3],[[15,[145]]]],0,0,[[[147,[[0,[1,3]]]]],[[147,[[0,[1,3]]]]]],[[[148,[[0,[1,3]]]]],[[148,[[0,[1,3]]]]]],[[]],[[]],[[[5,[3]]]],[[[5,[3]]]],0,[[],[[148,[[0,[6,3]]]]]],[[],[[149,[[0,[6,3]]]]]],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],0,0,[[[148,[[0,[8,3]]]],9],10],[[]],[[]],[[]],[[]],[[[11,[3]]],7],[[],7],[[],7],[[],7],[[],7],[[[148,[3]]],[[32,[[32,[3]]]]]],[[]],[[]],[[]],[[]],0,0,0,[[[11,[3]]]],0,0,[[[5,[3]]],[[147,[3]]]],[[[11,[3]]],[[148,[3]]]],[[[148,[3]]]],0,0,[[[148,[3]],[13,[3]]],[[15,[14]]]],[[[148,[3]],[17,[[16,[3]]]],[13,[3]]],[[15,[14]]]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,[[],18],[[],18],[[],18],[[],18],[[],7],[[]],[[]],[[]],[[]],[[[148,[3]]],[[148,[3]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[32,[[25,[24]]]]]],[5],[52],[[],[[32,[35]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[150,150],[151,151],[152,152],[153,153],[[]],[[]],[[]],[[]],[[150,150],40],[[],[[32,[[25,[33]]]]]],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[[150,150],41],[[152,152],41],[[],41],[[],41],[[],41],[[],41],[150,[[42,[3]]]],[152,[[42,[3]]]],[[150,9],10],[[152,9],10],[[]],[[]],[[]],[[]],[[150,31]],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],[[]],[[]],[[],151],[[],153],[151,7],[153,7],[151,36],[153,36],[151,36],[153,36],[[151,7],36],[[153,7],36],[[],68],[[],68],[[150,150],[[36,[40]]]],[150,3],[152,3],[151],[153],[154,[[32,[42]]]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],0,[[155,[11,[156]]],155],[[155,[157,[23]]],155],[[]],[[]],[7],[7],[7],[[155,[157,[23]]],155],[[]],[[],7],[[]],[[[11,[156]]],155],[158,155],[[155,144],155],[155],[[155,[157,[23]]],155],[[155,158],155],[[],15],[[],15],[[],18],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[159,[[0,[1,3]]]]],[[159,[[0,[1,3]]]]]],[[[160,[[0,[1,3]]]]],[[160,[[0,[1,3]]]]]],[[]],[[]],[[[5,[3]]]],[[],[[160,[[0,[6,3]]]]]],[7],[7],[7],[7],[7],[7],[7],[7],[7],[[[159,[[0,[8,3]]]],9],10],[[[160,[[0,[8,3]]]],9],10],[[]],[[]],[[]],[7,7],[[],7],[[],7],[[],7],[[[160,[3]]],[[32,[[32,[3]]]]]],[[]],[[]],[[]],0,[[[159,[3]],[13,[3]]],[[15,[14]]]],0,0,[[7,7],7],[[[11,[3]]]],[[[5,[3]]],[[159,[3]]]],[[7,7,161,[32,[162]]],[[160,[3]]]],[[[11,[3]]],[[160,[3]]]],0,0,[[[160,[3]],[13,[3]]],[[15,[14]]]],[[[160,[3]],[17,[[16,[3]]]],[13,[3]]],[[15,[14]]]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,0,[[],18],[[],18],[[],18],[[],7],[[]],[[]],[[]],[[[160,[3]]],[[160,[3]]]],0,0,0,[[]],[[]],[[[163,[[0,[1,3]]]]],[[163,[[0,[1,3]]]]]],[[]],[[],[[163,[3]]]],[7],[7],[7],[[[163,[[0,[8,3]]]],9],10],[[]],[[],7],[[]],0,[7,7],[7,[[163,[3]]]],[[]],[[],15],[[],15],[[],18],[[]],0,0,0,0,0,0,0,0,0,0,[[164,164],164],[[164,[29,[164]]],164],[[164,[29,[164]]],164],[[164,164]],[[],[[166,[165]]]],[[]],[164],[164,167],[164,168],[164,161],[164,7],[[164,7],41],[[164,164],164],[[164,164]],[[164,164],164],[[164,164]],[164,7],[[164,164],164],[[164,164]],[[]],[[]],[[]],[[]],[[164,7],43],0,0,[[164,164],[[36,[164]]]],[[164,164],[[36,[164]]]],[[164,164],[[36,[164]]]],[164,[[36,[164]]]],[[164,164],[[36,[164]]]],[[164,164],[[36,[164]]]],[[164,164],[[36,[164]]]],[164,164],[[[17,[1]]],[[17,[1]]]],[[]],[[]],[[164,164],40],[[[5,[3]]],17],[169,[[15,[164,170]]]],[171,[[15,[164,172]]]],[[],[[15,[164,173]]]],[174,[[15,[164,175]]]],[[],[[15,[170]]]],[168,[[15,[170]]]],[[168,169],[[15,[170]]]],[[],164],[[],[[17,[6]]]],[7],[7],[7],[7],[97,[[15,[164]]]],[[164,[29,[164]]],164],[[164,[29,[164]]],164],[[164,[29,[164]]]],[[164,164]],[7],[7],[164,[[32,[43,122]]]],[[164,176]],[[164,164],41],[[],41],[[],41],[7,164],[[],42],[[17,[5,[3]]],[[17,[[42,[3]]]]]],[[164,9],[[15,[130]]]],[[164,9],[[15,[130]]]],[[164,9],[[15,[130]]]],[[164,9],[[15,[130]]]],[[[17,[8]],9],10],[[],164],[177,164],[161,164],[[],164],[[],164],[178,164],[179,164],[180,164],[181,164],[182,164],[164,164],[89,164],[43,164],[183,164],[168,164],[7,164],[[]],[184,164],[185,164],[186,164],[187,164],[188,164],[167,164],[189,164],[190,164],[[]],[[],164],[89,[[15,[164,191]]]],[[],164],[89,[[15,[164]]]],[[89,168],[[15,[164,192]]]],[193,[[15,[164,194]]]],[[[32,[193,122]]],[[15,[194]]]],[[164,164],195],[[164,31]],[[[17,[1]]]],[[[17,[[16,[3]]]]],[[32,[[16,[3]]]]]],[[],7],[[],7],[[],[[32,[32]]]],0,[164,164],[[]],[[]],[164,193],[[],[[32,[193,122]]]],[164,41],[[[17,[1]]],1],[[[17,[[42,[3]]]]]],[164,168],[164,7],[7,168],[[[17,[1]]],1],[[[17,[[42,[3]]]]]],[164,167],[164,168],[164,161],[[],7],[[],164],[11],[[164,177],164],[[164,190],164],[[164,164],164],[[164,189],164],[[164,7],164],[[164,161],164],[[164,183],164],[[164,189],164],[[164,181],164],[[164,7],164],[[164,181],164],[[164,189],164],[[164,190],164],[[164,190],164],[[164,161],164],[[164,183],164],[[164,177],164],[[164,161],164],[[164,164],164],[[164,190],164],[[164,161],164],[[164,177],164],[[164,7],164],[[164,180],164],[[164,43],164],[[164,180],164],[[164,181],164],[[164,168],164],[[164,183],164],[[164,168],164],[[164,189],164],[[164,177],164],[[164,168],164],[[164,43],164],[[164,180],164],[[164,164],164],[[164,181],164],[[164,7],164],[[164,180],164],[[164,43],164],[[164,43],164],[[164,168],164],[[164,164],164],[[164,183],164],[[164,164]],[[164,190]],[[164,189]],[[164,43]],[[164,183]],[[164,7]],[[164,177]],[[164,181]],[[164,180]],[[164,161]],[[164,168]],[5],[11],[164,164],[[],164],[[164,164]],[[164,164]],[164],[[164,164]],[[164,164]],[[],196],[[164,164],[[36,[40]]]],[[164,164],164],[[[5,[3]],197]],[[164,[0,[[29,[164]],198]]],164],[[164,[0,[[29,[164]],198]]],164],[[164,[0,[[29,[164]],198]]]],[[164,199]],[[164,164],164],[[164,164],164],[[164,164],164],[[164,98],15],[[164,[29,[164]]],164],[[164,[29,[164]]],164],[[164,[29,[164]]]],[[164,[29,[164]]],164],[[164,[29,[164]]],164],[[164,[29,[164]]]],[[164,[29,[164]]],164],[[164,[29,[164]]],164],[[164,164]],[[[17,[16]],13],[[15,[14]]]],[164,200],[164],[164],[[],[[32,[43,122]]]],[164],[164],[[]],[[]],[164,[[36,[3]]]],[[],35],[164,164],[164,168],[[],[[15,[[166,[165]],201]]]],[[],15],[202,[[15,[164]]]],[195,[[15,[164,203]]]],[204,[[15,[164]]]],[195,[[15,[164,203]]]],[[],15],[[],15],[[],15],[[],18],[[],18],[[],[[206,[205]]]],[[],7],[[164,207]],[[17,[13,[3]]],[[17,[[16,[3]]]]]],[[]],[[]],0,[[],164],0,[[]],[[]],[[[208,[1]]],[[208,[1]]]],[[]],[7],[7],[7],[[[208,[3]]],[[42,[3]]]],[[[208,[3]]],[[42,[3]]]],[[[208,[8]],9],10],[[]],[[],7],[[]],[[[154,[3]],[25,[24]],7,7],[[208,[3]]]],[[[5,[3]],[25,[24]],7,7],[[208,[3]]]],[[]],[[],15],[[],15],[[],18],[[]],0,[[[209,[3]],[0,[3]],7,36],[[15,[[32,[[26,[3,3]]]],14]]]],[[[209,[3]],[0,[3]],7,200],[[15,[[32,[[26,[3,3]]]],14]]]],[[[209,[3]],[0,[3]],7,164],[[15,[[32,[[26,[3,3]]]],14]]]],[[]],[[]],[[[209,[1]]],[[209,[1]]]],[[]],[7],[7],[7],[[[209,[3]]],[[42,[3]]]],[[[209,[8]],9],10],[[]],[[],7],[[]],0,[[],[[209,[3]]]],[[[209,[3]]],[[42,[3]]]],[[]],[[[209,[3]]],[[79,[[42,[3]]]]]],[[],15],[[],15],[[],18],[[]],0,0,0,[[[79,[[42,[3]]]],[79,[[42,[3]]]]],[[79,[[42,[3]]]]]],[[[79,[[16,[3]]]],[52,[3]],23,[79,[[25,[24]]]],7],[[15,[[79,[[26,[3,3]]]],14]]]],[[[210,[[208,[3]]]],[0,[3]],7,200],[[15,[[32,[[26,[3,3]]]],14]]]],[[[210,[[208,[3]]]],[0,[3]],7,211],[[15,[[32,[[26,[3,3]]]],14]]]],[[[210,[[208,[3]]]],[0,[3]],7,161],[[15,[[32,[[26,[3,3]]]],14]]]],[[]],[[]],[[]],[[]],[[[210,[1]]],[[210,[1]]]],[[[79,[1]]],[[79,[1]]]],[[]],[[]],[[],[[210,[6]]]],[[],[[79,[6]]]],[7],[79],[7],[7],[7],[7],[7],[[],[[79,[[16,[3]]]]]],[[[210,[[42,[3]]]],[210,[[42,[3]]]]],[[42,[3]]]],[[[79,[[0,[1,212]]]],[79,[[0,[1,212]]]]],41],[[[79,[[0,[3]]]]],[[79,[[42,[3]]]]]],[[[210,[8]],9],10],[[[79,[8]],9],10],[[]],[211,[[79,[3]]]],[41,[[79,[3]]]],[161,[[79,[3]]]],[213,[[79,[3]]]],[43,[[79,[3]]]],[200,[[79,[3]]]],[[]],[[[42,[3]]],[[79,[[42,[3]]]]]],[[[79,[1]]],1],[[],7],[[],7],[[]],[[]],[[[79,[1]]]],[[[79,[1]]],[[79,[[16,[1]]]]]],[[[210,[3]]],41],0,[[[79,[1]]],1],[[[79,[1]],197],[[79,[1]]]],[[[79,[[42,[3]]]],[42,[3]]],[[79,[[42,[3]]]]]],[[[79,[[42,[3]]]],[79,[[42,[3]]]]],[[79,[[42,[3]]]]]],[[],7],[[],7],[[],210],[[],[[79,[1]]]],[[],[[79,[[42,[3]]]]]],[[[210,[[25,[24]]]],[154,[3]],30],[[210,[[42,[3]]]]]],[[[79,[[25,[24]]]],[154,[3]],30],[[79,[[42,[3]]]]]],[42,42],[42,42],[[[0,[[214,[3]],1]],[79,[[0,[[214,[3]],1]]]],[79,[[0,[[214,[3]],1]]]]],[[79,[[42,[3]]]]]],[[[79,[[42,[3]]]],[79,[[42,[3]]]]],[[79,[[42,[3]]]]]],[[[210,[43]]],[[210,[[42,[3]]]]]],[[[79,[[0,[[214,[3]],1]]]]],[[32,[[42,[3]]]]]],[[[79,[1]]]],[[]],[[]],[[],[[79,[42]]]],[[[210,[[208,[3]]]]],[[79,[[42,[3]]]]]],[[[210,[[42,[3]]]]],[[79,[[42,[3]]]]]],[[[79,[[42,[3]]]]],[[79,[[42,[3]]]]]],[[[79,[[208,[3]]]]],[[79,[[42,[3]]]]]],[[[210,[[208,[3]]]]],[[210,[[42,[3]]]]]],[[[210,[[42,[3]]]]],[[210,[[42,[3]]]]]],[[],15],[[],15],[[],15],[[],15],[[],18],[[],18],[[]],[[]],[[],[[79,[[42,[3]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[146,[144]]],[[15,[[11,[3]],145]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[215],[215,[[32,[216,122]]]],0,[142],[142],0,[216,216],[66,66],[215,215],[[[11,[1]]],[[11,[1]]]],[217,217],[218,218],[219,219],[[[220,[[0,[1,1]]]]],[[220,[[0,[1,1]]]]]],[142,142],[221,221],[[[222,[1]]],[[222,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[216,[[36,[200]]]],0,0,0,0,0,0,[[],216],[[],66],[[],215],[[],[[11,[6]]]],[[],217],[[],219],[[],[[220,[[0,[6,1]]]]]],[[],142],[[],[[222,[6]]]],0,[7],[7],[215],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],0,[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],0,0,[[216,216],41],[[],41],[[],41],0,0,0,0,0,[[216,9],[[15,[130]]]],[[66,9],[[15,[130]]]],[[215,9],[[15,[130]]]],[[[11,[8]],9],10],[[217,9],10],[[218,9],10],[[219,9],10],[[[220,[[0,[8,1]]]],9],10],[[142,9],10],[[221,9],10],[[[222,[8]],9],10],[[]],[[]],[[]],[[]],[223,217],[[]],[[]],[[]],[[]],[[]],[224,142],[[]],[[]],0,0,0,0,[[[11,[3]]],168],0,0,[[142,225]],[142],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[216,41],[216,41],0,0,0,[215,41],0,0,0,0,0,0,[215,66],0,0,[66,161],[[226,227,228,7,7],66],[[161,7,229,12,230,41],[[15,[215,145]]]],0,[66,41],[66,[[36,[67]]]],[7,215],0,0,0,0,0,0,0,0,[[66,7],225],[66,7],0,0,0,[66,161],0,[215],[215,[[32,[66,122]]]],[217,32],[142,[[32,[221]]]],[7],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],0,[[[220,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[8,"Clone"],[3,"BytecodeCircuitConfig"],[8,"Field"],[3,"BytecodeCircuit"],[3,"ConstraintSystem"],[8,"Default"],[15,"usize"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Block"],[3,"CodeDB"],[8,"Layouter"],[4,"Error"],[4,"Result"],[3,"Value"],[3,"Challenges"],[3,"TypeId"],[8,"CellType"],[3,"StoredExpression"],[3,"CachedRegion"],[8,"ChallengeSet"],[8,"Fn"],[3,"Advice"],[3,"Column"],[3,"AssignedCell"],[3,"Fixed"],[4,"Assigned"],[8,"Into"],[3,"Rotation"],[8,"Hasher"],[3,"Vec"],[4,"Any"],[3,"DynamicLookupTable"],[3,"String"],[4,"Option"],[4,"DefaultCellType"],[3,"CellConfig"],[3,"CellManager"],[4,"Ordering"],[15,"bool"],[4,"Expression"],[15,"u8"],[3,"ExpressionVec"],[3,"DynamicData"],[3,"ConstraintBuilder"],[3,"IsZeroGadget"],[3,"IsEqualGadget"],[3,"IsEqualWordGadget"],[3,"LtGadget"],[3,"CopyCircuitConfig"],[3,"Region"],[4,"CopyDataType"],[3,"BinaryNumberChip"],[3,"LtChip"],[3,"CopyEvent"],[3,"ExternalData"],[3,"CopyCircuit"],[3,"EvmCircuitConfig"],[3,"EvmCircuit"],[4,"FixedTableTag"],[4,"ExecutionState"],[3,"ExecutionStateIter"],[4,"ResponsibleOp"],[4,"ExecError"],[3,"ExecStep"],[4,"OpcodeId"],[3,"IterBridge"],[3,"FixedTableTagIter"],[4,"Table"],[3,"TableIter"],[3,"ExpCircuitConfig"],[3,"ExpCircuit"],[3,"ExpEvent"],[3,"BlockValues"],[3,"TxValues"],[3,"ExtraValues"],[3,"PublicData"],[3,"Word"],[3,"KeccakCircuit"],[3,"KeccakCircuitConfig"],[3,"MPTConfig"],[3,"StateMachineConfig"],[3,"MPTContext"],[4,"RlpItemType"],[4,"FixedTableTag"],[3,"MPTCircuitParams"],[3,"MPTCircuit"],[15,"str"],[3,"Node"],[3,"BranchNode"],[3,"ExtensionNode"],[3,"StartNode"],[3,"ExtensionBranchNode"],[3,"AccountNode"],[3,"StorageNode"],[8,"Deserializer"],[8,"Serializer"],[3,"PiCircuitConfig"],[3,"PiCircuit"],[8,"MultiMillerLoop"],[3,"NativeLoader"],[8,"PolynomialCommitmentScheme"],[8,"AccumulationSchemeProver"],[8,"AccumulationDecider"],[3,"TestAggregationCircuit"],[3,"RootCircuit"],[3,"ParamsKZG"],[8,"IntoIterator"],[4,"Error"],[3,"AggregationConfig"],[6,"KzgSvk"],[3,"Config"],[8,"CurveAffine"],[3,"Snark"],[3,"SnarkWitness"],[3,"EvmLoader"],[3,"Rc"],[3,"MemoryChunk"],[3,"EvmTranscript"],[3,"EcPoint"],[3,"Global"],[3,"Error"],[3,"Scalar"],[8,"Params"],[3,"VerifyingKey"],[3,"PlonkProtocol"],[6,"EccChip"],[8,"Write"],[3,"Error"],[8,"Loader"],[8,"Read"],[8,"PrimeField"],[3,"MainGate"],[3,"RangeChip"],[3,"ChallengeEvm"],[6,"Halo2Loader"],[8,"AccumulationScheme"],[3,"SortKeysConfig"],[3,"StateCircuitConfig"],[3,"StateCircuit"],[3,"RwMap"],[3,"GethData"],[3,"FixedCParams"],[4,"Error"],[3,"CircuitInputBuilder"],[3,"SuperCircuitConfig"],[3,"SuperCircuit"],[3,"SuperCircuitParams"],[4,"AccountFieldTag"],[3,"AccountFieldTagIter"],[4,"CallContextFieldTag"],[3,"CallContextFieldTagIter"],[3,"VirtualCells"],[3,"CircuitTestBuilder"],[3,"Fr"],[3,"Box"],[3,"TestContext"],[3,"TxCircuitConfig"],[3,"TxCircuit"],[15,"u64"],[3,"Transaction"],[3,"SignVerifyChip"],[3,"U256"],[8,"BitOrder"],[3,"BitSlice"],[15,"u128"],[15,"u32"],[8,"Input"],[3,"Error"],[3,"Rlp"],[4,"DecoderError"],[4,"DecodeError"],[8,"AsRef"],[4,"AbiError"],[8,"BufMut"],[15,"i64"],[3,"U128"],[3,"Uint"],[15,"u16"],[15,"isize"],[3,"B256"],[15,"i16"],[4,"ParseUnits"],[4,"Chain"],[4,"Numeric"],[3,"Uint8"],[15,"i128"],[15,"i32"],[15,"i8"],[4,"FromDecStrErr"],[3,"FromStrRadixErr"],[4,"Token"],[3,"InvalidOutputType"],[3,"U512"],[4,"ParamType"],[8,"FnMut"],[8,"Copy"],[3,"RlpStream"],[3,"H160"],[4,"BitSpanError"],[3,"I256"],[4,"Error"],[4,"StringifiedNumeric"],[4,"MetaForm"],[3,"Type"],[8,"FnOnce"],[3,"Cell"],[3,"IntDecomposition"],[3,"WordLimbs"],[6,"Word"],[8,"PartialEq"],[3,"H256"],[8,"Expr"],[3,"Transaction"],[3,"Call"],[3,"BlockContext"],[3,"MptUpdate"],[3,"MptUpdates"],[3,"MptUpdateRow"],[4,"Rw"],[3,"RwRow"],[3,"Block"],[3,"OperationContainer"],[3,"OperationRef"],[3,"GethExecStep"],[3,"CallContext"],[3,"RWCounter"],[3,"StateDB"],[3,"Transaction"],[3,"BytecodeCircuitConfigArgs"],[8,"ExprResult"],[8,"RLCable"],[8,"RLCChainable"],[8,"RLCChainableRev"],[8,"RLCChainableValue"],[8,"RLCableValue"],[8,"ExprVec"],[8,"ToVec"],[3,"CopyCircuitConfigArgs"],[3,"EvmCircuitConfigArgs"],[3,"KeccakCircuitConfigArgs"],[3,"PiCircuitConfigArgs"],[3,"StateCircuitConfigArgs"],[3,"SuperCircuitConfigArgs"],[8,"LookupTable"],[3,"TxCircuitConfigArgs"],[8,"SubCircuit"],[8,"SubCircuitConfig"],[8,"WordExpr"],[13,"TxAccessListAccount"],[13,"TxAccessListAccountStorage"],[13,"Account"],[13,"AccountStorage"],[13,"Memory"],[13,"CallContext"],[13,"Stack"],[13,"TxLog"],[13,"TxReceipt"],[13,"TxRefund"],[13,"Start"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
