name: Integration Tests

on:
  on: issue_comment
  pull_request:
    types: [synchronize, opened, reopened, ready_for_review]
  push:
    branches:
      - main

jobs:
  help:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - name: Help
      uses: actions/github-script@v6
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          })
          const botComment = comments.find(comment => comment.user.id === 41898282)
          if (!botComment) {
            const body = 'ðŸ‘‹ Comment on this pull request with `/test` to run the integration tests.'
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body,
            })
          }

  consecutiveness:
    if: github.event_name == 'push' || (github.event_name == 'issue_comment' && github.event.comment.body == '/test')

    runs-on: ubuntu-latest
    steps:
    - uses: mktcode/consecutive-workflow-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

  wakeuprunner:
    needs: [consecutiveness]
    name: Wake up self-hosted runner
    runs-on: pse-runner

    steps:
      - uses: actions/checkout@v2
      - run: |
          .github/integrationTestsScripts/wakeUpRunner.sh

  integration-tests:
    needs: [wakeuprunner]
    name: Integration Tests
    runs-on: integration-tests-runner

    defaults:
      run:
        working-directory: ./integration-tests
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          override: false
      - name: Setup golang
        uses: actions/setup-go@v3
        with:
          go-version: ~1.18
      # Go cache for building geth-utils
      - name: Go cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      # Run an initial build in a separate step to split the build time from execution time
      - name: Build bins
        run: cargo build --bin gen_blockchain_data
      - name: Build tests
        run: for testname in rpc circuit_input_builder circuits; do cargo test --profile release --test $testname --features $testname --no-run; done
      - run: ./run.sh --steps "setup"
      - run: ./run.sh --steps "gendata"
      - run: ./run.sh --steps "tests" --tests "rpc"
      - run: ./run.sh --steps "tests" --tests "circuit_input_builder"
      - run: RUST_TEST_THREADS=1 ./run.sh --steps "tests" --tests "circuits"
      - run: ./run.sh --steps "cleanup"
